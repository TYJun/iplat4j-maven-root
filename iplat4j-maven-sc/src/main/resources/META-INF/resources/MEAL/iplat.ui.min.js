/**
 * IPLATUI初始化文件，和iplat.ui.config.js不同。
 *
 * init不对外暴露，定义基础工具方法，依赖jQuery和underscore库，但不依赖IPLATUI其他模块；
 * 同时在此针对KendoUI的组件进行微调，包括国际化配置等；
 * 在KendoUI js加载结束后，首先执行，优先于eiinfo.js和core.js。
 */
(function ($, _) {
    // 定义IPLAT模块，统一管理平台提供的方法
    var IPLAT = window.IPLAT || {},
        mainVersion = "6.2";

    // KendoUI原生属性配置管理，业务JS内可自定义配置
    var IPLATUI = window.IPLATUI || {};

    // 项目组升级上线 平台迭代构建时统一修改
    // 部分页面没有使用EFPage，但是只要引用iplat.ui.min.js 就会显示当前的版本

    // var releaseVersion = IPLATUI.releaseVersion || "6.0.0915-SNAPSHOT";
    var releaseVersion = "6.2.1231-SNAPSHOT";
    var releaseTime = "2020-06-28 13:00:00";

    // 复用underscore常用的数据类型判断函数
    IPLAT.isNull = _.isNull;
    IPLAT.isUndefined = _.isUndefined;
    IPLAT.isBoolean = _.isBoolean;
    IPLAT.isNumber = _.isNumber;
    IPLAT.isString = _.isString;
    IPLAT.isDate = _.isDate;
    IPLAT.isObject = _.isObject;

    kendo.culture("zh-CN");
    kendo.data.Model.fn.__ClassName__ = "kendoModel";
    kendo.ui.Grid.fn.__ClassName__ = "kendoGrid";

    // 解决instanceof 在子窗口 iframe中的不安全性，确定数据类型
    IPLAT.isEiColumn = function (eiColumn) {
        return isAvailable(eiColumn) && eiColumn.__ClassName__ === "EiColumn";
    };

    IPLAT.isEiBlockMeta = function (eiBlockMeta) {
        return isAvailable(eiBlockMeta) && eiBlockMeta.__ClassName__ === "EiBlockMeta";
    };

    IPLAT.isEiBlock = function (eiBlock) {
        return isAvailable(eiBlock) && eiBlock.__ClassName__ === "EiBlock";
    };

    IPLAT.isEiInfo = function (eiInfo) {
        return isAvailable(eiInfo) && eiInfo.__ClassName__ === "EiInfo";
    };

    IPLAT.isKendoModel = function (kendoModel) {
        return isAvailable(kendoModel) && kendoModel.__ClassName__ === "kendoModel";
    };

    IPLAT.isKendoGrid = function (kendoGrid) {
        return isAvailable(kendoGrid) && kendoGrid.__ClassName__ === "kendoGrid";
    };

    var extend = $.extend,
        each = $.each,
        isArray = $.isArray,
        isPlainObject = $.isPlainObject,
        isFunction = $.isFunction;

    /**
     * 判断字符串是否为空
     *
     * @param {String} str 源字符串
     * @return {boolean}
     */
    IPLAT.isEmptyString = function (str) {
        return str === '';
    };

    /**
     * 判断trim后的字符串是否为空
     *
     * @param {String} str 源字符串
     * @return {*|boolean}
     */
    IPLAT.isBlankString = function (str) {
        return IPLAT.isString(str) && str.replace(/^\s+|\s+$/g, '').length === 0;
    };

    /**
     * 格式化JSON对象中的特殊字符，ajax的data属性已经处理
     * @deprecated
     * @param {Object} obj
     */
    function formatNative(obj) {
        var str = JSON.stringify(obj);
        // 这段代码主要是为了解决ajax的data以字符串的方式提交时+和%引起的过滤问题
        // 后来ajax的data以对象方式提交同时也避免了这个问题 所以需要把这段代码注释掉
        // if(undefined != str)
        // return str.replace(/\%/g,'%25').replace(/\+/g, '%2B');
        // else
        return str;
    }

    /**
     * 判断某一对象是否为空。
     * @param {Object} obj   所要判断的对象
     * @return {boolean}    若obj为空对象(null或undefined)或是空字符串("")， 返回false，否则返回true。
     * @exception 无异常抛出
     */
    function isAvailable(obj) {
        if (obj === undefined) {
            return false;
        }

        if (obj === null) {
            return false;
        }

        return obj !== "";
    }

    /**
     * 判断某一对象数组是否每个元素可用。
     * @param {Array} array 所要判断的对象数组 []
     * @return {boolean}    若obj为每一个元素都为非空对象(null或undefined)或是空字符串("") 返回true，否则返回false。
     * @exception 无异常抛出
     */
    function isBatchAvailable(array) {
        for (var i = 0; i < array.length; i++) {
            if (!isAvailable(array[i])) {
                return false;
            }
        }
        return true;
    }

    /**
     * 获取应用上下文信息，应对相对路径，nginx下端口分发等场景
     *
     * @return {String}
     */
    function getContextPath() {
        return IPLATUI.CONTEXT_PATH || "";
    }


    window.childWindows = []; // 维护当前window的子window

    // IE8下 typeof window.open 结果是 "object"；

    // window.open = (function(open) {
    //     return function() {
    //         var childWindow = open.apply(window, arguments);
    //         window.childWindows.push(childWindow);
    //     };
    // })(window.open);

    /**
     * 使用平台的close方法，关闭子窗口
     * @private
     */
    window.__iplat__closeWindows = function (keepSelf) {
        each(childWindows, function (i, childWindow) {
            if ($.isFunction(childWindow.__iplat__closeWindows)) {
                childWindow.__iplat__closeWindows();
            } else {
                childWindow.close();
            }
        });

        if (!keepSelf) { // 默认关闭自身窗口
            window.close();
        }
    };

    /**
     * 获取当前窗口的opener, 如果是iframe获取其top窗口（即浏览器的窗口）
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/top
     * @return {Window}
     */
    IPLAT.getParentWindow = function () {
        var currentWindow = window;

        try {
            if (isAvailable(currentWindow.IPLAT_INDEX_WINDOW)) {
                // 平台的index页面
                return currentWindow;
            }

            if (isAvailable(currentWindow.opener) && currentWindow !== currentWindow.opener) {
                currentWindow = currentWindow.opener;
            }

            while (isAvailable(currentWindow.top) && currentWindow !== currentWindow.top) {
                currentWindow = currentWindow.top;
            }
        } catch (ex) {
            currentWindow = null;
            return currentWindow;
        }

        return currentWindow;
    };

    /**
     * 根据参数名，获取URL中queryString的参数值
     * @param parameterName     参数名
     * @param url               URL地址，默认为当前window的地址
     * @return {*} 参数值
     */
    IPLAT.getParameterByName = function (parameterName, url) {
        if (!url) {
            url = window.location.href;
        }
        parameterName = parameterName.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + parameterName + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    };


    extend(IPLAT, {
        VERSION: mainVersion,
        releaseVersion: releaseVersion,
        releaseTime: releaseTime,

        // 基础的工具类
        formatNative: formatNative,
        isAvailable: isAvailable,
        isBatchAvailable: isBatchAvailable,

        getContextPath: getContextPath,

        htmlEncode: kendo.htmlEncode,

        htmlDecode: function (value) {
            return ('' + value).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, "'");
        },

        // toggle的含义
        // showOverlay: true, hideOverlay: false
        progress: function (element, toggle) {
            kendo.ui.progress(element, toggle)
        },

        AJAX: {
            ContentType: {
                JSON: "application/json;charset=utf-8",
                FORM: "application/x-www-form-urlencoded;charset=utf-8"
            },
            NOOP: "__GRID_CRUD_NOOP__"
        },

        FORMAT: {
            DATE_17: "yyyyMMddHHmmssfff", // 17位时间 年月日时分秒毫秒
            DATE_14: "yyyyMMddHHmmss", // 14位时间 年月日时分秒
            DATE_8: "yyyyMMdd", // 8位时间 年月日

            DATE_17_PR: "yyyy-MM-dd HH:mm:ss.fff", // DATE_17首选格式
            DATE_17_SE: "yyyy/MM/dd HH:mm:ss.fff",

            DATE_14_PR: "yyyy-MM-dd HH:mm:ss", // DATE_14首选格式
            DATE_14_SE: "yyyy/MM/dd HH:mm:ss",

            DATE_8_PR: "yyyy-MM-dd", // DATE_8首选格式
            DATE_8_SE: "yyyy/MM/dd"
        },

        // 键盘的按键的ASCII码
        KEY_CODE: {
            Tab: 9,
            Enter: 13
        },

        CONSTANTS: {
            // 对应 com.baosight.iplat4j.core.web.export.InfoExporter中的常量
            EXPORT_FLAG: "_eiExportFlag",               // 是否导出的标志位，必需参数
            EXPORT_FILE_TYPE: "_eiExportFiletype",      // 导出的文件类型，必需参数
            EXPORT_BLOCK_ID: "_eiExportBlockname",      // 导出的数据块Id，必需参数
            EXPORT_EIINFO: "_eiExportData",             // 导出EiInfo的JSON字符串，可选参数
            EXPORT_FILE_NAME: "_eiExportFileName",      // 导出的文件名，可选参数

            EXPORT_SERVICE_NAME: "_eiExportServiceName",   // 后台产生导出EiInfo的服务名，可选参数
            EXPORT_METHOD_NAME: "_eiExportMethodName",     // 后台产生导出EiInfo的方法名，可选参数
            EXPORT_QUERY_EIINFO: "_eiExportQueryEiInfo",   // 后台产生导出EiInfo的查询条件

            QUERY_BLOCK_ID: "inqu_status",              // 查询条件EiBlock的blockId
            RESULT_BLOCK_ID: "result",                  // 结果集EiBlock的blockId

            BACKFILL_BUTTON_NAME: "确定",                // 回填按钮名

            CONFIRM_BUTTON_NAME: "确定",
            CANCEL_BUTTON_NAME: '取消'
        },

        Browser: {},

        Util: {
            // IPLATUI 使用的私有工具方法

            hasEvent: function (target, eventName) {
                var events = target["_events"],
                    exist = false;

                if ($.isPlainObject(events)) {
                    for (var key in events) {
                        if (eventName === key) {
                            exist = true;
                            return exist;
                        }
                    }
                }

                return exist;
            },

            unbindHandlers: function (target, eventType) {
                if (target instanceof kendo.Observable) {
                    var handlers = target._events[eventType];
                    target.unbind(eventType);
                    return handlers;
                }
                return [];
            },

            bindHandlers: function (target, eventType, handlers) {
                if (target instanceof kendo.Observable) {
                    each(handlers, function (i, handler) {
                        target.bind(eventType, handler);
                    });
                }
            },

            /**
             * 把block的row数组数据转换为model
             * @param i         源EiBlock的行号
             * @param inBlock   源EiBlock
             * @param indexMap  源EiBlock和Grid EiBlock的映射关系
             * @return {*}
             */
            block2Model: function (i, inBlock, indexMap) {
                var row = inBlock.getRows()[i];

                var model = {};

                for (var key in indexMap) {
                    model[key] = row[indexMap[key]] || "";
                }

                return new kendo.data.Model(model);
            },

            buildAjaxOption: function (ajaxOption) {
                var defaults = {
                    type: 'POST',
                    dataType: "json",
                    contentType: IPLAT.AJAX.ContentType.FORM
                };

                extend(defaults, ajaxOption);

                return extend(true, {}, {
                    read: defaults, // 避免复制同一个对象
                    create: defaults,
                    update: defaults,
                    destroy: defaults
                });
            },

            /**
             * 统一通过函数的方式，自定义DataSource数据请求的实现；注意CRUD的方式必须统一。
             * @link http://docs.telerik.com/kendo-ui/api/javascript/data/datasource#configuration-transport.read
             * @param {Object} transport 默认的ajax options请求
             * @param {AbstractTransport} transporter 平台封装transport示例
             * @return {Object} 函数方式的CRUD
             */
            buildCRUDFunction: function (transport, transporter) {
                for (var action in transport) {
                    var ajaxOptions = transport[action];
                    if ($.isPlainObject(transport[action])) {
                        transport[action] = (function (ajax, operation) {
                            return function (params) { // 注意这里的prams和dataSource transport的params不同
                                transporter._buildFilter(params.data);
                                transporter._buildModels(params.data, operation);

                                $.ajax(extend({}, ajax, {
                                    data: transporter._buildRequest(),
                                    success: function (result) {
                                        // notify the data source that the request succeeded
                                        params.success(result);
                                    },
                                    error: function (result) {
                                        // notify the data source that the request failed
                                        params.error(result);
                                    }
                                }));
                            }; // end inner function
                        })(ajaxOptions, action); // closure
                    } // end if
                } // end for

                return transport;
            },

            getComboText: function (values, columnTemplate, valueField, value) {
                var item = _.find(values, function (element) {
                    // 考虑到从EFComboColumn.tag的dataItem中取到的value值默认为字符串类型, 若下拉框中值为数字类型,
                    // 就会导致值匹配不上:不能根据columnTemplate指定的模板正确显示,而只显示value的值
                    // 故将"==="改为"=="
                    return element[valueField] == value;
                });
                // 确保value为0时会返回0，而不是''
                var validatedValue = IPLAT.isAvailable(value) ? value : '';

                if (item) {
                    return kendo.template(columnTemplate)(item);
                }
                return validatedValue;
            },

            filterAdapter: function (filters, postEiInfo) {
                // filters ={filters: [
                //     {field: 'x' ,op: 'eq', value:w},
                //     {filters: [ {field: 'x' ,op: 'eq', value:w},
                //         {field: 'x' ,op: 'eq', value:w}, {filters:[]}], logic: "or"}
                // ], logic:"and"}

                var queryBlock,
                    whereSQL,
                    OPERATORS = {
                        eq: "='{0}'",
                        neq: "!='{0}'", // <> , NOT
                        isnull: "=null",
                        isnotnull: "!=null",
                        isempty: "=''",
                        isnotempty: "!=''",
                        startswith: " like '{0}%'",
                        contains: " like '%{0}%'",
                        doesnotcontain: " not like '%{0}%'",
                        endswith: " like '%{0}'",
                        lt: "<{0}",
                        gt: ">{0}",
                        lte: "<={0}",
                        gte: ">={0}"
                    };

                if (!$.isPlainObject(filters)) { // undefined
                    filters = {filters: [], logic: "and"};
                }

                var _simpleFilter = function (filters) {
                    each(filters["filters"], function (i, filter) {
                        if (filter["filters"]) {
                            _simpleFilter(filter); // 递归处理
                        } else {
                            // operator信息存储在inqu_status-1-field(字段名称)中
                            if (Object.prototype.toString.call(filter["value"]) === "[object Date]") {
                                postEiInfo.set("inqu_status-0-" + filter["field"], +filter["value"]);
                            } else {
                                postEiInfo.set("inqu_status-0-" + filter["field"], filter["value"]);
                            }
                            postEiInfo.set("inqu_status-1-" + filter["field"], filter["operator"]);
                        }
                    });
                };

                // build where SQL
                var _complexFilter = function (filters) {
                    var logic = " " + filters["logic"] + " ", SQL = [];

                    each(filters["filters"], function (i, filter) {
                        if (filter["filters"]) {
                            SQL.push(_complexFilter(filter)); // 递归处理
                        } else {
                            // TODO: 判断value的类型
                            // SQL.push(filter["field"] + kendo.format(OPERATORS[filter["operator"]], filter["value"]))
                            SQL.push(filter["field"] + kendo.format(OPERATORS[filter["operator"]],
                                filter["value"]));
                        }
                    });

                    return "(" + SQL.join(logic) + ")";
                };

                _simpleFilter(filters);

                whereSQL = _complexFilter(filters);
                if (whereSQL !== "()") {
                    postEiInfo.set("inqu_status-0-sql", whereSQL);
                }
                return postEiInfo;
            },

            sortAdapter: function (sort) {
                // sort =  [
                //     {field: 'x', dir: 'desc'},
                //     {field: 'x', dir: 'asc'}
                // ]
                var orderBy = [];
                if ($.isArray(sort)) {
                    $.each(sort, function (index, item) {
                        // TODO: join的列 tableName处理
                        orderBy.push(item["field"] + " " + item["dir"]);
                    })
                }
                return orderBy.join(",");
            },

            parseBtnClass: function (btnUri) {

                // 处理EDFA01中注册的按钮的样式
                btnUri = btnUri || "";
                var resources = btnUri.trim().split(",");  // 目前只支持 css: 和 btnClass:

                var iconClass = (_.find(resources, function (item) {
                    return item.split(":")[0].trim().toLowerCase() === "css";
                }) || "").split(":");
                var btnClass = (_.find(resources, function (item) {
                    return item.split(":")[0].trim().toLowerCase() === "btnclass";
                }) || "").split(":");

                var iconCss = "", btnCss = "";

                if (iconClass.length > 1) {
                    iconCss = iconClass[1];
                } else {
                    iconCss = iconClass[0];
                }

                // btnClass:
                // btn-background-red btn-font-black
                if (btnClass.length > 1) {
                    btnCss = btnClass[1];
                } else {
                    btnCss = btnClass[0];
                }

                // css:
                // fa fa-lock
                // k-icon k-lock
                // i-icon i-lock
                if (iconCss.match(/fa-/)) {
                    iconCss = "i-btn-gap " + iconCss;
                    if (!iconCss.match(/^fa /)) { // 补全font awesome的class
                        iconCss = "fa " + iconCss;
                    }
                } else if (iconCss.match(/k-/)) {
                    if (!iconCss.match(/^k-icon /)) { // 补全kendo icon 的class
                        iconCss = "k-icon " + iconCss;
                    }
                } else if (iconCss.match(/i-/)) {
                    if (!iconCss.match(/^i-icon /)) { // 补全iplat icon 的class
                        iconCss = "i-icon " + iconCss;
                    }
                }
                return {css: iconCss, btnClass: btnCss};
            },

            /**
             * 判断窗口是不是在iframe中
             * @return {boolean}
             */
            inIframe: function () {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return true;
                }
            },

            /**
             * 处理iframe中平台页面的header
             * 1. JSP页面直接使用iframe不做任何处理（不推荐） <div> <iframe /> </div>
             * 2. 使用EFWindow标签，iframe中的页面中英文名，将作为EFWindow的标题
             * 3. EFTab中直接隐藏Header，可以在Tab的标签页上指明Tab的标题
             *
             * @param {Window} frameWindow iframe中的window对象
             * @param {String} formCname iframe中的页面中文名
             * @param {String} formEname iframe中的页面英文名
             */
            handleFrameTitle: function (frameWindow, formCname, formEname) {
                var frameElement = frameWindow.frameElement;

                var $head = $("#ef_form_head");

                // 默认清除iframe的, iframe存在data-keep配置为true时，不删除header
                var keepHeader = $(frameElement).data("keep");

                if (keepHeader !== true) {
                    $head.remove();
                }

                // var $parent = $(frameElement).parent(); // iframe父window中的div元素

                // // iframe在EFWindow或者EFTab中 隐藏标题
                // if ($parent.data("role") === "window") {
                //     $head.remove();
                //
                //     // 此时父窗口的kendoWindow对象还没有实例化完成
                //     $parent.prev().find("span.k-window-title").html(formCname + "-" + formEname);
                //     // $parent.data("kendoWindow").title(formCname + "-" + formEname);
                //
                // } else if ($parent.attr("role") === "tabpanel") {
                //     $head.remove();
                // }

                // JSP页面直接使用iframe不做任何处理
            },

            /**
             * 处理bool类型的个性化配置项，全局的优先级最低（参数越靠后，优先级越低）
             * @return {boolean}
             */
            boolConfigHelper: function () {
                var length = arguments.length,
                    result = false; // 开关默认都是关闭的

                for (var i = 0; i < length; i++) {
                    if (_.isBoolean(arguments[i])) {
                        result = arguments[i];
                        break;
                    }
                }

                return result;
            },

            /**
             * 格式化平台服务端传来的异常信息，放在NotificationUtil展示
             * @param errorMessage 异常信息字符串
             * @return {{msgKey: string, msg: string, detailMsg: string}}
             */
            formatErrorMessage: function (errorMessage) {
                var msgObj = {
                    msgKey: "",
                    msg: "",
                    detailMsg: ""
                };

                var errors = errorMessage.split("$$$");

                if (errors.length > 1) { // 存在EiInfo的detailMsg
                    msgObj.detailMsg = errors[1];
                }

                // 判断格式是不是 key:msg
                var messages = errors[0].split(":");

                msgObj.msg = messages[0]; // 没有msgKey的场景

                if (messages.length > 1 && /^[a-z][a-z0-9_\\.-]+[a-z0-9]$/i.test(messages[0])) {
                    // msgKey是英文数字_-.的组合
                    msgObj.msgKey = messages[0];
                    msgObj.msg = messages[1];
                }

                return msgObj;
            },

            /**
             * EF Tag中需要作用到HTML元素上的动态属性处理
             * @param options Tag JS 配置混合出的options
             */
            pickDOMAttributes: function (options) {
                // 作用于 html 元素上的动态属性建议以 data- 开始，校验，样式等常用的固定场景除外
                // 作用于 js options的动态属性符合kendo的命名即可

                var DOM_ATTRIBUTES = {
                    VALIDATE: ["required", "minLength", "maxLength", "validateGroupName", "data-*"],
                    HTML: ["class", "style", "placeholder"]
                };

                var keys = DOM_ATTRIBUTES.VALIDATE.concat(DOM_ATTRIBUTES.HTML);

                // http://underscorejs.org/#pick
                return _.pick(options, function (value, key) {
                    return key.match(/^data-.+/) || _.indexOf(keys, key) >= 0;
                });
            },

            /**
             * kendo.toString(date， “yyyy-MM-dd”) 简单的日期格式化
             * @param date
             * @param delimiter
             * @return {*}
             */
            simpleDate: function (date, delimiter) {
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                var day = date.getDate();

                delimiter = delimiter || "-";

                if (month < 10) {
                    month = '0' + month;
                } else {
                    month = '' + month;
                }

                if (day < 10) {
                    day = '0' + day;
                } else {
                    day = '' + day;
                }

                return year + delimiter + month + delimiter + day;
            }
        },

        ColorBox: {
            GRID_BOTTOM_BORDER: "#99D2FF",
            GRID_BOTTOM_BORDER_HOVER: "#FFE06A",
            INVALID_COLOR: "#FF6160"
        },

        // 基于EiInfo数据载体的前端组件公共方法
        EFCommon: {
            PARENT_ID: "pid",
            VALUE_FIELD: "valueField",
            TEXT_FIELD: "textField",

            // EFTree EFTreeList的根结点配置
            VIRTUAL_ROOT: "root",

            NS: ".IPLAT",
            ON_SUCCESS: "onSuccess",
            ON_FAIL: "onFail",

            /**
             * EFColumn列，自定义列的配置覆盖处理
             * @param {Array} preColumns preColumns是优先级高的数组，会覆盖baseColumns中的同名（field）元素，
             * preColumns中其他的（不存在于baseColumns中的）元素，默认追加到baseColumns末尾，
             * 如果类配置了属性position为front，则将该列放到baseColumns之前。
             *
             * @param {Array} baseColumns 将被覆盖的列
             * @return {Array} 被覆盖的列baseColumns
             * @private
             */
            _extendColumns: function (preColumns, baseColumns) {
                if (isArray(preColumns) && preColumns.length > 0) {
                    each(baseColumns, function (i, baseColumn) {
                        each(preColumns, function (j, preColumn) {
                            if (baseColumn.field === preColumn.field) {
                                extend(true, baseColumns[i], preColumn); // 列名相同时，原生配置覆盖后台配置
                                preColumns[j] = {}; // 标记清除原生配置
                            }
                        });
                    });

                    // 处理原生配置中不存在于EiBlock中的列，默认在列的最后。例如，自定义的按钮列。
                    var frontColumns = [];
                    each(preColumns, function (i, column) {
                        if (column.field) {
                            // TreeList不允许操作栏放在前方
                            if (column.position === "front") {
                                frontColumns.push(column);
                            } else {
                                baseColumns.push(column);
                            }
                        }
                    });
                    baseColumns = frontColumns.concat(baseColumns);
                    return baseColumns;
                }
                return baseColumns;
            }


        },


        // 平台自定义组件的enable readonly方法（应该将组件封装成Widget）
        EFPopupInput: {
            /**
             * 控制EFPopupInput的可用状态，禁用时，点击图标不会弹窗
             *
             * @param {String | jQuery} element   EFPopupInput的id，DOM结点jQuery对象
             * @param {Boolean} state             EFPopupInput的可用状态
             */
            enable: function (element, state) {
                var $element = $(element),
                    $wrapper;

                if ($element.data("hidden")) {
                    // 真实值输入框隐藏
                    var textFieldId = $element.attr("id") + "_textField";
                    $element = $("#" + textFieldId);
                }

                $wrapper = $element.parent();

                var clearIcon = $wrapper.find("span[data-action='clear']");

                if (state === false) {
                    $wrapper.addClass("i-state-disabled");
                    if (clearIcon.length > 0) {
                        clearIcon.css("display", "none");
                    }
                    $element.prop("disabled", true);
                    // 关闭点击图标的事件

                } else {
                    $wrapper.removeClass("i-state-disabled");
                    if (clearIcon.length > 0) {
                        clearIcon.css("display", "");
                    }
                    $element.prop("disabled", false);
                    // 开启点击图标的事件
                }
            },

            /**
             * 控制EFPopupInput的只读状态
             *
             * @param {String | jQuery} element   EFPopupInput的id，DOM结点jQuery对象
             * @param {Boolean} state             EFPopupInput的只读状态
             */
            readonly: function (element, state) {
                var $element = $(element),
                    $wrapper;

                if ($element.data("hidden")) {
                    // 真实值输入框隐藏
                    var textFieldId = $element.attr("id") + "_textField";
                    $element = $("#" + textFieldId);
                }

                $wrapper = $element.parent();

                if (state === false) {
                    $wrapper.removeClass("i-state-readonly");
                    $element.removeAttr("readonly");
                } else {
                    $wrapper.addClass("i-state-readonly");
                    $element.attr("readonly", "readonly");
                }
            },

            /**
             * 设置/获取 EFPopupInput的真实值
             *
             * @param {String | jQuery} element   EFPopupInput的id，DOM结点jQuery对象
             */
            value: function (element) {
                var $element = $(element);
                if (arguments.length === 2) {
                    $element.val(arguments[1]);
                } else {
                    return $element.val();
                }
            },

            /**
             * 设置/获取 EFPopupInput的显示值
             *
             * @param {String | jQuery} element   EFPopupInput的id，DOM结点jQuery对象
             */
            text: function (element) {
                var id = $(element).attr("id") + "_textField";

                var $textField = $("#" + id);
                if (arguments.length === 2) {
                    $textField.val(arguments[1]);
                } else {
                    return $textField.val();
                }
            },

            /**
             * 同时设置EFPopupInput的真实值和显示值
             *
             * @param {String | jQuery} element   EFPopupInput的id，DOM结点jQuery对象
             * @param {String} value    真实值
             * @param {String} text     显示值
             */
            setAllFields: function (element, value, text) {
                IPLAT.EFPopupInput.value(element, value);
                IPLAT.EFPopupInput.text(element, text);
            },

            /**
             * 清空EFPopupInput内容
             *
             * @param {String | jQuery} element       EFPopupInput的id，DOM结点jQuery对象
             * @param {Boolean}         clearAll      是否清空其他指定回填的输入框
             */
            clear: function (element, clearAll) {
                var $element = $(element),
                    $wrapper;

                if ($element.data("hidden")) {
                    // 真实值输入框隐藏
                    var textFieldId = $element.attr("id") + "_textField";
                    $element = $("#" + textFieldId);
                }

                $wrapper = $element.parent();

                if (clearAll === true) {
                    var clearIcon = $wrapper.find(".k-i-close"),
                        forIds = clearIcon.data("for");
                    if (IPLAT.isString(forIds)) {
                        var forIdList = forIds.split(",");
                        _.each(forIdList, function (id) {
                            $("#" + $.trim(id)).val("");
                        });
                    }
                } else {
                    $element.val("");
                    if ($(element).length > 0) {
                        $(element).val("")
                    }
                }
            }
        },

        EFTreeInput: {
            /**
             * 控制EFTreeInput的可用状态，禁用时，点击图标不会弹窗
             *
             * @param {String | jQuery} element   EFTreeInput的id，DOM结点jQuery对象
             * @param {Boolean} state             EFTreeInput的可用状态
             */
            enable: function (element, state) {
                IPLAT.EFPopupInput.enable(element, state);
            },

            /**
             * 控制EFTreeInput的只读状态
             *
             * @param {String | jQuery} element   EFTreeInput的id，DOM结点jQuery对象
             * @param {Boolean} state             EFTreeInput的只读状态
             */
            readonly: function (element, state) {
                IPLAT.EFPopupInput.readonly(element, state);
            },

            /**
             * 设置/获取 EFTreeInput的真实值
             *
             * @param {String | jQuery} element   EFTreeInput的id，DOM结点jQuery对象
             */
            value: function (element) {
                IPLAT.EFPopupInput['value'].call(this, arguments);
            },

            /**
             * 设置/获取 EFTreeInput的显示值
             *
             * @param {String | jQuery} element   EFTreeInput的id，DOM结点jQuery对象
             */
            text: function (element) {
                IPLAT.EFPopupInput['text'].call(this, arguments);
            },

            /**
             * 同时设置EFTreeInput的真实值和显示值
             *
             * @param {String | jQuery} element   EFTreeInput的id，DOM结点jQuery对象
             * @param {String} value    真实值
             * @param {String} text     显示值
             */
            setAllFields: function (element, value, text) {
                IPLAT.EFPopupInput.value(element, value);
                IPLAT.EFPopupInput.text(element, text);
            },

            /**
             * 清空EFTreeInput内容
             *
             * @param {String | jQuery} element       EFTreeInput的id，DOM结点jQuery对象
             * @param {Boolean}         clearAll      是否清空其他指定回填的输入框
             */
            clear: function (element, clearAll) {
                IPLAT.EFPopupInput.clear(element, clearAll);
            }
        },

        // 用于存储Tag标签中配置的子标签信息，IPLATUI下存储JS的配置信息，注意区分
        EFGrid: {
            CREATE_ACTION: "create",
            READ_ACTION: "read",
            UPDATE_ACTION: "update",
            DELETE_ACTION: "destroy", // 点击删除按钮时，记录删除操作

            _readonlyAddEdit: function (blockId, e, context) {
                var that = context;
                // 通过editable属性获取field
                var editField = that.editable.options.fields;
                var field = editField.field;
                var selectedColumn;

                // 判断column中readonly属性
                if (e && e.model && !e.model.isNew()) { // readonly 仅新增时可编辑
                    selectedColumn = _.find(e.sender.columns, function (column) {
                        return column.field === field;
                    });
                }

                if (selectedColumn && selectedColumn.readonly === true) {
                    $(e.container).find('input[name=' + field + ']').attr("readonly", true);
                    that.closeCell();
                }
            },

            // EFGrid上有按钮
            _hasToolbarButtons: function (toolbarConfig) {
                return toolbarConfig.buttons.length > 0;
            },

            // EFGrid上有Setting下拉菜单
            _hasToolbarSettings: function (toolbarConfig) {
                return toolbarConfig["settingActions"].length > 0;
            },

            // EFGrid上有翻页条
            _hasToolbarPager: function (options) {
                return options.pageable && options.pagerPosition === "top";
            },

            /**
             * 判断Grid是否需要渲染toolbar
             *
             * @param options
             * @private
             */
            _hasToolBar: function (options) {
                var toolbarConfig = options.toolbarConfig,
                    kendoToolBarItems = toolbarConfig.kendoToolBarItems;

                var hasToolbarButtons = this._hasToolbarButtons(toolbarConfig),
                    hasToolbarSettings = this._hasToolbarSettings(toolbarConfig),
                    hasToolbarPager = this._hasToolbarPager(options);

                var hasToolBar = hasToolbarButtons || hasToolbarSettings || hasToolbarPager;

                if (toolbarConfig.hidden === true) {
                    hasToolBar = false;

                    // 隐藏所有的buttons 但是保留settings中的内容 （导出数据），这种情况推荐把翻页条放在grid的上方
                    if (hasToolbarSettings || hasToolbarPager) {
                        hasToolBar = true;

                        if (hasToolbarSettings) {
                            var length = kendoToolBarItems.length;

                            toolbarConfig.kendoToolBarItems = kendoToolBarItems.slice(length - 1);
                        } else {
                            toolbarConfig.kendoToolBarItems = [];
                        }
                    }

                } else if (toolbarConfig.hidden === "all") {
                    // 优先级最高 可以控制buttons settings和pager
                    hasToolBar = false;
                }

                return hasToolBar;
            }
        },

        EFTree: {},

        EFTreeList: {},

        EFInput: {
            /**
             * 设置/获取 EFInput的值
             *
             * @param {String | jQuery} element   EFInput的DOM结点 jQuery对象
             */
            value: function (element) {
                var $element = $(element),
                    elementType = $element.attr("type"),
                    value = "";

                if (arguments.length === 2) {
                    if (elementType === "text" || elementType === "password" || $element[0].tagName === "TEXTAREA") {
                        $element.val(arguments[1]);
                        $element.blur();
                    } else if (elementType === "hidden") {
                        $element.closest("input").val(arguments[1]).blur()
                    } else if (elementType === "radio") {
                        var args = arguments[1];
                        each($element, function (i, ele) {
                            if ($(ele).val() === args) {
                                $(ele).prop("checked", "checked");
                                return false;
                            }
                        });
                    } else if (elementType === "checkbox") {
                        var checkedValue = arguments[1].split(",");
                        $element.prop("checked", false);
                        each($element, function (i, ele) {
                            each(checkedValue, function (n, val) {
                                if ($(ele).val() === val) {
                                    $(ele).prop("checked", "checked");
                                }
                            });
                        });
                    }
                } else {
                    if (elementType === "text" || elementType === "password" || $element[0].tagName === "TEXTAREA" ||
                        elementType === "hidden") {
                        return $element.val();
                    } else if (elementType === "radio") {
                        each($element, function (i, ele) {
                            if ($(ele).prop("checked")) {
                                value = $(ele).val();
                                return false;
                            }
                        });
                        return value;
                    } else if (elementType === "checkbox") {
                        each($element, function (i, ele) {
                            if ($(ele).prop("checked")) {
                                if (value === "") {
                                    value = ele.value;
                                } else {
                                    value = value + "," + ele.value;
                                }
                            }
                        });
                        return value;
                    }
                }
            },

            /**
             * 控制EFInput的可用状态，禁用时，点击图标不会弹窗
             *
             * @param {String | jQuery} element   EFInput的DOM结点 jQuery对象
             * @param {Boolean} state             EFInput的可用状态
             */
            enable: function (element, state) {
                var $element = $(element),
                    inputType,
                    $wrapper;

                if ($element.attr("type") === "hidden") {
                    // 真实值输入框隐藏
                    var textFieldId = $element.attr("id") + "_textField";
                    $element = $("#" + textFieldId);
                }

                inputType = $element.attr("type");
                $wrapper = $element.parent();

                if (state === false) {
                    if (inputType === "text" || $element[0].tagName === "TEXTAREA") {
                        $element.prop("disabled", true);
                    } else if (inputType === "radio") {
                        $wrapper.addClass("i-radio-disabled");
                        $element.prop("disabled", true);
                    } else if (inputType === "checkbox") {
                        $wrapper.addClass("i-checkbox-disabled");
                        $element.prop("disabled", true);
                    }
                } else {
                    if (inputType === "text" || $element[0].tagName === "TEXTAREA") {
                        $element.prop("disabled", false);
                    } else if (inputType === "radio") {
                        $wrapper.removeClass("i-radio-disabled");
                        $element.prop("disabled", false);
                    } else if (inputType === "checkbox") {
                        $wrapper.removeClass("i-checkbox-disabled");
                        $element.prop("disabled", false);
                    }
                }

            },

            /**
             * 控制EFInput的只读状态
             *
             * @param {String | jQuery} element   EFInput的DOM结点 jQuery对象
             * @param {Boolean} state             EFInput的只读状态
             */
            readonly: function (element, state) {
                var $element = $(element),
                    inputType,
                    $wrapper;

                if ($element.attr("type") === "hidden") {
                    // 真实值输入框隐藏
                    var textFieldId = $element.attr("id") + "_textField";
                    $element = $("#" + textFieldId);
                }

                inputType = $element.attr("type");
                $wrapper = $element.parent();

                if (state === true) {
                    if (inputType === "text" || inputType === "textarea") {
                        $element.prop("readonly", true);
                    } else if (inputType === "radio") {
                        $wrapper.addClass("i-radio-readonly");
                        $element.prop("readonly", true);
                    } else if (inputType === "checkbox") {
                        $wrapper.addClass("i-checkbox-readonly");
                        $element.prop("readonly", true);
                    }
                } else {
                    if (inputType === "text" || inputType === "textarea") {
                        $element.prop("readonly", false);
                    } else if (inputType === "radio") {
                        $wrapper.removeClass("i-radio-readonly");
                        $element.prop("readonly", false);
                    } else if (inputType === "checkbox") {
                        $wrapper.removeClass("i-checkbox-readonly");
                        $element.prop("readonly", false);
                    }
                }

            }
        },

        EFSelect: {
            /**
             * 设置/获取 EFSelect的真实值
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             * @param {String} value 设置的真实值（需要是下拉选项中 某个item的真实值）
             * @param {Boolean} 是否触发change事件
             *
             * @return {String} value 设置的真实值
             */
            value: function (element) {
                var $element = $(element),
                    trigger = arguments[2],
                    dropdownlist = $element.data("kendoDropDownList");

                if (arguments.length > 1) {
                    dropdownlist.value(arguments[1]);
                    if (!IPLAT.isUndefined(trigger) || trigger === true) {
                        dropdownlist.trigger("change");
                    }
                } else {
                    return dropdownlist.value();
                }
            },

            /**
             * 设置/获取 EFSelect的显示值
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             */
            text: function (element) {
                var $element = $(element),
                    dropdownlist = $element.data("kendoDropDownList");

                if (arguments.length === 2) {
                    dropdownlist.text(arguments[1]);
                } else {
                    return dropdownlist.text();
                }
            },

            /**
             * 返回指定索引的数据项。如果未指定索引，则将使用所选项的索引。
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             * @param {Number}          index     指定索引项
             */
            dataItem: function (element, index) {
                var $element = $(element),
                    dropdownlist = $element.data("kendoDropDownList");

                if (IPLAT.isUndefined(index)) {
                    return dropdownlist.dataItem();
                } else {
                    return dropdownlist.dataItem(index);
                }
            },

            /**
             * 控制EFSelect的只读状态
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             * @param {Boolean}         state     EFSelect的只读状态
             */
            readonly: function (element, state) {
                var $element = $(element),
                    $wripper,
                    dropdownlist = $element.data("kendoDropDownList");

                $wripper = $element.prev("span.k-dropdown-wrap");

                if (state === false) {
                    dropdownlist.readonly(false);
                    $wripper.removeClass("i-state-readonly");
                    $element.removeAttr("readonly");
                } else {
                    dropdownlist.readonly();
                    $element.prev("span.k-dropdown-wrap").removeClass("k-state-default").addClass("i-state-readonly");
                }
            },

            /**
             * 控制EFSelect的可用状态，禁用时，点击图标不会下拉
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             * @param {Boolean} state             EFSelect的可用状态
             */
            enable: function (element, state) {
                var $element = $(element),
                    $wripper,
                    dropdownlist = $element.data("kendoDropDownList");

                $wripper = $element.prev("span.k-dropdown-wrap");

                if (state === false) {
                    dropdownlist.enable(false);
                } else {
                    dropdownlist.enable(true);
                }
                $wripper.removeClass("i-state-readonly");
            },
            /**
             * 设置现有EFSelect的dataSource,并重新绑定它。
             *
             * @param {String | jQuery} element   EFSelect的DOM结点 jQuery对象
             * @param {Object} dataSource        设置新的数据源
             */
            setDataSource: function (element, dataSource) {
                var $element = $(element),
                    dropdownlist = $element.data("kendoDropDownList");

                dropdownlist.setDataSource(dataSource);
            }
        },

        EFMultiSelect: {
            /**
             *控制EFMultiSelect的只读状态
             *
             * @param {String | jQuery} element   EFMultiSelect的DOM结点 jQuery对象
             * @param {Boolean}         state     EFMultiSelect的只读状态
             */
            readonly: function (element, state){
                var  $element = $(element),
                     $wripper,
                     dropdownlist = $element.data("kendoMultiSelect");

                $wripper = $element.prev("div.k-multiselect-wrap");

                if (state === false){
                    dropdownlist.readonly(false);
                    $wripper.removeClass("i-state-readonly");
                    $element.removeAttr("readonly");
                }else{
                    dropdownlist.readonly();
                    $element.prev("div.k-multiselect-wrap").removeClass("k-state-default").addClass("i-state-readonly");
                }

                // 以免和enable的方法交叉使用时出现样式错误
                $wripper.removeClass("i-state-disabled");
            },

            /**
             * 控制EFMultiSelect的可用状态，禁用时，点击图标不会下拉
             *
             * @param {String | jQuery} element   EFMultiSelect的DOM结点 jQuery对象
             * @param {Boolean} state             EFMultiSelect的可用状态
             */
            enable: function(element, state){
                var $element = $(element),
                    $wripper,
                    dropdownlist = $element.data("kendoMultiSelect");

                $wripper = $element.prev("div.k-multiselect-wrap");

                if (state === false) {
                    dropdownlist.enable(false);
                    $wripper.addClass("i-state-disabled");
                } else {
                    dropdownlist.enable(true);
                    $wripper.removeClass("i-state-disabled");
                }

                // 以免和readonly的方法交叉使用时出现样式错误
                $wripper.removeClass("i-state-readonly");
            }
        },

        // Tag中使用的属性，理论上对开发者不可见
        EFComboColumn: [],

        EFOptions: [] // 存储EFOption, EFOptions, EFCodeOption, EFTableOption的所有选项

    });

    // export 到全局作用域 window对象
    extend(window, {
        IPLAT: IPLAT,

        // 基础的工具类
        formatNative: formatNative,
        isAvailable: isAvailable,
        isBatchAvailable: isBatchAvailable
    });


    // KendoUI组件的配置
    kendo.ui.List.fn.options.noDataTemplate = "没有数据";
    kendo.ui.AutoComplete.fn.options.noDataTemplate = "没有数据";


    if (typeof JSON === 'undefined') {
        window.JSON = {
            stringify: kendo.stringify
        };
    }

    // 浏览器版本检测，并在console中的显示欢迎信息
    var browser = (function () {
        var ua = navigator.userAgent, tem,
            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

        if (/trident/i.test(M[1])) { // IE 11
            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];

            return ["IE", (tem[1] || '')];
            // return 'IE ' + (tem[1] || '');
        }

        if (M[1] === 'Chrome') { // Opera MS Edge
            tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
            if (tem != null) {
                var tempInfo = tem.slice(1).join(' ').replace('OPR', 'Opera');
                M = tempInfo.split(' ');
            }
        }

        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
        if ((tem = ua.match(/version\/(\d+)/i)) != null) {
            M.splice(1, 1, tem[1]);
        }

        return M;
        // return M.join(' ');
    })();

    IPLAT.Browser.name = browser[0]; // 浏览器的名称 IE Chrome Safari, MS Edge不属于IE
    IPLAT.Browser.version = browser[1];
    IPLAT.Browser.isIE = (/^(MS)?( )?IE/).test(browser[0]);
    IPLAT.Browser.isIE8 = IPLAT.Browser.isIE && (browser[1] * 1 === 8);

    // 浏览器Console中显示IPLATUI版本和发布信息
    if (!IPLAT.Browser.isIE) {
        var intervalId;
        // 检测浏览的console是否打开
        // https://github.com/sindresorhus/devtools-detect
        (function () {
            var devtools = {
                open: false,
                orientation: null
            };
            var threshold = 160;
            var emitEvent = function (state, orientation) {
                window.dispatchEvent(new CustomEvent('devtoolschange', {
                    detail: {
                        open: state,
                        orientation: orientation
                    }
                }));
            };

            intervalId = setInterval(function () {
                var widthThreshold = window.outerWidth - window.innerWidth > threshold;
                var heightThreshold = window.outerHeight - window.innerHeight > threshold;
                var orientation = widthThreshold ? 'vertical' : 'horizontal';

                if (!(heightThreshold && widthThreshold) &&
                    ((window.Firebug && window.Firebug.chrome && window.Firebug.chrome.isInitialized) || widthThreshold || heightThreshold)) {
                    if (!devtools.open || devtools.orientation !== orientation) {
                        emitEvent(true, orientation);
                    }

                    devtools.open = true;
                    devtools.orientation = orientation;
                } else {
                    if (devtools.open) {
                        emitEvent(false, null);
                    }

                    devtools.open = false;
                    devtools.orientation = null;
                }
            }, 500);

            if (typeof module !== 'undefined' && module.exports) {
                module.exports = devtools;
            } else {
                window.devtools = devtools;
            }
        })();

        IPLAT.__debug__ = false;
        window.addEventListener("devtoolschange", function (e) {
            if (e.detail.open && !IPLAT.__debug__ && !IPLAT.Util.inIframe()) {
                // console.clear();
                IPLAT.__debug__ = true; // 只log一次欢迎信息
                // ASCII LOGO 来自http://www.network-science.de/ascii/ 字体样式是starwars
                console.log(
                    " __  .______    __           ___   .___________. __    __   __\n" +
                    "|  | |   _  \\  |  |         /   \\  |           ||  |  |  | |  |\n" +
                    "|  | |  |_)  | |  |        /  ^  \\ `---|  |----`|  |  |  | |  |\n" +
                    "|  | |   ___/  |  |       /  /_\\  \\    |  |     |  |  |  | |  |\n" +
                    "|  | |  |      |  `----. /  _____  \\   |  |     |  `--'  | |  |\n" +
                    "|__| | _|      |_______|/__/     \\__\\  |__|      \\______/  |__|\n" +
                    "欢迎使用iPlat4J V6! 当前版本为: %c" + IPLAT.releaseVersion,
                    "color:red", " 发布时间为: " + IPLAT.releaseTime);

                clearInterval(intervalId); // 清除计时器
            }
        });
    }

    window.IPLAT = IPLAT;
    window.IPLATUI = IPLATUI;

})(window.jQuery, window._);
/**
 * IPLAT的核心数据结构 EiInfo，数据请求工具 EiCommunicator
 *
 * 只依赖iplat.ui.init.js
 * (ui.init-->ui.eiinfo-->ui.core-->ui.component--> ui.util)
 */
(function ($) {
    var extend = $.extend,

        IPLAT = window.IPLAT,
        IPLATUI = window.IPLATUI,
        getContextPath = IPLAT.getContextPath, // EiCommunicator 使用 contextPath/service
        isAvailable = IPLAT.isAvailable,
        isString = IPLAT.isString,
        isBlankString = IPLAT.isBlankString;

    /**
     * @class AbstractEi
     * @description AbstractEi是EiInfo的基类，EiInfo，EiBlock，EiColumn，EiBlockMeta都继承于此类
     * @constructor
     */
    function AbstractEi() {
        this.extAttr = {};
    }

    /**
     * 根据属性名得到属性值
     * @param {String} prop 属性名
     * @return {Object} 属性名对应的值
     */
    AbstractEi.prototype.get = function (prop) {
        return this.extAttr[prop];
    };

    /**
     * 设置属性值
     * @param {Object} prop 属性名
     * @param {Object} value 属性名对应的值
     */
    AbstractEi.prototype.set = function (prop, value) {
        this.extAttr[prop] = value;
    };

    /**
     * 取得属性JSON对象
     * @return {Object} 属性对象
     */
    AbstractEi.prototype.getAttr = function () {
        return this.extAttr;
    };

    /**
     * 设置属性JSON对象
     * @param {Object} attr 要设置的属性对象
     */

    AbstractEi.prototype.setAttr = function (attr) {
        this.extAttr = attr;
    };


    /**
     * @class EiColumn
     * @description EiColumn构造函数，用于描述列的元数据信息
     * @extends AbstractEi
     * @constructor
     * @param {String} name EiColumn 名称
     */
    function EiColumn(name) {

        for (var key in EiColumn.defaults) {
            this[key] = EiColumn.defaults[key];
        }

        this.name = name;

        AbstractEi.call(this); // 可以把父类的私有属性继承到子类
    }

    EiColumn.prototype = new AbstractEi;
    EiColumn.prototype.constructor = EiColumn;
    EiColumn.prototype.__ClassName__ = "EiColumn";

    EiColumn.defaults = {
        pos: -1,
        name: "",
        descName: "",
        type: "C",
        regex: null,
        formatter: null,
        editor: "text",
        minLength: 0,
        maxLength: Math.pow(2, 31) - 1,
        primaryKey: false,
        nullable: true,
        visible: true,
        readonly: false,
        displayType: "text",
        errorPrompt: null,
        dateFormat: null,
        defaultValue: "",
        validateType: null,
        width: 96,
        height: 18,
        align: "left",
        blockName: null,
        sourceName: null,
        labelProperty: null,
        valueProperty: null
    };

    /**
     * EiColumn对象转成JSON对象
     * @returns {Object} JSON对象
     */
    EiColumn.prototype.toJSON = function () {
        var column = {};
        var compress = arguments[0];

        if (compress) { // 网络传输时，字段默认值没有变化的，不序列化到JSON中,减少传输的内容
            for (var prop in this) {
                if (this.hasOwnProperty(prop) && this[prop] !== EiColumn.defaults[prop]) {
                    column[prop] = this[prop];
                }
            }
        } else { // 完整的EiColumn属性信息
            for (var key in this) {
                if (this.hasOwnProperty(key) && isAvailable(this[key])) {
                    column[key] = this[key];
                }
            }
        }
        delete column.extAttr;
        return column;
    };

    /**
     * 解析JSON对象中的EiColumn信息 JSON ==> EiColumn
     * @param {Object} columnJson
     */
    EiColumn.parseColumn = function (columnJson) {
        var column = new EiColumn(columnJson.name);

        for (var prop in columnJson) {
            var columnValue = columnJson[prop];
            if (columnValue && columnValue.replace) {
                // HTML字符转义 http://www.w3school.com.cn/html/html_entities.asp
                columnValue = columnValue.replace(/'/g, "&#39;");
            }
            column[prop] = columnValue;
        }

        // 使用iplatWidth= true来标记自定义width的column
        if (!!columnJson["width"]) {
            column['iplatWidth'] = true
        }
        return column;
    };


    /**
     * @class EiBlockMeta
     * @description EiBlockMeta构造函数，EiBlockMeta列头类；EiBlock的元数据定义（EiColumn）集合，可以理解为EiColumns
     * @extends AbstractEi
     * @constructor
     * @param {string} blockId blockId
     */
    function EiBlockMeta(blockId) {
        this.blockId = blockId;
        this.metas = {}; // {eiColumn.name: eiColumn}
        this.desc = "";
        this.extAttr = {};
        this.colCount = 0;
    }

    EiBlockMeta.prototype = new AbstractEi;
    EiBlockMeta.prototype.constructor = EiBlockMeta;
    EiBlockMeta.prototype.__ClassName__ = "EiBlockMeta";

    /**
     * 设置EiBlockMeta列头类的描述
     * @param {String} desc 列头描述信息
     */
    EiBlockMeta.prototype.setDesc = function (desc) {
        this.desc = desc;
    };

    /**
     * 取得列头描述信息
     * @return {String} 列头描述
     */
    EiBlockMeta.prototype.getDesc = function () {
        return this.desc;
    };

    /**
     * 添加列头信息 Meta信息就是EiColumn
     * @param {EiColumn} eiColumn 列信息
     * @throws Error异常
     */
    EiBlockMeta.prototype.addMeta = function (eiColumn) {
        if (IPLAT.isEiColumn(eiColumn)) {
            this.metas[eiColumn.name] = eiColumn;
            if (eiColumn.pos < 0)
                eiColumn.pos = this.colCount;
            this.colCount++;
        } else {
            throw new Error("请检查参数，必须添加EiColumn对象");
        }
    };

    /**
     * 根据列名，获取列信息EiColumn
     * @param {String} name 列名称
     * @return {EiColumn} 列信息
     * @exception 无异常抛出
     */
    EiBlockMeta.prototype.getMeta = function (name) {
        return this.metas[name];
    };

    /**
     * 根据列名，删除列信息
     * @param {String} name 列名称
     */
    EiBlockMeta.prototype.removeMeta = function (name) {
        delete this.metas[name];
    };

    /**
     * 获取所在的blockId
     * @return {String} 所在的blockId
     */
    EiBlockMeta.prototype.getBlockId = function () {
        return this.blockId;
    };

    /**
     * 取得列头所有的列信息
     * @return {Object} 列头所有的列信息
     */
    EiBlockMeta.prototype.getMetas = function () {
        return this.metas;
    };

    /**
     * EiBlockMeta对象转换成JSON对象
     * @returns {Object} JSON对象
     */
    EiBlockMeta.prototype.toJSON = function () {
        var blockMeta = {},
            compress = arguments[0];

        blockMeta[EiInfoJsonConstants.BLOCK_META_DESC] = this.getDesc();
        blockMeta[EiInfoJsonConstants.ATTRIBUTES] = this.getAttr();

        var columns = [];
        for (var columnName in this.metas) {
            columns.push(this.metas[columnName].toJSON(compress)); // EiColumn.prototype.toJSON
        }
        blockMeta[EiInfoJsonConstants.BLOCK_META_COLUMNLIST] = columns;

        return blockMeta;
    };

    /**
     * 解析JSON对象中的EiBlockMeta信息 JSON ==> EiBlockMeta
     * @param {String} blockId blockId
     * @param {Object} blockMetaJson EiBlockMeta的JSON对象
     */
    EiBlockMeta.parseBlockMeta = function (blockId, blockMetaJson) {
        var blockMeta = new EiBlockMeta(blockId);

        var value = blockMetaJson[EiInfoJsonConstants.BLOCK_META_DESC];
        if (isAvailable(value)) {
            blockMeta.setDesc(value);
        }

        value = blockMetaJson[EiInfoJsonConstants.ATTRIBUTES];
        if (isAvailable(value)) {
            blockMeta.setAttr(value);
        }

        value = blockMetaJson[EiInfoJsonConstants.BLOCK_META_COLUMNLIST];
        if (isAvailable(value)) { // value should be Array
            for (var i = 0; i < value.length; i++) {
                var eiColumn = EiColumn.parseColumn(value[i]);
                blockMeta.addMeta(eiColumn);
            }
        }
        return blockMeta;
    };

    /**
     * @class EiBlock
     * @description EiBlock 数据信息的主要载体
     * @constructor
     * @extends AbstractEi
     * @param {String|EiBlockMeta} blockId blockId字符串或者EiBlockMeta对象
     */
    function EiBlock(blockId) {
        if (typeof blockId === "string") {
            this.meta = new EiBlockMeta(blockId);
        } else if (IPLAT.isEiBlockMeta(blockId)) {
            this.meta = blockId;
        } else {
            throw new Error("请检查参数类型，无法创建EiBlock");
        }

        this.rows = []; // rows是二维数组 [[],[],[]]
        this.colCount = 0;
        this.extAttr = {};
    }

    EiBlock.prototype = new AbstractEi;
    EiBlock.prototype.constructor = EiBlock;
    EiBlock.prototype.__ClassName__ = "EiBlock";

    /**
     * 获取block的列头信息 EiBlockMeta
     * @return {EiBlockMeta} 返回block的列头信息
     */
    EiBlock.prototype.getBlockMeta = function () {
        return this.meta;
    };

    /**
     * 设置block的列头信息 EiBlockMeta
     * @param {EiBlockMeta} blockMeta block所在列的列头信息
     */
    EiBlock.prototype.setBlockMeta = function (blockMeta) {
        this.meta = blockMeta;
    };

    /**
     * 获取EiBlock的blockId
     * @return {String} EiBlock的blockId
     */
    EiBlock.prototype.getBlockId = function () {
        return this.getBlockMeta().getBlockId();
    };

    /**
     * 给block所在列添加行数据
     * @param {Array} row 行数据
     */
    EiBlock.prototype.addRow = function (row) {
        if (row == null) {
            this.rows.push([]);
        } else {
            this.rows.push(row);
        }
    };

    /**
     * 取得block所有行数据
     * @return {Array} 返回block的行数据
     */
    EiBlock.prototype.getRows = function () {
        return this.rows;
    };

    /**
     * 设置block所有行数据
     * @param {Array} rows 重置block的行数据的数组
     */
    EiBlock.prototype.setRows = function (rows) {
        this.rows = rows;
    };

    /**
     * 根据列名在EiBlock中获取列信息 EiColumn
     * @param {String} colName 列名
     * @returns {EiColumn|null}
     */
    EiBlock.prototype.getColumn = function (colName) {
        return this.getBlockMeta().getMeta(colName) || null;
    };

    /**
     * 根据列名，获取EiColumn的位置pos信息
     * @param colName 列名
     * @returns {Number} 没有对应的列，返回-1
     */
    EiBlock.prototype.getColumnPos = function (colName) {
        var column = this.getColumn(colName);
        return column != null ? column.pos : -1;
    };

    /**
     * 根据列名数组，移除EiBlock中列信息
     * @param colNames 列名数组
     */
    EiBlock.prototype.removeColumns = function (colNames) {
        var that = this,
            blockMeta = that.getBlockMeta(),
            rows = that.getRows(),
            removeColPos = [];

        _.each(colNames, function (colName) {  // meta数据删除
            if (isAvailable(that.getColumn(colName))) {
                var colPos = that.getColumnPos(colName);
                removeColPos.push(colPos);

                blockMeta.removeMeta(colName);
                blockMeta.colCount--;
            }
        });

        if (rows.length > 0) {  // rows数据删除
            _.each(removeColPos.sort(function (a, b) {
                return b - a;
            }), function (colPos) {
                _.each(rows, function (row) {
                    row.splice(colPos, 1);
                });
            })
        }
    };

    /**
     * 根据指定行号及列名,设定其数据值.
     * @param {Number} rowNo 行号
     * @param {String} colName 列名
     * @param {String} value 数据值
     */
    EiBlock.prototype.setCell = function (rowNo, colName, value) {
        var pos = this.getColumnPos(colName);
        if (pos >= 0) {
            while (typeof (this.rows[rowNo]) === "undefined") {
                // rows的行数小于rowNo，添加空行处理
                this.addRow(null);
            }
            this.rows[rowNo][pos] = value;
        }
    };

    /**
     * 根据指定行号、列名，取得数据值
     * @param {Number} rowNo 行号
     * @param {String} colName 列名
     * @return {String} value 数据值
     */
    EiBlock.prototype.getCell = function (rowNo, colName) {
        var rows = this.getRows(),
            pos = this.getColumnPos(colName);

        if (rows.length === 0 || pos < 0) {
            // 解决有对应col无rows数据时,get报错问题
            return "";
        } else {
            return isAvailable(rows[rowNo][pos]) ? rows[rowNo][pos] : "";
        }
    };

    /**
     * 根据行号、列号，取得数据值
     * @param {Number} rowNo 行号
     * @param {Number} colPos 列号
     * @return {String} value 数据值
     */
    EiBlock.prototype.getCellByPos = function (rowNo, colPos) {
        return this.rows[rowNo][colPos];
    };

    /**
     * JSON格式的一行数据，拉平成一行数组数据 {key: value} ==> [value]
     * @param {Object} rowJson  key，value形式的一行json数据
     * @param {Boolean} transport 传送到后台数据库的数据的默认值处理
     * @param {Boolean} isNew 数据是新增的
     * @return {Array} JSON对象拉平后的数组数据
     */
    EiBlock.prototype.getMappedArray = function (rowJson, transport, isNew) {
        var metas = this.getBlockMeta().getMetas(); // {eiColumn.name: eiColumn}
        var row = [];
        for (var colName in metas) {
            if (metas.hasOwnProperty(colName)) {
                var pos = this.getColumnPos(colName);
                if (pos >= 0) {
                    if (transport) {
                        if (metas[colName].type === "N") {
                            // 2017-09-17 JSON Lib 丢失精度的问题, N类型的数据到后台还是String JavaBean 处理
                            row[pos] = (rowJson[colName] || 0) + "";
                        } else {
                            row[pos] = rowJson[colName] || "";

                            // grid _mapModels 遵守数据库规范，新增数据时"" 默认转为 " "
                            if (isNew) {
                                row[pos] = row[pos] || " ";
                            }
                        }
                    } else {
                        row[pos] = rowJson[colName];
                    }
                }
            }
        }
        return row;
    };

    /**
     * 一行数组数据转换成为一行key，value的json格式的数据 [value] ==> {key: value}
     * @param {Array} row
     * @return {Object} 由数组数据还原后的JSON对象
     */
    EiBlock.prototype.getMappedObject = function (row) {
        var metas = this.getBlockMeta().getMetas();
        var rowJson = {};
        for (var colName in metas) {
            if (metas.hasOwnProperty(colName)) {
                var eiColumn = metas[colName];

                if (eiColumn.type === "N") {
                    rowJson[eiColumn.name] = row[eiColumn.pos] * 1; // 后台会把N类型的数据设为字符串
                } else {
                    rowJson[eiColumn.name] = row[eiColumn.pos];
                }
            }
        }
        return rowJson;
    };

    /**
     * 将block中所有的rows二维数组转换为json数组(Spring MVC)
     * [[],[],[]] ==> [{},{},{}]
     * @return {Array} 由EiBlock所有的行数据转换成的JSON对象数组
     */
    EiBlock.prototype.getMappedRows = function () {
        var rowsJson = [];
        for (var i = 0; i < this.rows.length; i++) {
            var row = this.rows[i];
            var rowJson = this.getMappedObject(row);
            rowsJson.push(rowJson);
        }
        return rowsJson;
    };

    /**
     * 复制当前的EiBlock对象
     */
    EiBlock.prototype.clone = function () {
        return EiBlock.parseBlock(this.getBlockId(), this.toJSON());
    };

    /**
     * 通过列英文名数组，或者[{field1: "", field2: ""},{},{}]形式的数组创建EiBlock
     * @param blockId 数据块的id
     * @param data 列名数组或者JSON形式的数据行
     * @return {EiBlock}
     */
    EiBlock.build = function (blockId, data) {
        var block = new EiBlock(blockId),
            rowData = false,
            columns = [];

        if ($.isArray(data)) {
            var blockMeta = new EiBlockMeta(blockId);
            if ($.isPlainObject(data[0])) {
                // 数据行
                for (var columnName in data[0]) {
                    columns.push(columnName);
                }
                rowData = true;
            } else {
                // 列英文名数组
                columns = data;
            }

            $.each(columns, function (i, columnName) {
                blockMeta.addMeta(new EiColumn(columnName));
            });

            block.setBlockMeta(blockMeta);

            if (rowData) { // JSON Data Array 数据行
                for (var i = 0; i < data.length; i++) {
                    block.addRow(block.getMappedArray(data[i]));
                }
            }

            return block;
        }

        return block;
    };

    /**
     * 通过列英文名数组，列中文名数组，创建EiBlock
     *
     * @param blockId 数据块的id
     * @param enames 列英文名数组
     * @param cnames 列中文名数组
     * @return {EiBlock}
     */
    EiBlock.buildByNames = function (blockId, enames, cnames) {
        var block = new EiBlock(blockId),
            hasCnames = $.isArray(cnames);

        if ($.isArray(enames)) {
            var blockMeta = new EiBlockMeta(blockId);

            $.each(enames, function (i, ename) {
                var eiColumn = new EiColumn(ename);

                if (hasCnames && isAvailable(cnames[i])) {
                    eiColumn.descName = cnames[i];
                }

                blockMeta.addMeta(eiColumn);
            });

            block.setBlockMeta(blockMeta);
        }

        return block;
    };

    /**
     * 通过[{field: "", title: ""}, ...] 数组，创建EiBlock
     *
     * @param blockId 数据块的id
     * @param columns kendoGrid的columns数组
     * @return {EiBlock}
     */
    EiBlock.buildByColumns = function (blockId, columns) {
        var block = new EiBlock(blockId);
        var blockMeta = new EiBlockMeta(blockId);
        var key;

        $.each(columns, function (i, column) {
            var eiColumn = new EiColumn(column["field"]);

            // 根据 EiColumn.defaults 来赋予 EiColumn 的属性值
            for (key in EiColumn.defaults) {
                if (key in column && column[key] != undefined) {
                    eiColumn[key] = column[key];
                }
            }

            eiColumn.descName = column["title"];
            blockMeta.addMeta(eiColumn);
        });

        block.setBlockMeta(blockMeta);
        return block;
    };

    /**
     * EiBlock对象转换为JSON Object
     */
    EiBlock.prototype.toJSON = function () {
        var block = {},
            compress = arguments[0];

        // var options = $.extend({}, IPLATUI.Config.EiInfo, arguments[0]);

        block[EiInfoJsonConstants.ATTRIBUTES] = this.getAttr();
        block[EiInfoJsonConstants.BLOCK_META] = this.getBlockMeta().toJSON(compress);
        block[EiInfoJsonConstants.BLOCK_DATA] = this.getRows(); // rows: [[], []]


        // 提交到后台时
        // if (options.transport) {
        //     block[EiInfoJsonConstants.BLOCK_DATA] = transportEiBlock(this.getRows());
        // }

        return block;
    };


    // var transportEiBlock = function (rows) {
    //     var i, j = 0;
    //
    //     for (i = 0; i < rows.length; i++) {
    //         var row = rows[i];
    //
    //         if ($.isArray(row)) {
    //             for (j = 0; j < row.length; j++) {
    //                 row[j] = row[j] || " ";
    //             }
    //         }
    //     }
    //     return rows;
    // };

    /**
     * 解析JSON对象中的EiBlock信息 JSON ==> EiBlock
     * @param {String} blockId
     * @param {Object} blockJson
     */
    EiBlock.parseBlock = function (blockId, blockJson) {
        var block;
        var value = blockJson[EiInfoJsonConstants.BLOCK_META];

        if (isAvailable(value)) {
            var blockMeta = EiBlockMeta.parseBlockMeta(blockId, value);
            block = new EiBlock(blockMeta);
        } else {
            block = new EiBlock(blockId);
        }

        value = blockJson[EiInfoJsonConstants.ATTRIBUTES];
        if (isAvailable(value)) {
            block.setAttr(value);
        }

        value = blockJson[EiInfoJsonConstants.BLOCK_DATA];
        if (isAvailable(value)) {
            block.rows = value;
        }
        return block;
    };

    // 私有的内部处理数据的方法
    var number2string = function (value) {
        return IPLAT.isNumber(value)? value + '': value;
    };

    var notEmpty = function (value) {
        // 把null 和 undefined 都转换为' '
        if (value == null) {
            return ' ';
        }

        // 把'' 转换为 ' '
        if (IPLAT.isString(value) && value.length === 0) {
            return ' ';
        }

        return value;
    };

    var filterChain = function (filters, value) {
        var temp = value;
        for (var i = 0, length = filters.length; i < length; i++) {
            temp = filters[i].call(null, temp);
        }

        return temp;
    };

    /**
     * 转换 block 中内容
     * @param eiBlock
     * @param options
     * @returns {*}
     */
    EiBlock.transportContentByFormat = function transportContentByFormat(eiBlock, options) {
        var filters = [], rows, row;
        var defaults = {Number2Str: true, NotEmpty: true};

        options = $.extend(options, defaults);


        if (!IPLAT.isEiBlock(eiBlock)) {
            return eiBlock;
        }

        if (options['Number2Str']) {
            filters.push(number2string);
        }

        if (options['NotEmpty']) {
            filters.push(notEmpty);
        }

        if (!filters.length) {
            return eiBlock;
        }

        rows = eiBlock.rows || eiBlock.getRows();
        for(var i = 0; i < rows.length; i++) {
            row = rows[i];
            _.each(row, function(item, i, context){
                context[i] = filterChain(filters, item);
            })
        }

        return eiBlock;
    };

    EiBlock.prototype.transportContentByFormat = function (options) {
        return transportContentByFormat(this, options);
    };

    /**
     * @class EiInfo
     * @description EiInfo 对象构造函数
     * @constructor
     * @extends AbstractEi
     */
    function EiInfo() {
        var name = arguments[0];

        this.name = "";
        this.descName = "";
        this.msg = "";
        this.msgKey = "";
        this.detailMsg = "";
        this.status = 0;
        this.blocks = {};
        this.extAttr = {};

        if (typeof name === "string") {
            this.name = name;
        }

        if (IPLATUI.Config.EiInfo.version) {
            // EiInfo版本信息的全局配置, 2.0 版本EiInfo 引入的新结构
            this.__version__ = IPLATUI.Config.EiInfo.version;
            this.traceId = "";

            // this.__context__ = { // TODO context提取成为类 提供API
            //     userId: "",
            //     uuid: "",
            //     spanId: "",
            //     traceId: ""
            // };
        }
    }

    EiInfo.prototype = new AbstractEi;
    EiInfo.prototype.constructor = EiInfo;
    EiInfo.prototype.__ClassName__ = "EiInfo";

    /**
     * 取得EiInfo的名称
     * @return {String} EiInfo名称
     */
    EiInfo.prototype.getName = function () {
        return this.name;
    };

    /**
     * 设置EiInfo的名称
     * @param {String} name EiInfo名称
     */
    EiInfo.prototype.setName = function (name) {
        this.name = name;
    };

    /**
     * 以三段式的方式从EiInfo中获取某字段的值，无法获取值是返回null
     * @param {String} str 三段式blockName-RowNum-ColName 如"result-0-siteArticleButton"
     */
    EiInfo.prototype.get = function (str) {
        if (!isString(str) || isBlankString(str)) {
            // 参数不是字符串，或者是空串时，直接返回null
            return null;
        }

        var strArray = str.split("-");
        var block;
        if (3 === strArray.length) { // 三段式，获取block的Cell值
            block = this.getBlock(strArray[0]); // blockName
            if (isAvailable(block)) {
                // rowNum colName，EiBlock.getCell没有对应值时， 返回 ""
                return block.getCell(parseInt(strArray[1]), strArray[2]);
            } else {
                return null;
            }
        } else if (2 === strArray.length) { // 两段式，获取block的属性区attr中的属性值
            block = this.getBlock(strArray[0]); // blockName
            if (isAvailable(block)) {
                // attrName 没有对应值时，返回undefined
                return block.get(strArray[1]);
            } else {
                return null;
            }
        }

        // 一段式，获取EiInfo的属性区的属性值 attrName，没有对应值时，返回undefined
        return this.extAttr[strArray[0]];
    };


    /**
     * 设置EiInfo消息信息
     * @param {String} msg 消息信息
     */
    EiInfo.prototype.setMsg = function (msg) {
        this.msg = msg;
    };

    /**
     * 取得EiInfo消息信息
     * @return {String}  消息信息
     */
    EiInfo.prototype.getMsg = function () {
        return this.msg;
    };

    /**
     * 设置EiInfo消息信息键
     * @param {String} msgKey
     */
    EiInfo.prototype.setMsgKey = function (msgKey) {
        this.msgKey = msgKey;
    };

    /**
     * 取得EiInfo消息信息键
     * @return {String}  消息信息键
     */
    EiInfo.prototype.getMsgKey = function () {
        return this.msgKey;
    };

    /**
     * 设置EiInfo的详细信息
     * @param {String} sMsg  详细信息
     */
    EiInfo.prototype.setDetailMsg = function (sMsg) {
        this.detailMsg = sMsg;
    };

    /**
     * 取得EiInfo的详细信息
     * @return {String}  详细信息
     */
    EiInfo.prototype.getDetailMsg = function () {
        return this.detailMsg;
    };

    /**
     * 设置EiInfo的状态
     * @param {Number} status 状态
     */
    EiInfo.prototype.setStatus = function (status) {
        this.status = status;
    };

    /**
     * 取得EiInfo状态
     * @return {Number}  状态
     */
    EiInfo.prototype.getStatus = function () {
        return this.status;
    };

    /**
     * 设置EiInfo描述信息
     * @param {String} desc 描述信息
     */
    EiInfo.prototype.setDescName = function (desc) {
        this.descName = desc;
    };

    /**
     * 取得EiInfo描述信息
     * @return {String} 描述信息
     */
    EiInfo.prototype.getDescName = function () {
        return this.descName;
    };

    /**
     * 给EiInfo添加EiBlock块
     *
     * @param {EiBlock} eiBlock EiBlock对象
     * @see EiBlock
     */
    EiInfo.prototype.addBlock = function (eiBlock) {
        this.blocks[eiBlock.getBlockId()] = eiBlock;
    };

    /**
     * 根据blockId从EiInfo取得EiBlock块
     * @param {String} blockId
     * @return {EiBlock}  EiBlock块
     * @see EiBlock
     */
    EiInfo.prototype.getBlock = function (blockId) {
        return this.blocks[blockId];
    };

    /**
     * 取得EiInfo所有的EiBlock块
     * @return {Object} EiBlock块 {blockId: eiBlock}
     */
    EiInfo.prototype.getBlocks = function () {
        return this.blocks;
    };

    /**
     * 根据key名,按照块名、行号、列名规则，以'-'分隔，设置其值.
     */
    EiInfo.prototype.set = function () {
        var blockId;

        if (arguments.length > 2) {
            blockId = arguments[0];
            if (typeof(this.blocks[blockId]) == "undefined") {
                this.blocks[blockId] = new EiBlock(blockId);
            }
        }

        // 按照块名、行号、列名三段式参数解析
        switch (arguments.length) {
            case 2: // 设置EiInfo的属性值
                if (typeof arguments[0] == "string") {
                    var strArray = arguments[0].split("-");
                    if (strArray.length == 1) { // 设置属性区
                        AbstractEi.prototype.set.apply(this, arguments);
                    } else if (strArray.length == 2) { // 设置EiBlock的属性区
                        this.set(strArray[0], strArray[1], arguments[1]);
                    } else if (strArray.length == 3) { // 设置EiBlock的数据区
                        this.set(strArray[0], strArray[1], strArray[2], arguments[1]);
                    }
                }
                break;

            case 3: // 设置EiBlock块的属性值
                this.blocks[blockId].set(arguments[1], arguments[2]);
                break;

            case 4: // 设置EiBlock块cell值
                if (typeof(this.blocks[blockId].getBlockMeta().getMeta(arguments[2])) == "undefined") {
                    var column = new EiColumn(arguments[2]);

                    column.pos = this.blocks[blockId].colCount++;

                    this.blocks[blockId].getBlockMeta().addMeta(column);
                }
                this.blocks[blockId].setCell(arguments[1], arguments[2], arguments[3]);
                break;
        }
    };

    // form表单由于历史原因，input只写了name属性，没有提供id属性
    // 平台的规范是需要id和name同时设置, _selectById == ef.get
    function _selectById(id) {
        var node = document.getElementById(id);
        if (!node) {
            var nodeList = document.getElementsByName(id);
            if (nodeList.length > 0)
                node = nodeList[0];
        }
        return node;
    }

    /**
     * 根据DOM元素（输入字段）的id，把其值设置到EiInfo对应的EiBlock块中
     * id按照块名、行号、列名规则，以'-'分隔 <input id="result-0-ename" name="result-0-ename">
     * @param {String} inputId DOM的id
     */
    EiInfo.prototype.setById = function (inputId) {
        this.setByNameValue(inputId, _selectById(inputId).value);
    };

    /**
     * 根据id名,按照块名、行号、列名规则，以'-'分隔，设置到EiInfo中
     * @param {String} inputId  key名
     * @param {Object} value  欲设置的值
     */
    EiInfo.prototype.setByNameValue = function (inputId, value) {
        // var value = $.trim(oldValue);
        // 防止inputId为空
        if (Object.prototype.toString.call(inputId) === "[object String]" && !!inputId) {
            var idArray = inputId.split("-");
            if (idArray.length === 3) return this.set(idArray[0], idArray[1], idArray[2], value);
            if (idArray.length === 2) return this.set(idArray[0], idArray[1], value);
            if (idArray.length === 1) return this.set(idArray[0], value);
        }
    };

    /**
     * 序列化组织form表单或者div中所有的输入字段，根据id三段式的定义，设置EiInfo的信息
     * DOM结点以及其包含的子结点 根据其id，设置到EiInfo中去 id按照块名、行号、列名规则，以'-'分隔
     * @param {String} divId    DOM结点对应的ID
     */
    EiInfo.prototype.setByNode = function (divId) {
        this.setByNodeObject(_selectById(divId), arguments[1]);
    };

    /**
     * 遍历div中所有的input，select，textarea元素，然后将其值设置到EiInfo中
     * @param {Object} divNode div dom结点
     * @param {Boolean} force 强制序列化div中所有的输入元素，忽略输入元素上的exclude属性
     */
    EiInfo.prototype.setByNodeObject = function (divNode, force) {
        var i, node, nodes, checkboxes = {};

        nodes = divNode.getElementsByTagName("input");
        for (i = 0; i < nodes.length; i++) {
            node = nodes[i];
            if (force || !$(node).data("exclude")) { // node.exclude表示字段不要被序列化至EiInfo
                if (node.type === "radio" && !node.checked)
                    continue;

                if (node.type === "checkbox") {
                    if (node.checked) {
                        if (checkboxes[node.name] === undefined) {
                            // 第一个checkbox
                            checkboxes[node.name] = node.value;
                        } else {
                            // 已有checkbox选中，追加选中的value，用','分隔
                            checkboxes[node.name] = checkboxes[node.name] + ',' + node.value;
                        }
                    }
                    continue;
                }

                if ($(node).data("role") === "multiselect") {
                    // 处理多选场景 EiInfo的序列化
                    var value = $(node).data("kendoMultiSelect").value().join(",");
                    this.setByNameValue(node.name, value);
                } else {
                    // checked的radio input和text input，在此统一赋值
                    this.setByNameValue(node.name, node.value);
                }
            }
        }

        for (var name in checkboxes) { // checkbox的赋值
            this.setByNameValue(name, checkboxes[name]);
        }

        nodes = divNode.getElementsByTagName("select");

        for (i = 0; i < nodes.length; i++) {
            node = nodes[i];
            if (force || !$(node).data("exclude")) {
                if (!node.multiple) { // 单选select
                    if (node.options.length > 0)
                        if (node.selectedIndex >= 0) {
                            this.setByNameValue(node.name, node.options[node.selectedIndex].value);
                        }
                        else {
                            this.setByNameValue(node.name, "");
                        }
                }
                else {
                    var val = [];
                    for (var j = 0; j < node.options.length; j++) {
                        var option = node[j];
                        if (option.selected === true) {
                            val.push(option.value);
                        }
                    }
                    this.setByNameValue(node.name, val.join(','));
                }
            }
        }

        nodes = divNode.getElementsByTagName("textarea");
        for (i = 0; i < nodes.length; i++) {
            node = nodes[i];
            if (force || !$(node).data("exclude")) {
                this.setByNameValue(node.name, node.value);
            }
        }
    };

    /**
     *
     * 遍历结点内所有的input，select，textarea元素，快速构建出EiInfo
     * @param {Mixed} node jQuery selector字符串，jQuery对象，DOM对象
     */
    EiInfo.build = function (node) {
        var info = new EiInfo("");
        if ($(node)[0]) { // 需要序列化的DOM结点必须存在
            info.setByNodeObject($(node)[0]);
        }
        return info;
    };

    /**
     * 解析JSON对象中的EiInfo信息 JSON ==> EiInfo
     * @param {Object} eiJSON 包含EiInfo信息的JSON对象
     * @return {EiInfo} JSON对象解析成的EiInfo
     */
    EiInfo.parseJSONObject = function (eiJSON) {
        var parser = EiInfoParserFactory.getEiInfoParser(eiJSON);
        return parser.parseJSON.call(this, eiJSON);

    };

    EiInfo.parseJSONString = function (jsonString) {
        return EiInfo.parseJSONObject(JSON.parse(jsonString));
    };

    EiInfo.prototype.toJSON = function () {
        var parser = EiInfoParserFactory.getEiInfoParser(this);
        return parser.toJSON.apply(this, arguments);
    };

    EiInfo.prototype.toJSONString = function () {
        return JSON.stringify(this.toJSON(arguments));
    };

    EiInfo.prototype.clone = function () {
        return EiInfo.parseJSONObject(this.toJSON());
    };

    /**
     * 获取EiInfo解析器的工厂方法
     */
    var EiInfoParserFactory = {
        getEiInfoParser: function (eiInfo) {
            if (eiInfo[EiInfoJsonConstants.VERSION] === "2.0") {
                return EiInfoParser.V2;
            }

            return EiInfoParser.V1;
        }
    };

    /**
     * 不同版本的EiInfo解析器
     */
    var EiInfoParser = {
        V1: {
            toJSON: function () {
                var eiInfo = {},
                    that = this;

                eiInfo[EiInfoJsonConstants.EIINFO_NAME] = that.getName();
                eiInfo[EiInfoJsonConstants.EIINFO_DESC_NAME] = that.getDescName();
                eiInfo[EiInfoJsonConstants.EIINFO_MESSAGE] = that.getMsg();
                eiInfo[EiInfoJsonConstants.EIINFO_MESSAGE_KEY] = that.getMsgKey();
                eiInfo[EiInfoJsonConstants.EIINFO_DETAIL_MESSAGE] = that.getDetailMsg();
                eiInfo[EiInfoJsonConstants.EIINFO_STATUS] = that.getStatus();

                eiInfo[EiInfoJsonConstants.ATTRIBUTES] = that.getAttr();

                // 处理blocks
                var blocks = {};

                for (var blockId in this.getBlocks()) {
                    blocks[blockId] = this.getBlock(blockId).toJSON(arguments); // EiBlock ==> JSON
                }

                eiInfo[EiInfoJsonConstants.EIINFO_BLOCKS] = blocks; // {blocks: {result: {}, inqu_status: {}}}

                return eiInfo;
            },
            parseJSON: function (eiJSON) {
                var eiInfo = new EiInfo("");
                // new EiInfo自动创建了version属性，2.0以前的EiInfo无此属性
                delete eiInfo[EiInfoJsonConstants.VERSION];

                var value = eiJSON[EiInfoJsonConstants.EIINFO_NAME];
                if (isAvailable(value)) {
                    eiInfo.setName(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_DESC_NAME];
                if (isAvailable(value)) {
                    eiInfo.setDescName(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_MESSAGE];
                if (isAvailable(value)) {
                    eiInfo.setMsg(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_MESSAGE_KEY];
                if (isAvailable(value)) {
                    eiInfo.setMsgKey(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_DETAIL_MESSAGE];
                if (isAvailable(value)) {
                    eiInfo.setDetailMsg(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_STATUS];
                if (isAvailable(value)) {
                    eiInfo.setStatus(value);
                }

                value = eiJSON[EiInfoJsonConstants.ATTRIBUTES];
                if (isAvailable(value)) {
                    eiInfo.setAttr(value);
                }

                value = eiJSON[EiInfoJsonConstants.EIINFO_BLOCKS];
                if (isAvailable(value)) {
                    for (var blockId in value) {
                        var block = EiBlock.parseBlock(blockId, value[blockId]);
                        eiInfo.addBlock(block);
                    }
                }
                return eiInfo;
            }
        },
        V2: {
            toJSON: function () {
                var that = this,
                    // 防止污染 attr
                    eiInfo = $.extend(true, {}, that.getAttr()); // EiInfo的扩展属性区作为新格式的主要内容

                eiInfo[EiInfoJsonConstants.VERSION] = "2.0"; // 版本号

                var sysJSON = eiInfo[EiInfoJsonConstants.SYS] = {}; // EiInfo的标准属性区

                sysJSON[EiInfoJsonConstants.EIINFO_NAME] = that.getName();
                sysJSON[EiInfoJsonConstants.EIINFO_DESC_NAME] = that.getDescName();
                sysJSON[EiInfoJsonConstants.EIINFO_MESSAGE] = that.getMsg();
                sysJSON[EiInfoJsonConstants.EIINFO_MESSAGE_KEY] = that.getMsgKey();
                sysJSON[EiInfoJsonConstants.EIINFO_DETAIL_MESSAGE] = that.getDetailMsg();
                sysJSON[EiInfoJsonConstants.EIINFO_STATUS] = that.getStatus();
                sysJSON[EiInfoJsonConstants.EIINFO_TRACE_ID] = that.traceId || "";

                // 处理blocks
                var blocks = {};
                for (var blockId in that.getBlocks()) {
                    blocks[blockId] = that.getBlock(blockId).toJSON(arguments); // EiBlock ==> JSON
                }
                eiInfo[EiInfoJsonConstants.BLOCKS] = blocks; // {blocks: {result: {}, inqu_status: {}}}

                // 调用链路相关的context
                // eiInfo[EiInfoJsonConstants.CONTEXT] = $.extend({}, that.__context__);

                return eiInfo;

            },
            parseJSON: function (eiJSON) {
                var eiInfo = new EiInfo(""),
                    sysJSON = eiJSON[EiInfoJsonConstants.SYS], // EiInfo的标准属性区
                    value;

                eiInfo[EiInfoJsonConstants.VERSION] = "2.0"; // 版本

                value = sysJSON[EiInfoJsonConstants.EIINFO_NAME];
                if (isAvailable(value)) {
                    eiInfo.setName(value);
                }

                value = sysJSON[EiInfoJsonConstants.EIINFO_DESC_NAME];
                if (isAvailable(value)) {
                    eiInfo.setDescName(value);
                }

                value = sysJSON[EiInfoJsonConstants.EIINFO_MESSAGE];
                if (isAvailable(value)) {
                    eiInfo.setMsg(value);
                }

                value = sysJSON[EiInfoJsonConstants.EIINFO_MESSAGE_KEY];
                if (isAvailable(value)) {
                    eiInfo.setMsgKey(value);
                }

                value = sysJSON[EiInfoJsonConstants.EIINFO_DETAIL_MESSAGE];
                if (isAvailable(value)) {
                    eiInfo.setDetailMsg(value);
                }

                value = sysJSON[EiInfoJsonConstants.EIINFO_STATUS];
                if (isAvailable(value)) {
                    eiInfo.setStatus(value);
                }

                // traceId 的加入
                value = sysJSON[EiInfoJsonConstants.EIINFO_TRACE_ID];
                if (value) {
                    eiInfo.traceId = value;
                }

                // context的处理
                // value = eiJSON[EiInfoJsonConstants.CONTEXT];
                // if (isAvailable(value)) {
                //     eiInfo[EiInfoJsonConstants.CONTEXT] = value;
                // }


                // blocks区域处理
                value = eiJSON[EiInfoJsonConstants.BLOCKS];
                if (isAvailable(value)) {
                    for (var blockId in value) {
                        var block = EiBlock.parseBlock(blockId, value[blockId]);
                        eiInfo.addBlock(block);
                    }
                }

                var json = $.extend({}, eiJSON);
                delete json[EiInfoJsonConstants.SYS];
                delete json[EiInfoJsonConstants.VERSION];
                // delete json[EiInfoJsonConstants.CONTEXT];
                delete json[EiInfoJsonConstants.BLOCKS];

                // 顶层的JSON挪动到扩展属性区
                value = json;
                if (isAvailable(value)) {
                    eiInfo.setAttr(value);
                }

                return eiInfo;
            }
        }
    };

    var EiConstant = {
        EF_FORM_ENAME: "efFormEname",
        EF_FORM_CNAME: "efFormCname",
        EF_FORM_POPUP: "efFormPopup",
        EF_CUR_FORM_ENAME: "efCurFormEname", // 发起请求的当前页面号，可能与efFormEname相同，特殊情况，可能不同
        EF_FORM_LOAD_PATH: "efFormLoadPath",
        EF_FORM_STYLE: "efFormStyle",
        EF_FORM_INFO_TAG: "efFormInfoTag",
        EF_FORM_BUTTON_DESC: "efFormButtonDesc",
        EF_CUR_BUTTON_ENAME: "efCurButtonEname", // 用户当前点击的按钮名称

        SERVICE_NAME: "serviceName",
        METHOD_NAME: "methodName",
        STATUS: "status",
        SQL_NAME: "sqlName",

        EI: "ei",
        EIINFO: "eiinfo",

        SHOW_MSG: "efShowMsg", // 控制前端是否显示通知消息
        SHOW_DETAIL_MSG: "efShowDetailMsg", // 控制前端是否显示详细的通知消息
        SHOW_MSG_KEY: "efShowMsgKey",

        LIMIT: "limit", // pageSize
        OFFSET: "offset", // page, take, skip
        COUNT: "count",
        SHOW_COUNT: "showCount", // 后台是否进行count操作
        ORDER_BY: "orderBy",
        COLUMN_TOTAL_SUM: "columnTotalSum" // 后台总计信息返回
    };

    /* EiInfo转换时的常量定义 */
    var EiInfoJsonConstants = {
        ATTRIBUTES: "attr",

        EIINFO_NAME: "name",
        EIINFO_DESC_NAME: "descName",
        EIINFO_MESSAGE: "msg",
        EIINFO_MESSAGE_KEY: "msgKey",
        EIINFO_DETAIL_MESSAGE: "detailMsg",
        EIINFO_STATUS: "status",
        EIINFO_TRACE_ID: "traceId", // 调用链路的traceId 在SYS区域

        EIINFO_BLOCKS: "blocks",
        BLOCK_META: "meta",
        BLOCK_META_DESC: "desc",
        BLOCK_META_COLUMNLIST: "columns",
        BLOCK_META_COLUMNPOS: "columnPos",
        BLOCK_DATA: "rows",

        SYS: "__sys__",
        BLOCKS: "__blocks__",
        VERSION: "__version__",
        CONTEXT: "__context__" // REST调用上下文
    };

    /**
     * @deprecated 该方法已经废弃
     * 把EiInfo对象转成JSON字符串 EiInfo ==> JSON String，EiCommunicator进行ajax提交时使用的字符串
     * 应该把EiInfo转成一个JSONObject，然后再通过JSON.stringify方法转为JSON String
     * 应该使用EiInfo.prototype.toJSONString方法
     */
    function EiInfo2Json() {
    }

    EiInfo2Json.prototype.EiInfo2JsonString = function (eiInfo) {
        var a = ['{'];
        var appendComma;

        if (isAvailable(eiInfo.getName())) {
            a.push('"', EiInfoJsonConstants.EIINFO_NAME, '":', formatNative(eiInfo.getName()));
            appendComma = true;
        }
        if (isAvailable(eiInfo.getDescName())) {
            if (appendComma) {
                a.push(',');
            }
            a.push(EiInfoJsonConstants.EIINFO_DESC_NAME, ':', formatNative(eiInfo.getDescName()));
            appendComma = true;
        }

        if (isAvailable(eiInfo.getAttr())) {
            if (appendComma) {
                a.push(',');
            }
            a.push(EiInfoJsonConstants.ATTRIBUTES, ':', formatNative(eiInfo.getAttr()));
            appendComma = true;
        }

        if (appendComma) {
            a.push(',');
        }

        a.push(EiInfoJsonConstants.EIINFO_BLOCKS, ':{');


        var blocks = eiInfo.getBlocks();
        var b;
        for (var iKey in blocks) {
            var block = blocks[iKey];
            if (b) {
                a.push(',');
            }
            a.push(iKey, ':', EiInfo2Json.prototype.EiBlock2JsonString(block));
            b = true;
        }
        a.push('}}');
        return a.join('');
    };

    /**
     * 把EiBlock对象转换成为JSON字符串 EiBlock ==> JSON String
     * @param {EiBlock} eiBlock
     */
    EiInfo2Json.prototype.EiBlock2JsonString = function (eiBlock) {
        var a = ['{'];

        a.push(EiInfoJsonConstants.ATTRIBUTES, ':', formatNative(eiBlock.getAttr()));
        a.push(',', EiInfoJsonConstants.BLOCK_META, ':', EiInfo2Json.prototype.EiBlockMeta2JsonString(eiBlock.getBlockMeta()));

        a.push(',', EiInfoJsonConstants.BLOCK_DATA, ':[');

        var rows = eiBlock.getRows();
        var b;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (b) {
                a.push(',');
            }
            a.push('[');
            var columns = eiBlock.getBlockMeta().getMetas();
            var c;
            for (var jKey in columns) {
                var column = columns[jKey];
                if (c) {
                    a.push(',');
                }
                a.push(formatNative(row[column.pos]));
                c = true;
            }
            b = true;
            c = false;
            a.push(']');
        }

        a.push(']}');
        return a.join('');
    };

    /**
     * 把EiBlockMeta对象转换成为JSON字符串 EiBlockMeta ==> JSON String
     * @param {EiBlock} blockMeta
     */
    EiInfo2Json.prototype.EiBlockMeta2JsonString = function (blockMeta) {
        var a = ['{'];
        var appendComma;
        if (isAvailable(blockMeta.getDesc())) {
            a.push(EiInfoJsonConstants.BLOCK_META_DESC, ':', formatNative(blockMeta.getDesc()));
            appendComma = true;
        }
        if (isAvailable(blockMeta.getAttr())) {
            if (appendComma) {
                a.push(',');
            }
            a.push(EiInfoJsonConstants.ATTRIBUTES, ':', formatNative(blockMeta.getAttr()));
            appendComma = true;
        }
        if (appendComma) {
            a.push(',');
        }
        a.push(EiInfoJsonConstants.BLOCK_META_COLUMNLIST, ':[');

        var columns = blockMeta.getMetas();
        var b;
        for (var iKey in columns) {
            var column = columns[iKey];
            if (b) {
                a.push(',');
            }
            a.push(EiInfo2Json.prototype.EiColumn2JsonString(column));
            b = true;
        }

        a.push(']}');
        return a.join('');
    };

    /**
     * 把EiColumn对象转换成为JSON字符串 EiColumn ==> JSON String
     * FIXME这里只转了eiColumn的部分属性，后台做Excel导出，还需要精度（scale）、数据类型等信息
     * @param {EiColumn} eiColumn
     */
    EiInfo2Json.prototype.EiColumn2JsonString = function (eiColumn) {
        var a = ['{'];

        a.push('name', ':', formatNative(eiColumn.name));
        a.push(',');
        a.push('descName', ':', formatNative(eiColumn.descName));
        a.push(',');
        a.push('type', ':', formatNative(eiColumn.type));

        a.push('}');
        return a.join('');
    };

    /**
     * @deprecated 该方法已经废弃
     * 将原始JSON对象转换成为EiInfo对象的工具类
     */
    function Json2EiInfo() {
    }

    /**
     * 解析JSON对象中的EiInfo信息 JSON ==> EiInfo
     * @param {Object} eiJson 包含EiInfo信息的JSON对象
     */
    Json2EiInfo.prototype.parseJsonObject = function (eiJson) {

        var eiInfo = new EiInfo("");

        var value = eiJson[EiInfoJsonConstants.EIINFO_NAME];
        if (isAvailable(value)) {
            eiInfo.setName(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_DESC_NAME];
        if (isAvailable(value)) {
            eiInfo.setDescName(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_MESSAGE];
        if (isAvailable(value)) {
            eiInfo.setMsg(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_MESSAGE_KEY];
        if (isAvailable(value)) {
            eiInfo.setMsgKey(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_DETAIL_MESSAGE];
        if (isAvailable(value)) {
            eiInfo.setDetailMsg(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_STATUS];
        if (isAvailable(value)) {
            eiInfo.setStatus(value);
        }

        value = eiJson[EiInfoJsonConstants.ATTRIBUTES];
        if (isAvailable(value)) {
            eiInfo.setAttr(value);
        }

        value = eiJson[EiInfoJsonConstants.EIINFO_BLOCKS];
        if (isAvailable(value)) {
            for (var blockId in value) {
                var block = Json2EiInfo.prototype.parseBlock(blockId, value[blockId]);
                eiInfo.addBlock(block);
            }
        }
        return eiInfo;
    };

    /**
     * 解析JSON对象中的EiBlock信息 JSON ==> EiBlock
     * @param {Object} blockId
     * @param {Object} blockJson
     */
    Json2EiInfo.prototype.parseBlock = function (blockId, blockJson) {

        var block;
        var value = blockJson[EiInfoJsonConstants.BLOCK_META];

        if (isAvailable(value)) {
            var blockMeta = Json2EiInfo.prototype.parseBlockMeta(blockId, value);
            block = new EiBlock(blockMeta);
        } else {
            block = new EiBlock(blockId);
        }

        value = blockJson[EiInfoJsonConstants.ATTRIBUTES];
        if (isAvailable(value)) {
            block.setAttr(value);
        }

        value = blockJson[EiInfoJsonConstants.BLOCK_DATA];
        if (isAvailable(value)) {
            block.rows = value;
        }
        return block;
    };

    /**
     * 解析JSON对象中的EiBlockMeta信息 JSON ==> EiBlockMeta
     * @param {String} sId blockId
     * @param {Object} blockMetaJson EiBlockMeta的JSON对象
     */
    Json2EiInfo.prototype.parseBlockMeta = function (sId, blockMetaJson) {
        var blockMeta = new EiBlockMeta(sId);

        var value = blockMetaJson[EiInfoJsonConstants.BLOCK_META_DESC];
        if (isAvailable(value)) {
            blockMeta.setDesc(value);
        }

        value = blockMetaJson[EiInfoJsonConstants.ATTRIBUTES];
        if (isAvailable(value)) {
            blockMeta.setAttr(value);
        }

        value = blockMetaJson[EiInfoJsonConstants.BLOCK_META_COLUMNLIST];
        if (isAvailable(value)) { // value should be Array
            for (var i = 0; i < value.length; i++) {
                var column = Json2EiInfo.prototype.parseColumn(value[i]);
                blockMeta.addMeta(column);
            }
        }
        return blockMeta;
    };

    /**
     * 解析JSON对象中的EiColumn信息 JSON ==> EiColumn
     * @param {Object} columnJson
     */
    Json2EiInfo.prototype.parseColumn = function (columnJson) {

        var column = new EiColumn(columnJson.name);

        for (var iKey in columnJson) {
            var columnValue = columnJson[iKey];
            if (columnValue && columnValue.replace)
                columnValue = columnValue.replace(/'/g, "&#39;");
            // eval("column." + iKey + "='" + columnValue + "'");
            column[iKey] = columnValue;
        }
        return column;
    };


    /**
     * 提交到后台的EiInfo对象
     */
    var ajaxEi = new EiInfo("$ajaxEi");

    var EiCommunicator = {
        callService: function (serviceId, postEiInfo, callback, ajaxOptions) {
            return this.send(serviceId, null, postEiInfo, callback, ajaxOptions);

        },

        /**
         * 封装前端ajax提交到EiService调用
         * @param {String} serviceName 服务名
         * @param {String} methodName 方法名
         * @param {EiInfo} postEiInfo 提交的EiInfo信息
         * @param {Object} callback 回调处理函数的对象{onSuccess:function() {}, onFail: function(){}}
         * @param {Object} ajaxOptions 自定义的ajax选项，覆盖默认的设置
         */
        send: function (serviceName, methodName, postEiInfo, callback, ajaxOptions) {

            var CONTEXT_PATH = getContextPath();

            var jsonEi = postEiInfo.toJSONString();

            // TODO: 防止 CSRF
            var efSecurityToken = $('#efSecurityToken').val();

            var url = CONTEXT_PATH + "/service/" + serviceName + "/" + methodName;

            if (methodName === null) { // 调用微服务
                url = CONTEXT_PATH + "/service/" + serviceName;
            }

            ajaxOptions = $.extend(
                {
                    type: "POST",
                    contentType: IPLAT.AJAX.ContentType.JSON, // 提交时的数据格式
                    dataType: "json", // 服务器返回的数据格式
                    url: url,
                    // data: {service: serviceName, method: methodName, eiinfo: jsonEi, efSecurityToken: efSecurityToken},
                    data: jsonEi,
                    success: function (msg) {
                        ajaxEi = EiInfo.parseJSONObject(msg);

                        IPLAT.ajaxEi = ajaxEi;

                        var r = ajaxEi.get("redirect");
                        if (isAvailable(r)) { // 重定向当前页面
                            var topWindow = IPLAT.getParentWindow() || window;
                            topWindow.location.href = r;
                        } else {
                            // TODO: ajax提交时刷新状态、消息等; ??需要考虑父子页面iframe传递和多条信息累积
                            // 判断ajax是否有返回消息 如果没有改成显示系统消息
                            // if (efutils.trimString(ajaxEi.msg) == "") {
                            //     efform.setStatus(0, "[" + sService + "." + sMethod + "]调用完成");
                            //     efform.setDetailMsg("");
                            // } else {
                            //     efform.setStatus(ajaxEi.status, ajaxEi.msg, ajaxEi.msgKey);
                            //     efform.setDetailMsg(ajaxEi.detailMsg);
                            // }
                            if ($.isPlainObject(callback)) {
                                if ($.isFunction(callback.onSuccess)) {
                                    callback.onSuccess(ajaxEi);
                                }
                            }
                        }
                    },
                    error: function (xmlR, status, e) {
                        ajaxEi = null;
                        // 获取到详细信息，与后台协定$$$分隔
                        var detailMsg = xmlR.responseText.split("$$$")[1];
                        // if (hasForm != false) {
                        //     efform.setStatus(-1, "[" + serviceName + "." + methodName + "]" +
                        // getI18nMessages("ef.CallFailed", "调用失败，原因") + "[" + xmlR.responseText.split("$$$")[0] + "]");
                        //     efform.setDetailMsg(detailMsg);
                        // } else {
                        //     if ($.isPlainObject(callback)) {
                        //         if ($.isFunction(callback.onFail)){
                        //             callback.onFail(xmlR.responseText.split("$$$")[0], status, e);
                        //         }
                        //     }
                        // }

                        if ($.isPlainObject(callback)) {
                            if ($.isFunction(callback.onFail)) {
                                callback.onFail(xmlR.responseText.split("$$$")[0], status, e);
                            }
                        }
                    }
                }

                , ajaxOptions);

            return $.ajax(ajaxOptions);
        },

        sendFuncCall: function (funcId, inInfo, callback) {
            // 特殊场景，调用后台的函数
            inInfo.set("funcId", funcId);
            EiCommunicator.send("EPFunc", "call", inInfo, callback, false);
        },

        $send: function (sUrl, sContent, sCallback) {
            // jquery原生的ajax调用
            $.ajax(
                {
                    type: "POST",
                    // async: false, FIXME 不应该使用同步调用
                    url: sUrl,
                    data: sContent,
                    dataType: "json",
                    success: function (msg) {
                        ajaxEi = EiInfo.parseJSONObject(msg);
                        sCallback.onSuccess(ajaxEi);
                    },
                    error: function (xmlR, status, e) {
                        sCallback.onFail(xmlR, status, e);
                    }
                });
        }

    };

    extend(IPLAT, {
        AbstractEi: AbstractEi,
        EiColumn: EiColumn,
        EiBlockMeta: EiBlockMeta,
        EiBlock: EiBlock,
        EiInfo: EiInfo,

        EiConstant: EiConstant,
        EiInfoJsonConstants: EiInfoJsonConstants,

        // EiInfo对象和JSON互转的工具类
        EiInfo2Json: EiInfo2Json, // 兼容旧的代码
        Json2EiInfo: Json2EiInfo, // 兼容旧的代码
        ajaxEi: ajaxEi,
        EiCommunicator: EiCommunicator
    });

    // export 到全局作用域 window对象
    extend(window, {
        IPLAT: IPLAT,

        AbstractEi: AbstractEi,
        EiColumn: EiColumn,
        EiBlockMeta: EiBlockMeta,
        EiBlock: EiBlock,
        EiInfo: EiInfo,

        EiConstant: EiConstant,
        EiInfoJsonConstants: EiInfoJsonConstants,

        // EiInfo对象和JSON互转的工具类
        EiInfo2Json: EiInfo2Json, // 兼容旧的代码
        Json2EiInfo: Json2EiInfo, // 兼容旧的代码
        ajaxEi: ajaxEi,
        EiCommunicator: EiCommunicator
    });
})(jQuery);
/**
 * IPLAT的核心API，需要依赖EiInfo，但不依赖封装的EF组件 (ui.kendo.component)
 *
 * (ui.init-->ui.eiinfo-->ui.core-->ui.kendo.component--> ui.util)
 */
(function ($) {
    var extend = $.extend,
        each = $.each;

    var IPLAT = window.IPLAT,
        IPLATUI = window.IPLATUI,
        CONTEXT_PATH = IPLATUI.CONTEXT_PATH || "",
        EiInfo = IPLAT.EiInfo,
        EiCommunicator = IPLAT.EiCommunicator,
        isUndefined = IPLAT.isUndefined,
        isAvailable = IPLAT.isAvailable;

    /**
     * 截取字符串首尾的空格.
     * @param {String} str 目标字符串
     * @return {String} 截取首尾空格后的字符串，参数为空返回空字符串""
     * @exception 无异常抛出
     */
    IPLAT.trimString = function (str) {
        if (str instanceof Array || str instanceof Object) {
            return JSON.stringify(str);
        }

        // str 有可能是 Number类型
        return !isAvailable(str) ? "" : (str + '').trim();
    };

    /**
     * 获取文本在dom中的长度
     * @param {String} text 文本
     * @param {String} font 字体大小
     * @return {Number} 长度
     * @exception 无异常抛出
     */
    IPLAT.getCurrentStrWidth = function (text, font) {
        // IE8 会造成 Grid 抖动
        if (IPLAT.Browser.isIE8) {
            return 0;
        } else {
            var currentObj = $('<pre>').hide().appendTo(document.body), width;
            $(currentObj).html(text).css('font-size', font);
            width = currentObj.width();
            currentObj.remove();
            return width;
        }
    };

    /**
     * 把文本放入"剪贴板"
     * @param {String} text 文本
     */
    IPLAT.copyToClipboard = function (text) {
        if (window.clipboardData) {
            // Internet Explorer
            window.clipboardData.setData("Text", text);
        } else {
            // 处理非IE浏览器，火狐由于有安全限制，不能使用。。。。待测试
            var $tempInput = $("<textarea>");
            $("body").append($tempInput);
            $tempInput.val(text).select();
            document.execCommand("copy");
            $tempInput.remove();
        }
    };

    /**
     * 使用EiInfo生成原生的Grid
     * @param {String} id DOM中元素ID名称
     * @param {EiInfo} ei 平台提供的EiInfo对象
     * @param {Object} options 设置kendoGrid的参数集合，里面需要新增一项blockId(用于指定前面EiInfo中block)
     * @return {kendo.ui.Grid} 返回一个kendoGrid对象
     * @exception 无异常抛出
     */
    IPLAT.createGrid = function (id, ei, options) {
        // 平台提供默认的数据block是"result"
        var DEFAULT_BLOCK = "result",
            DEFAULT_COLUMN_WIDTH = IPLATUI.Config.EFGrid.columnWidth,
            DEFAULT_ROW_HEIGHT = IPLATUI.Config.EFGrid.rowHeight,
            blockId = options['blockId'] || DEFAULT_BLOCK,
            eiBlock = ei.getBlock(blockId),
            extend = $.extend,
            isPlainObject = $.isPlainObject,
            eiColumns = eiBlock.getBlockMeta().getMetas();

        // 获取column信息
        var columns = _.map(eiColumns, function (eiColumn, index) {
            var columnJSON = eiColumn.toJSON();
            // 数据类型的处理 "N", "C"， 数字默认居右， 数据类型包括B，N，C，D，E
            var align = columnJSON.type === "N" ? "right" : "left";

            columnJSON.valueType = columnJSON.type; // schema.model里面的type信息

            columnJSON.editType = columnJSON.editor; // 单元格编辑时的展示类型
            delete columnJSON.editor; // 和kendo自定义的editor冲突

            // EiColumn Meta的信息的优先级低
            var columnAttr = columnJSON.attr, // EiColumn.java设置的自定义数据
                locked = columnJSON.primaryKey, // 主键列是固定列
                enable = true,
                hidden = (columnJSON.visible === false),
                validation = {};

            if (isPlainObject(columnAttr)) { // EiColumn.java中设置的动态属性
                locked = !!(columnAttr["locked"]);
                enable = columnAttr['enable'];
            }

            if (columnJSON.regex) {
                validation["data-regex"] = columnJSON.regex;
            }

            if (columnJSON.errorPrompt) {
                validation["data-errorprompt"] = columnJSON.errorPrompt;
            }

            return extend(columnJSON, {
                field: columnJSON.name,
                title: columnJSON.descName,
                hidden: hidden,
                locked: locked,
                enable: enable,
                width: columnJSON.width || DEFAULT_COLUMN_WIDTH,
                height: columnJSON.height || DEFAULT_ROW_HEIGHT,

                attributes: extend({
                    align: align,
                    required: !columnJSON.nullable,
                    minLength: columnJSON.minLength,
                    maxLength: columnJSON.maxLength,
                    "data-rules": columnJSON.validateType
                }, validation)
            });

        });
        // 获取data数据
        var rows = eiBlock.getMappedRows();

        // 组装options
        var initOptions = extend({}, {
            columns: columns,
            dataSource: rows
        }, options);

        // 生成Grid
        return $("#" + id).kendoGrid(initOptions).data("kendoGrid");
    };

    /**
     * 使用平台提供的API打开新窗口，并在当前窗口维护所有打开的子窗口
     *
     * @param {String}  formEname : 新页面的英文名;
     * @param {String}  paramList : 输入参数;
     * @param {String}  isMax : 是否最大化;
     * @return {Window} 打开的新窗口，无法打开时返回null
     */
    IPLAT.openForm = function (formEname, paramList, isMax) {
        var loadTime = new Date();
        var loadLabel = formEname.trim() + loadTime.getTime();

        var url = IPLAT.createUrl(formEname, paramList);

        var openPara = "toolbar=no,location=yes,directories=no,status=yes,menubar=yes," +
            "resizable=yes,scrollbars=yes,";
        if (isMax === true) {
            openPara += "width=" + (screen.availWidth - 10) + ",height="
                + (screen.availHeight - 30) + ",top=0," + "left=0";
        } else {
            openPara += "width=900,height=600,top="
                + ((screen.availHeight - 600) / 2) + ",left="
                + ((screen.availWidth - 900) / 2);
        }

        // IE下，open方法中name参数无法含有特殊字符，否则js报错
        var reg = /^\w+$/;
        if (!reg.test(loadLabel.trim())) {
            alert("输入的页面号中含有无效字符！");
            return null;
        }

        var openedWindow;

        // 在新型浏览器中以tab选项卡方式打开,不需要再带打开参数
        if (!$.support.leadingWhitespace) {
            openedWindow = window.open(url, loadLabel, openPara);
        } else {
            openedWindow = window.open(url, loadLabel);
        }

        childWindows.push(openedWindow);

        return openedWindow;
    };

    /**
     * 使用平台提供的API创建URL路径
     *
     * @param {String}  formEname : 新页面的英文名;
     * @param {String}  paramList : 输入参数;
     * @return {String}  url : 需要的URL路径
     */
    IPLAT.createUrl = function (formEname, paramList) {
        paramList = IPLAT.trimString(paramList);
        var url = CONTEXT_PATH + "/web/" + formEname.trim().toUpperCase();
        if (isAvailable(paramList)) {
            url += "?" + paramList;
        }
        return url;
    };

    /**
     * FIXME 弹出新页面, 继承自3.9 暂时还没发现和openForm的区别
     *
     * @private
     * @param {String} formEname    新页面ID
     * @param {String} paramList    输入参数
     * @param {String} isMax        是否最大化
     */
    IPLAT.openNewForm = function (formEname, paramList, isMax) {
        var currentWindow = window;

        if (currentWindow !== null) {
            return IPLAT.openForm(formEname, paramList, isMax);
        }
    };

    /**
     * 打开平台页面时，POST大批量的EiInfo数据，在Service的initLoad方法中，可以取到传递的EiInfo参数
     * @param formEname     页面英文名
     * @param postEiInfo    大批量的EiInfo参数
     * @param params        页面URL的参数
     */
    IPLAT.postForm = function (formEname, postEiInfo, params) {
        postEiInfo.set("__PARAMS__", params);

        var jsonEi = postEiInfo.toJSONString(true);
        var contextPath = IPLAT.getContextPath();

        $.ajax({
            type: "POST",
            contentType: IPLAT.AJAX.ContentType.JSON, // 提交时的数据格式
            dataType: "json", // 服务器返回的数据格式
            url: contextPath + "/EU/EU0001.jsp?formEname=" + formEname,
            data: jsonEi,
            success: function (response) {
                if (response.r !== 'NO_DIRECT') {
                    window.location.href = contextPath + response.r;
                }
            },
            error: function (e) {
                //
            }
        });
    };

    /**
     * 把list格式转化为map格式,list数据集合是由一行行类似于[{id,pid},{id,pid}....]组成的
     * @param {list} data : list数据集合;
     * @param {String} idField : 行中主键(id)的属性名称,作为其他行的父Id
     * @param {String} parentId : 行中父id的属性名称;
     * @param {String} rootLevel : 首结点名称;
     * @return {Object} map
     */
    IPLAT.flat2Map = function (data, idField, parentId, rootLevel) {
        var map = {};
        if (!$.isArray(data)) {
            return map;
        }

        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var id = item[idField];
            var pid = item[parentId];

            map[id] = map[id] || [];
            map[pid] = map[pid] || [];

            item.items = map[id]; // schema model中的children: "items"
            map[pid].push(item);
        }

        return map[rootLevel];
    };

    IPLAT.flat2MapNoItemsEmptyArray = function (data, idField, parentId, rootLevel, fieldName) {
       var _data = IPLAT.flat2Map(data, idField, parentId, rootLevel);

       var clearEmptyArray = function (data) {
           for (var i = 0; i < data.length; i++) {
               if (fieldName) {
                   data[i]['text'] = data[i][fieldName];
               }

               if (!data[i].items.length)  {
                   delete data[i].items // 干掉空数组
               } else {
                   clearEmptyArray(data[i].items);
               }
           }
       };

       clearEmptyArray(_data);

       return _data;
    };

    /**
     * 把map格式转化为list格式,map数据集合是由一行行类似于[{id:'',items:[{id:'',items:[.....]}]}]组成的
     * @param {map} data            map数据集合
     * @param {String} itemsName    子级属性名称（默认值为items）
     * @return []
     */
    IPLAT.map2Flat = function (data, itemsName) {
        var map = data.toJSON(),
            ITEMS_NAME = itemsName || 'items';
        var list = [];
        var _map2Array = function (arrayList) {
            $.each(arrayList, function (i, array) {
                if (array[ITEMS_NAME] && array[ITEMS_NAME].length > 0) {
                    _map2Array(array[ITEMS_NAME]);
                }
                list.push(array);
                delete array[ITEMS_NAME];
            })
        };
        _map2Array(map);
        return list;
    };

    /**
     * 自动填充DOM结点各输入域的内容
     * @private
     * @param {Object} node     DOM结点对象
     * @param {EiInfo} eiInfo   数据
     */
    IPLAT.fillNode = function (node, eiInfo) {
        var cellValue;

        if (node.tagName === "INPUT" && node.type !== "button") {
            cellValue = eiInfo.get(node.name);

            if (!isAvailable(cellValue)) {
                // 根据node.name 无法在eiInfo中获取值
                return;
            }

            // EFInput格式化 绑定EiInfo中的value的处理
            // if ($(node).attr('data-role') === "formatInput") {
            //     var $textField = $("#" + node.name + "_textField");
            //     $textField.val(cellValue);
            //     $textField.blur();
            // }

            if ($(node).data("role") === "dropdownlist") {
                $(node).data("kendoDropDownList").value(cellValue);
                $(node).data("kendoDropDownList").trigger("change");
            } else if ($(node).data("role") === "datepicker" || $(node).data("role") === "datetimepicker") {
                var isDatePicker = $(node).data("role") === "datepicker",
                    datePicker = isDatePicker ? $(node).data("kendoDatePicker") : $(node).data("kendoDateTimePicker"),
                    dateOptions = datePicker.options,
                    formats = [dateOptions.format],
                    paseFormats = dateOptions.parseFormats;

                formats = formats.concat(paseFormats).concat(_.values(IPLAT.FORMAT));

                var dateValue = kendo.parseDate(cellValue, formats);
                datePicker.value(dateValue);
                datePicker.trigger("change");

            } else if ($(node).data("role") === "autocomplete") {
                $(node).data("kendoAutoComplete").value(cellValue);
                $(node).data("kendoAutoComplete").trigger("change");
            } else {
                IPLAT.EFInput.value($(node), cellValue);
                // node.value = cellValue;
            }
        } else if (node.tagName === "TEXTAREA") {
            cellValue = eiInfo.get(node.name);
            if (cellValue === null) {
                return;
            }
            IPLAT.EFInput.value($(node), cellValue);

            // $(node).text(cellValue).val(cellValue);
        } else if (node.tagName === "SELECT") {
            cellValue = eiInfo.get(node.name);
            if($(node).data("role") === "multiselect") {
                $(node).data("kendoMultiSelect").value(cellValue);
                $(node).data("kendoMultiSelect").trigger("change");
            }
        } else {
            for (var i = 0; i < node.childNodes.length; i++) {
                try {
                    IPLAT.fillNode(node.childNodes[i], eiInfo);
                } catch (exception) {
                }
            }
        }
    };

    /**
     * 清空DOM结点各输入域内容
     * @param {Object} node DOM结点对象;
     * @return void
     */
    IPLAT.clearNode = function (node) {
        if (node.tagName === "INPUT" || node.tagName === "TEXTAREA" || node.tagName === "SELECT") {
                if (!($(node).data("keep"))) {
                    if ($(node).attr("data-role") === "dropdownlist") {
                        $(node).data("kendoDropDownList").value("");
                    } else if ($(node).attr("data-role") === "multiselect") {
                        $(node).data("kendoMultiSelect").value("");
                    } else if ($(node).attr("data-role") === "datepicker") {
                        $(node).data("kendoDatePicker").value("");
                        $(node).data("kendoDatePicker").trigger("change");
                    } else if ($(node).attr("data-role") === "datetimepicker") {
                        $(node).data("kendoDateTimePicker").value("");
                        $(node).data("kendoDateTimePicker").trigger("change");
                    } else if ($(node).attr("data-role") === "popupInput") {
                        IPLAT.EFPopupInput.clear($(node));
                    } else if ($(node).attr("type") === "checkbox" || $(node).attr("type") === "radio") {
                        $(node).attr("checked", false);
                    } else {
                        $(node).val("");
                    }
                }
            }
        else {
            for (var i = 0; i < node.childNodes.length; i++) {
                try {
                    IPLAT.clearNode(node.childNodes[i]);
                } catch (exception) {
                }
            }
        }
    };

    /**
     * 批量提交当前页面所有Grid勾选的数据
     *
     * @param node
     * @param serviceName
     * @param methodName
     * @param callBack
     */
    IPLAT.submitNode = function (node, serviceName, methodName, callBack) {
        var ei = EiInfo.build(node);
        var gridList = node.find("div[data-role='grid']");
        $.each(gridList, function (i, item) {
            var submitGrid = $(item).data("kendoGrid");
            var submitBlock = submitGrid.getCheckedBlockData();
            ei.addBlock(submitBlock);
        });

        EiCommunicator.send(serviceName, methodName, ei, callBack);
    };

    // 重命名kendo.spreadsheet
    (function () {
        jQuery.fn['iplatSpreadsheet'] = function (options) {
            this.kendoSpreadsheet(options)
        };
    })(jQuery);


    extend(IPLATUI, {
        EFInput: {},
        EFDatePicker: {},
        EFDateSpan: {},
        EFSelect: {},
        EFMultiSelect: {},
        EFCascadeSelect: {},
        EFColumn: {},
        EFPopupInput: {},
        EFCascadeSelect: {},
        EFTreeInput: {},
        EFAutoComplete: {},
        EFUpload: {},

        EFGrid: {},

        EFTree: {},
        EFTreeList: {},

        EFTab: {},

        EFWindow: {}
    });
})(jQuery);
(function ($) {
    var isPlainObject = $.isPlainObject,
        EiInfo = IPLAT.EiInfo,
        EiConstant = IPLAT.EiConstant,
        extend = $.extend;

    var NS = '.iplat';

    var messageType = {
        INFO: "info",
        SUCCESS: "success",
        WARNING: "warning",
        ERROR: "error"
    };

    var messageTypeMap = {
        "info": 10,
        "success": 10,
        "warning": 20,
        "error": 30
    };

    var levelMap = {
        "INFO": 0,
        "DEBUG": 5,
        "WARNING": 15,
        "ERROR": 25
    };

    var eiInfoMessageHandler = function (eiInfo) {
        var msgObject = {
            msg: "",
            detailMsg: "",
            msgKey: "",
            showMsg: false
        };

        if (eiInfo.get(EiConstant.SHOW_MSG) === false) { // EiInfo 中控制不显示Msg
            return msgObject;
        }

        if (eiInfo.getStatus() < 0) {
            msgObject.msgType = messageType.ERROR;
        } else if (eiInfo.getStatus() === 0) {
            msgObject.msgType = messageType.SUCCESS;
        } else if (eiInfo.getStatus() > 0) {
            msgObject.msgType = messageType.WARNING;
        }

        msgObject.msg = eiInfo.getMsg();
        msgObject.msgKey = eiInfo.getMsgKey();
        msgObject.detailMsg = eiInfo.getDetailMsg();

        if (eiInfo.get(EiConstant.SHOW_DETAIL_MSG) === false || !IPLATUI.Config.Notification.SHOW_DETAIL_MSG) {
            // EiInfo 中控制不显示detailMsg
            msgObject.detailMsg = "";
        }
        if (eiInfo.get(EiConstant.SHOW_MSG) === false || !IPLATUI.Config.Notification.SHOW_MSG) {
            // EiInfo 中控制不显示msg
            msgObject.msg = "";
        }
        if (eiInfo.get(EiConstant.SHOW_MSG_KEY) === false || !IPLATUI.Config.Notification.SHOW_MSG_KEY) {
            // EiInfo 中控制不显示msg
            msgObject.msgKey = "";
        }
        return msgObject;
    };

    /**
     * 预处理消息
     * @param msg 消息可以是String EiInfo， Object
     * @param msgType 消息的类型
     * @param isEiInfo 是否是EiInfo
     * @return {Object} 统一的消息模板需要的参数对象
     */
    var messageHandler = function (msg, msgType, isEiInfo) {

        var msgObject = {
            msg: "",
            detailMsg: "",
            msgKey: "",
            showMsg: false
        };

        if (IPLATUI.Config.Notification.OFF || messageTypeMap[msgType] < levelMap[IPLATUI.Config.Notification.LEVEL]) {
            // 全局控制的开关关闭，LOG LEVEL 低级别的log的不会显示
            return msgObject;
        }

        if (_.isString(msg)) { // 处理字符串
            msgObject.msg = msg;
        } else if (IPLAT.isEiInfo(msg) || isEiInfo) {
            // 处理EiInfo的消息
            // msg.__ClassName__ === "EiInfo" 避免跨iframe window的instanceof问题
            msgObject = eiInfoMessageHandler(msg);
        } else if (isPlainObject(msg)) { // 处理Object类型的消息
            msgObject = $.extend(msgObject, msg);
        }

        if (!isAvailable(msgObject.msg) && isAvailable(msgObject.detailMsg)) {
            // 如果只有detailMsg 没有msg
            msgObject.msg = msgObject.detailMsg + "";
            msgObject.detailMsg = "";
        }

        if (isAvailable(msgObject.msg)) {
            msgObject.msg += "";

            // msgObject.msg = msgObject.msg.replace(/\n/g, "<br>"); // msg的长度不应超过20个字符,不允许换行
            msgObject.detailMsg = msgObject.detailMsg.replace(/\n/g, "<br>"); // 具体的异常应在detailMsg中展示，可以换行

            msgObject.showMsg = true; // 只显示有内容的消息
        }

        return msgObject;
    };


    var NotificationUtil = (function () {

        var hasInitialized = false,
            timer,
            defaultAutoHideAfter = IPLATUI.Config.Notification.AUTO_HIDE_AFTER || 6000,
            notificationWidget;

        // 通知对象的单例 延迟初始化
        var getNotificationInstance = function () {
            if (hasInitialized) {
                return notificationWidget;
            } else {
                //todo add by yy 2020-1-14 此处isState 为3需要与后台传输数据结合，不应该是静态的
                var isCopy = IPLATUI.Config.Notification.COPY === true,
                    isAPM = IPLATUI.Config.Notification.APM === true,
                    isLock = IPLATUI.Config.Notification.LOCK === true,
                    isState = 3;

                // 生成notification的模版
                var TEMPLATE = kendo.template($("#notification-template").html())({
                    isCopy: isCopy,
                    isLock: isLock,
                    isState: isState,
                    isAPM: isAPM
                });

                // 拷贝文本到粘贴板
                if (isCopy) {
                    $(document).on("click" + NS, '.msg-template-copy', function (e) {
                        var $this = $(this);
                        var content = $('.msg-template-main').find('.msg-template-content');
                        var detailContent = $('.msg-template-main').find('.msg-detail');
                        if (content.length) {
                            // 调用API把文本拷贝到粘贴板
                            IPLAT.copyToClipboard(content.text() + '\n' + detailContent.children().text());
                            TooltipUtil($this, '复制成功');
                        }
                    });
                }

                // 固定通知的内容
                if (isLock) {
                    $(document).on("click" + NS, '.msg-template-lock', function (e) {
                        var $this = $(this),
                            // 获取类别span
                            typeSpan = notificationWidget.getNotifications().find("span").eq(0),
                            fixed,
                            content = $('.msg-template-main');

                        if ($this.data('fixed') === true) {
                            $this.data('fixed', false);
                            fixed = false;
                        } else {
                            $this.data('fixed', true);
                            fixed = true;
                        }

                        if (content.length) {
                            var typeClass = typeSpan.attr('class') || '';
                            var typeMatch = typeClass.match(/i-(\w+)$/);
                            // 获取类别
                            var type = (typeMatch && typeMatch.length) ? typeMatch[1] : '';
                            if (type) {
                                if (fixed) {
                                    // 去掉定时关闭notification任务
                                    clearTimeout(timer);
                                    // 变更图标
                                    $this.find('i').removeClass('i-thumb-tack').addClass('i-thumb-tack-fixed');
                                } else {
                                    // 重启定时关闭notification任务
                                    timer = setTimeout(function () {
                                        notificationWidget.hide();
                                    }, defaultAutoHideAfter);
                                    // 变更图标
                                    $this.find('i').removeClass('i-thumb-tack-fixed').addClass('i-thumb-tack');
                                }
                            }
                        }
                    });
                }

                // 调用链路的跟踪
                if (isAPM) {
                    $(document).on("click" + NS, '.msg-template-link', function (e) {
                        var traceId = IPLAT.ajaxEi ? IPLAT.ajaxEi["traceId"] : "";

                        if (!isAvailable(traceId)) {
                            TooltipUtil($(this), '没有traceId');
                        } else if (/\${/.test(IPLATUI.APM_URL)) {
                            TooltipUtil($(this), 'iPlatAPM应用地址配置不正确,请到EDCC03配置');
                        } else {
                            window.open(IPLATUI.APM_URL + "/web/"+IPLATUI.APM_ANALYSIS+"?delay=false&&traceId=" + traceId);
                        }

                    });
                }

                notificationWidget = $("#notification-util").kendoNotification({
                    // 动画
                    // animation: {
                    //     open: {
                    //         effects: "slideIn:down",
                    //         duration: 700
                    //     },
                    //     close: {
                    //         effects: "slideIn:down",
                    //         duration: 700,
                    //         reverse: true
                    //     }
                    // },
                    position: {
                        top: 0,
                        left: IPLATUI.Config.Notification.LEFT
                    },
                    hide: function (e) {
                        // 每次关闭提示框，同时清除定时关闭notification任务
                        clearTimeout(timer);
                        $('.msg-template-lock').removeData();
                    },
                    allowHideAfter: 0,
                    // 设置默认不关闭
                    autoHideAfter: 0,
                    button: true,
                    stacking: "up",
                    width: IPLATUI.Config.Notification.WIDTH,
                    templates: [
                        {
                            type: 'success',
                            template: TEMPLATE
                        },
                        {
                            type: 'info',
                            template: TEMPLATE
                        },
                        {
                            type: 'error',
                            template: TEMPLATE
                        },
                        {
                            type: 'warning',
                            template: TEMPLATE
                        }
                    ],
                    hideOnClick: false
                }).data("kendoNotification");

                hasInitialized = true;
                return notificationWidget;
            }
        };

        return function (msg) {
            // 第二个参数指明通知类型，第三个说明是否是EiInfo(主要处理子页面是iframe情形)
            var msgType = arguments.length > 1 ? arguments[1] : messageType.SUCCESS,
                isEiInfo = arguments.length > 2 ? arguments[2] : (IPLAT.isEiInfo(msg)),
                msgTemplate = kendo.template($("#msg-template").html());

            // 防止出现messageType以外的类型
            msgType = _.indexOf([messageType.SUCCESS, messageType.WARNING,
                messageType.INFO, messageType.ERROR], msgType) < 0 ? messageType.SUCCESS : msgType;

            var showNotification = function () {
                notificationWidget = getNotificationInstance();

                var msgObject = messageHandler(msg, msgType, isEiInfo);

                if (!msgObject.showMsg) { // 空的消息或存在错误的通知，不再显示通知消息
                    return;
                }

                notificationWidget.hide();

                // 优先根据内部eiInfo的status（-1表示错误）
                msgType = msgObject.msgType ? msgObject.msgType : msgType;

                // 展示信息
                notificationWidget.show(msgTemplate(msgObject), msgType);

                $(".k-notification").parent().css("z-index", 10004); // Notification > Window

                // 设置定时关闭notification任务
                timer = setTimeout(function () {
                    notificationWidget.hide();
                }, defaultAutoHideAfter);

                // 错误信息，触发notification固定事件
                if (msgType === messageType.ERROR) {
                    $('.msg-template-lock').trigger('click' + NS);
                }
            };
            if (IPLAT.Util.inIframe()) {
                try {
                    if (window !== IPLAT.getParentWindow() &&
                        $.isFunction(IPLAT.getParentWindow().NotificationUtil)) {
                        IPLAT.getParentWindow().NotificationUtil(msg, msgType, isEiInfo);
                    }
                }catch(ex){
                    showNotification();
                }
            } else {
                showNotification();
            }
        }
    })();

    var WindowUtil = (function () {
        var hasInitialized = false,
            defaults = {
                title: "",
                content: ""
            },
            windowInstance;

        var getWindowInstance = function (options) {
            var windowId = options.windowId || 'w-' + Date.now();
            $("body").append("<div id='" + windowId + "'></div>");

            var $window = $("#" + windowId).kendoWindow({
                title: "",
                visible: false,
                modal: true,
                actions: [
                    "Close"
                ],
                animation: {
                    close: {duration: 500},
                    open: {duration: 500}
                }
            });

            $window.on("click", function (e) {
                var args = Array.prototype.slice.call(arguments);
                var target = e.target || e.srcElement;

                var okFn = $window.data("kendoWindow").options.ok;
                var cancelFn = $window.data("kendoWindow").options.cancel;

                if (target.className.indexOf('query-sure') > -1) {
                    okFn && okFn.apply($window, args);
                }
                if (target.className.indexOf('query-cancel') > -1) {
                    cancelFn && cancelFn.apply($window, args);
                }
            });

            $window.on('submit', function (e) {
                var args = Array.prototype.slice.call(arguments);
                defaults['submit'] && defaults['submit'].apply($window, args);
                return false;
            });

            windowInstance = $window.data("kendoWindow");

            return windowInstance;
        };

        return function (options) {
            windowInstance = getWindowInstance(options);
            defaults = $.extend(defaults, options);
            windowInstance.setOptions(defaults);
            windowInstance.title(defaults['title']);
            windowInstance.content(defaults['content']);
            windowInstance.center().open();
            return windowInstance;
        };
    })();

    // 警告对话框
    var alert = (function (settings) {
        var okFn = arguments[1],
            title = arguments[2],
            minWidth = arguments[3];

        var alertSetting = {
            title: IPLATUI.Config.Modal.ALERT_TITLE,
            minWidth: IPLATUI.Config.Modal.ALERT_MIN_WIDTH // 警告对话框配置的默认最小宽度
        };

        if (IPLAT.isString(settings)) {
            alertSetting["message"] = settings;

            if ($.isFunction(okFn)) {
                alertSetting["okFn"] = okFn;
            }

            if (IPLAT.isString(title)) {
                if (IPLAT.trimString(title) !== "") {
                    alertSetting["title"] = title;
                }
            }

            if (IPLAT.isNumber(minWidth) && minWidth >= 300) {
                alertSetting["minWidth"] = minWidth;
            }

        } else {
            alertSetting = $.extend(alertSetting, settings);
        }

        var alertHTML = kendo.template($("#alert-template").html())({
            message: alertSetting.message.replace(/\n/g, "<br/>"),
            ok: IPLAT.CONSTANTS.CONFIRM_BUTTON_NAME
        });

        return WindowUtil({
            title: alertSetting.title,
            actions: false,
            resizable: false,
            content: alertHTML,
            minWidth: alertSetting.minWidth,
            ok: function () {
                var kendoWindowAlert = this.data("kendoWindow");
                $.isFunction(alertSetting.okFn) && alertSetting.okFn();
                kendoWindowAlert.destroy();
            }
        });
    });

    // 确认对话框
    var confirm = function (settings) {
        var okFn = arguments[1],
            cancelFn = arguments[2],
            title = arguments[3],
            minWidth = arguments[4];

        var confirmSetting = {
            title: IPLATUI.Config.Modal.CONFIRM_TITLE,
            minWidth: IPLATUI.Config.Modal.CONFIRM_MIN_WIDTH // 警告对话框配置的默认最小宽度
        };

        if (IPLAT.isString(settings)) {
            confirmSetting["message"] = settings;

            if ($.isFunction(okFn)) {
                confirmSetting["okFn"] = okFn;
            }

            if ($.isFunction(cancelFn)) {
                confirmSetting["cancelFn"] = cancelFn;
            }

            if (IPLAT.isString(title)) {
                if (IPLAT.trimString(title) !== "") {
                    confirmSetting["title"] = title;
                }
            }

            if (IPLAT.isNumber(minWidth) && minWidth >= 300) {
                confirmSetting["minWidth"] = minWidth;
            }
        } else {
            confirmSetting = $.extend(confirmSetting, settings);
        }

        // 支持\n 换行
        var confirmHTML = kendo.template($("#confirm-template").html())({
            message: confirmSetting.message.replace(/\n/g, "<br/>"),
            ok: IPLAT.CONSTANTS.CONFIRM_BUTTON_NAME,
            cancel: IPLAT.CONSTANTS.CANCEL_BUTTON_NAME
        });

        var windowId = kendo.guid();
        return WindowUtil({
            windowId: windowId,
            title: confirmSetting.title,
            actions: false,
            resizable: false,
            content: confirmHTML,
            minWidth: confirmSetting.minWidth,
            ok: function () {
                var kendoWindowConfirm = this.data("kendoWindow");

                if ($.isFunction(confirmSetting.okFn) && !(confirmSetting.okFn() instanceof kendo.ui.Window)) {
                    kendoWindowConfirm.destroy();
                }
            },
            cancel: function () {
                var kendoWindowConfirm = $("#"+windowId).data("kendoWindow");
                $.isFunction(confirmSetting.cancelFn) && confirmSetting.cancelFn();
                kendoWindowConfirm.destroy();

            }
        });
    };

    // 输入对话框
    var prompt = function (settings) {
        var okFn = arguments[1],
            cancelFn = arguments[2],
            title = arguments[3],
            minWidth = arguments[4];

        var promptSetting = {
            title: IPLATUI.Config.Modal.PROMPT_TITLE,
            minWidth: IPLATUI.Config.Modal.PROMPT_MIN_WIDTH // 警告对话框配置的默认最小宽度
        };

        if (IPLAT.isString(settings)) {
            promptSetting["message"] = settings;

            if ($.isFunction(okFn)) {
                promptSetting["okFn"] = okFn;
            }

            if ($.isFunction(cancelFn)) {
                promptSetting["cancelFn"] = cancelFn;
            }

            if (IPLAT.isString(title)) {
                if (IPLAT.trimString(title) !== "") {
                    promptSetting["title"] = title;
                }
            }

            if (IPLAT.isNumber(minWidth) && minWidth >= 300) {
                promptSetting["minWidth"] = minWidth;
            }
        } else {
            promptSetting = $.extend(promptSetting, settings);
        }

        // 支持\n 换行
        var promptHTML = kendo.template($("#prompt-template").html())({
            message: promptSetting.message.replace(/\n/g, "<br/>"),
            ok: IPLAT.CONSTANTS.CONFIRM_BUTTON_NAME,
            cancel: IPLAT.CONSTANTS.CANCEL_BUTTON_NAME
        });

        var windowId = kendo.guid();
        return WindowUtil({
            windowId: windowId,
            title: promptSetting.title,
            actions: false,
            resizable: false,
            content: promptHTML,
            minWidth: promptSetting.minWidth,
            ok: function () {
                var kendoWindowPrompt = this.data("kendoWindow");
                var content = kendoWindowPrompt.element.find('.kendo-modal-input-content');
                var val = $('input', content).val() || '';

                if ($.isFunction(promptSetting.okFn) && !(promptSetting.okFn(val) instanceof kendo.ui.Window)) {
                    // 解决prompt内嵌confirm时，窗口自动关闭问题
                    kendoWindowPrompt.destroy();
                }
            },
            cancel: function () {
                var kendoWindowPrompt = $("#"+windowId).data("kendoWindow");
                $.isFunction(promptSetting.cancelFn) && promptSetting.cancelFn();
                kendoWindowPrompt.destroy();
            }
        });
    };

    // 在元素上快捷展示tooltip
    var TooltipUtil = (function (element, msg) {
        var $element = $(element);

        var tooltipInstance = $element.kendoTooltip({
            showAfter: 0,
            animation: false,
            content: function () {
                return msg
            },
            hide: function () {
                // 清除tooltip
                $element.removeAttr('data-role');
                this.destroy();
            }
        }).data("kendoTooltip");

        tooltipInstance.show();

        // Notification点击右侧图标后出现的tooltip位置
        var toolTip = tooltipInstance;
        var toolTipContainer = $(".k-tooltip").closest("div.k-animation-container"),
            _iconOffset = $element.offset();
        toolTipContainer.css("top", _iconOffset.top + $element.height() + 6 + "px");
        toolTipContainer.css("left", _iconOffset.left - (toolTip.popup.element[0].offsetWidth - ($element.width() - 2)) / 2 + "px");
    });


    /**
     * EFWindow.Tag 对应的JS组件逻辑
     * @param options
     * @constructor
     */
    var Window = function (options) {
        var $element = $("#" + options.windowId);

        // 处理options中可能要加到DIV上的属性
        $element.attr(IPLAT.Util.pickDOMAttributes(options));

        // width, height, position 默认配置
        var width, height, posTop, posLeft,
            hasIframe = options.hasOwnProperty("content");

        if (hasIframe) {
            width = IPLATUI.Config.EFWindow.width;
            height = IPLATUI.Config.EFWindow.height;

            posLeft = IPLATUI.Config.EFWindow.left;
            posTop = IPLATUI.Config.EFWindow.top;
        } else {
            width = IPLATUI.Config.EFWindow.minWidth;
            height = IPLATUI.Config.EFWindow.minHeight;

            posLeft = IPLATUI.Config.EFWindow.minLeft;
            posTop = IPLATUI.Config.EFWindow.minTop;
        }

        // window默认配置
        var defaults = {
                iframe: true,
                pinned: true,
                visible: false,
                width: width,
                height: height,
                position: {
                    top: posTop,
                    left: posLeft
                }
            },
            // 页面JS中的原生配置
            windowConfig = extend({}, IPLATUI.EFWindow[options.windowId]);

        var windowInstance = $element.kendoWindow(
            extend({}, defaults, options, windowConfig)).data("kendoWindow");

        // 处理弹出窗口懒加载的情形
        if (options.lazyload === true && !!options.lazyUrl) {
            windowInstance.bind("open", function(){
                // refresh = true，页面重新加载
                // 存在URL表明页面是动态加载iframe
                var $element = windowInstance.element,
                    url = options.lazyUrl,
                    refresh = options.refresh;

                var initIframe = function (url, $element) {
                    var $iframe = $('<iframe>');
                    // $iframe.appendTo($element);
                    $iframe.prop('width', '100%');
                    $iframe.prop('height', '100%');
                    $iframe.prop('frameborder', '0');
                    $iframe.prop('src', url);
                    $element.data("kendoWindow").content($iframe);
                    $element.data('loadComplete', true);
                };

                if (refresh === true) {
                    initIframe(url, $element);
                } else {
                    var loadComplete = $element.data('loadComplete');
                    if (!loadComplete) {
                        initIframe(url, $element);
                    }
                }
            });

            windowInstance.bind("close", function(){
                // 在iframe情况下并且refresh情况下，清空加载的数据
                var $element = windowInstance.element,
                    refresh = options.refresh;

                if (refresh === true) {
                    // 清空页面数据
                    $element.empty();
                }
            })
        }

        return windowInstance;
    };

    $.extend(IPLAT, {
        alert: alert,
        confirm: confirm,
        prompt: prompt,
        Window: Window,
        Notification: messageType,
        WindowUtil: WindowUtil,
        NotificationUtil: NotificationUtil,
        TooltipUtil: TooltipUtil
    });

    $.extend(window, {
        WindowUtil: WindowUtil,
        NotificationUtil: NotificationUtil
    });
})(jQuery);
/**
 * 自定义KendoGrid的Pager组件
 *
 * 处理Pager在上方下方的显示场景
 */
;(function ($) {
    var isUndefined = IPLAT.isUndefined,

        FIRST = ".k-pager-first", // 首页按钮
        LAST = ".k-pager-last", // 尾页按钮
        GO_INPUT = ".k-pager-input", // 页数跳转输入框
        TOTAL_INFO = ".k-pager-info",

        COUNT_ACTIVE = "count-active", // 打开showCount开关
        COUNT_BTN = "i-grid-count", // showCount开关按钮的样式

        isArray = $.isArray,
        each = $.each,
        extend = $.extend;

    function ismobile() {//移动端适配
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/(iPhone|iPod|Android|ios)/i) || ua.match(/MicroMessenger/i) == 'micromessenger') {
            return true;
        }
        else {
            return false;
        }
    }

    var flg = ismobile();
    /*****************************************************************************************
     * kendo Grid pageable的文档
     * http://docs.telerik.com/kendo-ui/api/javascript/ui/grid#configuration-pageable
     *  1. pageable: false 默认是不显示翻页的；
     *  2. pageable: {
     *      pageSize: 10, // 每页显示的条数，优先级低于DataSource中的pageSize
     *
     *      previousNext: false, // 默认显示上一页 下一页 首页 尾页的按钮
     *
     *      numeric: false, // 默认显示页码按钮  [1][2][3]...[8][9][10]
     *      buttonCount: 5, // 默认显示10个页面按钮，页数超过 则显示 ...，结合numeric为true使用
     *
     *      input: true, // 可输入页码的输入框，输入页码跳转，不可和numeric同时使用
     *
     *      pageSizes: [10,20,50], // 支持显示全部的all 改变每页显示条数的下拉框
     *      refresh: true, // 默认不显示刷新按钮,
     *
     *      info: false, // 默认显示当前页面的信息和总数信息 例如： 显示 11-20 共54条
     *      messages: {
     *          "allPages": "全部",
     *          "display": "显示条目 {0} - {1} 共 {2}",
     *          "empty": "没有可显示的记录。",
     *          "page": "页",
     *          "of": "共 {0}",
     *          "itemsPerPage": "每页",
     *          "first": "首页",
     *          "last": "末页",
     *          "next": "下一页",
     *          "previous": "上一页",
     *          "refresh": "刷新",
     *          "morePages": "更多..."
     *      }
     *  }
     ******************************************************************************************/

    // TODO 按照大邦的设计效果 custom kendo pager

    // (function ($, undefined) {
    //     var kendo = window.kendo, ui = kendo.ui, Widget = ui.Widget, proxy = $.proxy,
    //         FIRST = '.k-i-seek-w', LAST = '.k-i-seek-e', PREV = '.k-i-arrow-w', NEXT = '.k-i-arrow-e',
    //         CHANGE = 'change', NS = '.kendoPager', CLICK = 'click', KEYDOWN = 'keydown', DISABLED = 'disabled',
    //         iconTemplate = kendo.template('<a href="\\#" aria-label="#=text#" title="#=text#" ' +
    //             'class="k-link k-pager-nav #= wrapClassName #"><span class="k-icon #= className #"></span></a>');
    //
    //     function button(template, idx, text, numeric, title) {
    //         return template({
    //             idx: idx,
    //             text: text,
    //             ns: kendo.ns,
    //             numeric: numeric,
    //             title: title || ''
    //         });
    //     }
    //
    //     function icon(className, text, wrapClassName) {
    //         return iconTemplate({
    //             className: className.substring(1),
    //             text: text,
    //             wrapClassName: wrapClassName || ''
    //         });
    //     }
    //
    //     function update(element, selector, page, disabled) {
    //         element.find(selector).parent().attr(kendo.attr('page'), page).attr('tabindex', -1).
    //         toggleClass('k-state-disabled', disabled);
    //     }
    //
    //     function first(element, page) {
    //         update(element, FIRST, 1, page <= 1);
    //     }
    //
    //     function prev(element, page) {
    //         update(element, PREV, Math.max(1, page - 1), page <= 1);
    //     }
    //
    //     function next(element, page, totalPages) {
    //         update(element, NEXT, Math.min(totalPages, page + 1), page >= totalPages);
    //     }
    //
    //     function last(element, page, totalPages) {
    //         update(element, LAST, totalPages, page >= totalPages);
    //     }
    //
    //     var Pager = Widget.extend({
    //         init: function (element, options) {
    //             var that = this, page, totalPages;
    //             Widget.fn.init.call(that, element, options);
    //             options = that.options;
    //             that.dataSource = kendo.data.DataSource.create(options.dataSource);
    //             that.linkTemplate = kendo.template(that.options.linkTemplate);
    //             that.selectTemplate = kendo.template(that.options.selectTemplate);
    //             that.currentPageTemplate = kendo.template(that.options.currentPageTemplate);
    //             page = that.page();
    //             totalPages = that.totalPages();
    //             that._refreshHandler = proxy(that.refresh, that);
    //             that.dataSource.bind(CHANGE, that._refreshHandler);
    //             if (options.previousNext) {
    //                 if (!that.element.find(FIRST).length) {
    //                     that.element.append(icon(FIRST, options.messages.first, 'k-pager-first'));
    //                     first(that.element, page, totalPages);
    //                 }
    //                 if (!that.element.find(PREV).length) {
    //                     that.element.append(icon(PREV, options.messages.previous));
    //                     prev(that.element, page, totalPages);
    //                 }
    //             }
    //             if (options.numeric) {
    //                 that.list = that.element.find('.k-pager-numbers');
    //                 if (!that.list.length) {
    //                     that.list = $('<ul class="k-pager-numbers k-reset" />').appendTo(that.element);
    //                 }
    //             }
    //             if (options.input) {
    //                 if (!that.element.find('.k-pager-input').length) {
    //                     that.element.append('<span class="k-pager-input k-label">' + options.messages.page +
    //                         '<input class="k-textbox">' + kendo.format(options.messages.of, totalPages) + '</span>');
    //                 }
    //                 that.element.on(KEYDOWN + NS, '.k-pager-input input', proxy(that._keydown, that));
    //             }
    //             if (options.previousNext) {
    //                 if (!that.element.find(NEXT).length) {
    //                     that.element.append(icon(NEXT, options.messages.next));
    //                     next(that.element, page, totalPages);
    //                 }
    //                 if (!that.element.find(LAST).length) {
    //                     that.element.append(icon(LAST, options.messages.last, 'k-pager-last'));
    //                     last(that.element, page, totalPages);
    //                 }
    //             }
    //
    //             if (options.pageSizes) {
    //                 if (!that.element.find('.k-pager-sizes').length) {
    //                     var pageSizes = options.pageSizes.length ? options.pageSizes : [
    //                         'all',
    //                         5,
    //                         10,
    //                         20
    //                     ];
    //                     var pageItems = $.map(pageSizes, function (size) {
    //                         if (size.toLowerCase && size.toLowerCase() === 'all') {
    //                             return '<option value=\'all\'>' + options.messages.allPages + '</option>';
    //                         }
    //                         return '<option>' + size + '</option>';
    //                     });
    //                     $('<span class="k-pager-sizes k-label"><select/>' + options.messages.itemsPerPage + '</span>').
    //                     appendTo(that.element).find('select').html(pageItems.join('')).end().appendTo(that.element);
    //                 }
    //                 that.element.find('.k-pager-sizes select').val(that.pageSize());
    //                 if (kendo.ui.DropDownList) {
    //                     that.element.find('.k-pager-sizes select').show().kendoDropDownList();
    //                 }
    //                 that.element.on(CHANGE + NS, '.k-pager-sizes select', proxy(that._change, that));
    //             }
    //
    //             if (options.refresh) {
    //                 if (!that.element.find('.k-pager-refresh').length) {
    //                     that.element.append('<a href="#" class="k-pager-refresh k-link" title="' +
    //                         options.messages.refresh + '"><span class="k-icon k-i-refresh">' +
    //                         options.messages.refresh + '</span></a>');
    //                 }
    //                 that.element.on(CLICK + NS, '.k-pager-refresh', proxy(that._refreshClick, that));
    //             }
    //             if (options.info) {
    //                 if (!that.element.find('.k-pager-info').length) {
    //                     that.element.append('<span class="k-pager-info k-label" />');
    //                 }
    //             }
    //             that.element.on(CLICK + NS, 'a', proxy(that._click, that)).addClass('k-pager-wrap k-widget k-floatwrap');
    //             that.element.on(CLICK + NS, '.k-current-page', proxy(that._toggleActive, that));
    //             if (options.autoBind) {
    //                 that.refresh();
    //             }
    //             kendo.notify(that);
    //         },
    //         destroy: function () {
    //             var that = this;
    //             Widget.fn.destroy.call(that);
    //             that.element.off(NS);
    //             that.dataSource.unbind(CHANGE, that._refreshHandler);
    //             that._refreshHandler = null;
    //             kendo.destroy(that.element);
    //             that.element = that.list = null;
    //         },
    //         events: [CHANGE],
    //         options: {
    //             name: 'Pager',
    //             selectTemplate: '<li><span class="k-state-selected">#=text#</span></li>',
    //             currentPageTemplate: '<li class="k-current-page"><span class="k-link k-pager-nav">#=text#</span></li>',
    //             linkTemplate: '<li><a tabindex="-1" href="\\#" class="k-link" data-#=ns#page="#=idx#" #if (title !== "") {# title="#=title#" #}#>#=text#</a></li>',
    //             buttonCount: 10,
    //             autoBind: true,
    //             numeric: true,
    //             info: true,
    //             input: false,
    //             previousNext: true,
    //             pageSizes: false,
    //             refresh: false,
    //             messages: {
    //                 allPages: 'All',
    //                 display: '{0} - {1} of {2} items',
    //                 empty: 'No items to display',
    //                 page: 'Page',
    //                 of: 'of {0}',
    //                 itemsPerPage: 'items per page',
    //                 first: 'Go to the first page',
    //                 previous: 'Go to the previous page',
    //                 next: 'Go to the next page',
    //                 last: 'Go to the last page',
    //                 refresh: 'Refresh',
    //                 morePages: 'More pages'
    //             }
    //         },
    //         setDataSource: function (dataSource) {
    //             var that = this;
    //             that.dataSource.unbind(CHANGE, that._refreshHandler);
    //             that.dataSource = that.options.dataSource = dataSource;
    //             dataSource.bind(CHANGE, that._refreshHandler);
    //             if (that.options.autoBind) {
    //                 dataSource.fetch();
    //             }
    //         },
    //         refresh: function (e) {
    //             var that = this, idx, end, start = 1, reminder, page = that.page(), html = '', options = that.options,
    //                 pageSize = that.pageSize(), total = that.dataSource.total(), totalPages = that.totalPages(),
    //                 linkTemplate = that.linkTemplate, buttonCount = options.buttonCount;
    //             if (e && e.action == 'itemchange') {
    //                 return;
    //             }
    //             if (options.numeric) {
    //                 if (page > buttonCount) {
    //                     reminder = page % buttonCount;
    //                     start = reminder === 0 ? page - buttonCount + 1 : page - reminder + 1;
    //                 }
    //                 end = Math.min(start + buttonCount - 1, totalPages);
    //                 if (start > 1) {
    //                     html += button(linkTemplate, start - 1, '...', false, options.messages.morePages);
    //                 }
    //                 for (idx = start; idx <= end; idx++) {
    //                     html += button(idx == page ? that.selectTemplate : linkTemplate, idx, idx, true);
    //                 }
    //                 if (end < totalPages) {
    //                     html += button(linkTemplate, idx, '...', false, options.messages.morePages);
    //                 }
    //                 if (html === '') {
    //                     html = that.selectTemplate({ text: 0 });
    //                 }
    //                 html = this.currentPageTemplate({ text: page }) + html;
    //                 that.list.removeClass('k-state-expanded').html(html);
    //             }
    //             if (options.info) {
    //                 if (total > 0) {
    //                     html = kendo.format(options.messages.display, Math.min((page - 1) * pageSize + 1, total), Math.min(page * pageSize, total), total);
    //                 } else {
    //                     html = options.messages.empty;
    //                 }
    //                 that.element.find('.k-pager-info').html(html);
    //             }
    //             if (options.input) {
    //                 that.element.find('.k-pager-input').html(that.options.messages.page + '<input class="k-textbox">' + kendo.format(options.messages.of, totalPages)).find('input').val(page).attr(DISABLED, total < 1).toggleClass('k-state-disabled', total < 1);
    //             }
    //             if (options.previousNext) {
    //                 first(that.element, page, totalPages);
    //                 prev(that.element, page, totalPages);
    //                 next(that.element, page, totalPages);
    //                 last(that.element, page, totalPages);
    //             }
    //             if (options.pageSizes) {
    //                 var hasAll = that.element.find('.k-pager-sizes option[value=\'all\']').length > 0;
    //                 var selectAll = hasAll && pageSize === this.dataSource.total();
    //                 var text = pageSize;
    //                 if (selectAll) {
    //                     pageSize = 'all';
    //                     text = options.messages.allPages;
    //                 }
    //                 that.element.find('.k-pager-sizes select').val(pageSize).filter('[' + kendo.attr('role') + '=dropdownlist]').kendoDropDownList('value', pageSize).kendoDropDownList('text', text);
    //             }
    //         },
    //         _keydown: function (e) {
    //             if (e.keyCode === kendo.keys.ENTER) {
    //                 var input = this.element.find('.k-pager-input').find('input'), page = parseInt(input.val(), 10);
    //                 if (isNaN(page) || page < 1 || page > this.totalPages()) {
    //                     page = this.page();
    //                 }
    //                 input.val(page);
    //                 this.page(page);
    //             }
    //         },
    //         _refreshClick: function (e) {
    //             e.preventDefault();
    //             this.dataSource.read();
    //         },
    //         _change: function (e) {
    //             var value = e.currentTarget.value;
    //             var pageSize = parseInt(value, 10);
    //             var dataSource = this.dataSource;
    //             if (!isNaN(pageSize)) {
    //                 dataSource.pageSize(pageSize);
    //             } else if ((value + '').toLowerCase() == 'all') {
    //                 dataSource.pageSize(dataSource.total());
    //             }
    //         },
    //         _toggleActive: function () {
    //             this.list.toggleClass('k-state-expanded');
    //         },
    //         _click: function (e) {
    //             var target = $(e.currentTarget);
    //             e.preventDefault();
    //             if (!target.is('.k-state-disabled')) {
    //                 this.page(target.attr(kendo.attr('page')));
    //             }
    //         },
    //         totalPages: function () {
    //             return Math.ceil((this.dataSource.total() || 0) / (this.pageSize() || 1));
    //         },
    //         pageSize: function () {
    //             return this.dataSource.pageSize() || this.dataSource.total();
    //         },
    //         page: function (page) {
    //             if (page !== undefined) {
    //                 if (this.trigger('pageChange', { index: page })) {
    //                     return;
    //                 }
    //                 this.dataSource.page(page);
    //                 this.trigger(CHANGE, { index: page });
    //             } else {
    //                 if (this.dataSource.total() > 0) {
    //                     return this.dataSource.page();
    //                 } else {
    //                     return 0;
    //                 }
    //             }
    //         }
    //     });
    //     ui.plugin(Pager);
    // }(window.kendo.jQuery));


    /**
     * 初始化工具栏信息
     *
     * STEP1 处理buttons，包括 EDFA01注册的按钮，默认的按钮，js中定义的按钮
     * STEP2 处理Grid右侧Setting下拉菜单中的逻辑，包括：个性化显示列，导出数据等
     * STEP3 处理翻页条在Grid上方的逻辑
     *
     * @param options
     * @private
     */
    IPLAT.EFGrid._initPager = function (options) {
        var gridConfig = options.gridConfig; // JS中的配置优先级最高

        /*******************************************************
         *
         * STEP1    先处理JS中配置的翻页相关配置
         *
         *******************************************************/

        if (!isUndefined(gridConfig.showCount)) { // JS中配了showCount 优先级最高
            options.showCount = gridConfig.showCount;
            delete gridConfig.showCount;
        }

        if (!isUndefined(gridConfig.pageable)) { // JS中配了pageable 优先级最高
            extend(true, options, {pageable: gridConfig.pageable});
            delete gridConfig.pageable;
        }

        // var showCount = options.showCount,
        //     pageable = options.pageable;
        //
        //
        // /*******************************************************
        //  *
        //  * STEP2    存在翻页条时 先处理要不要显示总数的场景
        //  *
        //  *******************************************************/
        //
        // if (pageable) {
        //     if (!showCount) {
        //         // 不从服务端查询总数时的翻页展示处理。 没有总数时，只显示 上一页 下一页
        //         extend(true, options.pageable, {
        //             input: true,
        //             numeric: false,
        //             buttonCount: 1,
        //             info: false
        //         });
        //     }
        // }
    };

    /**
     * 处理EFGrid翻页条的位置
     *
     * @param gridInstance
     * @private
     */
    var _handleGridPagerPosition = function (gridInstance) {
        var options = gridInstance.options,
            $grid = gridInstance.element;

        // 翻页条在grid上方的处理
        if (IPLAT.EFGrid._hasToolbarPager(options)) {
            var $pager = $(gridInstance.pager.element);
            var hasButtons = IPLAT.EFGrid._hasToolbarButtons(options.toolbarConfig);

            var $toolbar = $grid.find("#ef_grid_toolbar_" + options.blockId);

            if ($toolbar.length > 0) {
                $pager.addClass("i-pager-top");

                if (!hasButtons) {
                    // grid上方无按钮
                    $pager.prependTo($toolbar);
                } else {

                    if ($toolbar.find("div.kendo-xplat-add").length > 0) {
                        $pager.insertAfter($toolbar.find(".kendo-xplat-add"));
                    } else {
                        $pager.prependTo($toolbar);
                    }
                }


                $(window).resize(kendo.throttle(function () {
                    $pager.show();
                }, 100));
            } else {
                // 不存在toolbar 顶部翻页也不需要出现 {toolbarConfig: {hidden: 'all'}}
                $pager.hide();
            }
            /********************************/
            if(flg){//移动端适配
                $pager.css("width","80px")
            }
        }
    };

    /**
     * 使用iPlatUI定制的翻页条，增加了showCount的开关，Grid初始化完成后调用一次
     * 后续可在此增加配置项隐藏showCount的按钮
     *
     *  @param gridInstance
     * @private
     */
    IPLAT.EFGrid._handlePagerCount = function (gridInstance) {
        var options = gridInstance.options,
            pageable = options.pageable;

        if (pageable) {
            // gridInstance.pager是kendo.ui.Pager对象，pageable=false时，其为undefined
            var $pager = $(gridInstance.pager.element);
            $pager.addClass("i-grid-pager");

            var $countBtn = $($("#grid-count-template").html()).insertAfter($pager.find(".k-pager-sizes"));

            $countBtn.attr("id", "count_" + gridInstance.getBlockId()).on("click", function () {
                if ($(this).hasClass(COUNT_ACTIVE)) {
                    // 打开查询总数的开关
                    gridInstance.options.showCount = false;
                    gridInstance.dataSource.query();

                } else {
                    // 关闭查询总数的开关
                    gridInstance.options.showCount = true;
                    gridInstance.dataSource.query();
                }
            });

            // Grid初始化完成后，设置正确的showCount状态
            IPLAT.EFGrid._refreshPagerCount(gridInstance);
        }
    };

    /**
     * 打开或者关闭showCount查询总数的功能, 设置正确的按钮的显示状态；
     * 也会处理翻页条的位置；EFGrid初始化，查询后会多次调用
     *
     * @param gridInstance
     * @private
     */
    IPLAT.EFGrid._refreshPagerCount = function (gridInstance) {
        var options = gridInstance.options,
            pageable = options.pageable;

        if (pageable) {
            var $pager = $(gridInstance.pager.element);
            var $countBtn = $pager.find("." + COUNT_BTN);

            if (!gridInstance.options.showCount) {
                // 关闭查询总数的开关
                $countBtn.removeClass(COUNT_ACTIVE);

                $pager.find(FIRST).hide(); // 不知道总数时，隐藏首页和尾页
                $pager.find(LAST).hide();
                $pager.find(GO_INPUT).hide(); // 页数跳转
                $pager.find(TOTAL_INFO).hide(); // 共
            } else {
                // 打开查询总数的开关
                $countBtn.addClass(COUNT_ACTIVE);

                $pager.find(FIRST).show();
                $pager.find(LAST).show();
                $pager.find(GO_INPUT).show();
                $pager.find(TOTAL_INFO).show();
            }

            _handleGridPagerPosition(gridInstance);
        }
    };

})(window.jQuery);
/**
 * 自定义列
 */
;(function ($) {
    var EiConstant = IPLAT.EiConstant,
        EiInfo = IPLAT.EiInfo,
        EiBlock = IPLAT.EiBlock,
        WindowUtil = IPLAT.WindowUtil,
        ICON = IPLATUI.Config.Layout.ICON,
        ICON_AND_TEXT = IPLATUI.Config.Layout.ICON_AND_TEXT,
        each = $.each;

    var _mixedHandler = function (models) {
        var locked = 0,
            unlocked = 0;
        each(models, function (i, model) {
            if (locked === 0) {
                locked = model.column_locked === "1" ? 1 : 0;
            }

            if (unlocked === 0) {
                unlocked = model.column_locked === "1" ? 0 : 1;
            }

            if (locked + unlocked === 2) {
                return false;
            }
        });
        return locked + unlocked === 2;
    };

    IPLAT.EFGrid._buildPersonal = function (options, gridInstance) {
        var blockId = options.blockId,
            personalBlockId = "personal_" + blockId,
            personalGrid,
            gridPersonalInfo,
            personalWindow;

        var rowIndex = -1,
            dbColumns = options.personalInfo.getBlock(personalBlockId).getMappedRows();

        gridPersonalInfo = new EiInfo("personalInfo");
        gridPersonalInfo.addBlock(new EiBlock(
            options.personalInfo.getBlock(personalBlockId).getBlockMeta()
        ));
        if(IPLAT.isAvailable(options.eiInfo["traceId"])){
            gridPersonalInfo["traceId"]=options.eiInfo["traceId"];
        }


        each(options.columns, function (i, column) {
            if (!column.aid) { // 排除掉checkbox 序号列
                rowIndex++;

                var dbColumn = _.find(dbColumns, {column_ename: column.field});

                if (dbColumn) {
                    gridPersonalInfo.set(personalBlockId, rowIndex, "tedfa60_id", dbColumn.tedfa60_id);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "project_ename", dbColumn.project_ename);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "form_ename", dbColumn.form_ename);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "grid_id", dbColumn.grid_id);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "user_id", dbColumn.user_id);

                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_ename", dbColumn.column_ename);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_cname", dbColumn.column_cname);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_locked", dbColumn.column_locked);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_hidden", dbColumn.column_hidden);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_width", dbColumn.column_width);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_order", dbColumn.column_order);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "soft_delete", dbColumn.soft_delete);
                } else {
                    gridPersonalInfo.set(personalBlockId, rowIndex, "tedfa60_id", "");
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_order", rowIndex + 1);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "project_ename", IPLATUI.PROJECT_ENAME);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "form_ename", IPLATUI.FORM_ENAME);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "grid_id", options.blockId);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "user_id", IPLATUI.USER_ID);

                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_ename", column.field);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_cname", column.title);
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_locked", column.locked ? "1" : "0");
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_hidden", column.hidden ? "1" : "0");
                    gridPersonalInfo.set(personalBlockId, rowIndex, "column_width", column.width);

                    gridPersonalInfo.set(personalBlockId, rowIndex, "soft_delete", "0");
                }
            }
        });

        gridPersonalInfo.set(personalBlockId, EiConstant.COUNT, rowIndex + 1);
        gridPersonalInfo.set(personalBlockId, EiConstant.LIMIT, 20);
        gridPersonalInfo.set(personalBlockId, EiConstant.OFFSET, 0);

        personalGrid = IPLAT.xGrid({
            gridId: "ef_personal_grid_" + options.blockId,
            needAuth: false,
            tagId: options.blockId + "-" + kendo.guid(),
            columns: [
                // {
                //     field: "op",
                //     title: "操作",
                //     template: $("#personal-grid-template").html(),
                //     locked: true,
                //     enable: false
                // },
                {field: "tedfa60_id", hidden: true},
                {field: "project_ename", hidden: true},
                {field: "form_ename", hidden: true},
                {field: "grid_id", hidden: true},
                {field: "user_id", hidden: true},
                {
                    field: "column_ename",
                    enable: false,
                    template: function (model) {
                        if (model.column_locked === '1') {
                            return "<span style='color: red'>" + model.column_ename + "</span>";
                        }
                        return model.column_ename;
                    }
                },
                {
                    field: "column_locked", displayType: "checkbox", editType: "checkbox"
                },
                {
                    field: "column_hidden", displayType: "checkbox", editType: "checkbox"
                },
                {
                    field: "column_width", defaultValue: 96, attributes: {
                    "data-rules": "integer"
                }
                },
                {
                    field: "column_order", hidden: true
                },
                {
                    field: "soft_delete", title: "配置状态", template: function (dataItem) {
                    if (dataItem["soft_delete"] === "1") {
                        return "默认配置";
                    } else {
                        return "可自定义";
                    }
                }
                }

            ],

            queryMethod: function (params) {
                // 翻页参数
                var skip = params.data.skip,
                    pageSize = params.data.pageSize;

                var responseEiInfo = gridPersonalInfo.clone();
                responseEiInfo.set(personalBlockId, EiConstant.LIMIT, pageSize);

                var block = responseEiInfo.getBlock(personalBlockId);
                var rows = block.getRows();
                block.setRows(rows.slice(skip, skip + pageSize));

                responseEiInfo.set(EiConstant.SHOW_MSG, false); // 不显示query的msg
                params.success(responseEiInfo.toJSON());
            },

            query: function () { //  初始的查询条件
                var queryInfo = new EiInfo("personalInfo");
                queryInfo.set("inqu_status-0-project_ename", IPLATUI.PROJECT_ENAME);
                queryInfo.set("inqu_status-0-form_ename", IPLATUI.FORM_ENAME);
                queryInfo.set("inqu_status-0-grid_id", options.blockId);
                queryInfo.set("inqu_status-0-user_id", IPLATUI.USER_ID);
                return queryInfo;
            },

            beforeEdit: function (e) {
                /**
                 * 勾选行后，点击单元格准备编辑时的事件
                 * beforeEdit可以用于自定义单元格是否可以编辑，不要和列的readonly，enable混用
                 * @param e 事件对象
                 * e.sender Grid对象
                 * e.container 单元格td jQuery对象
                 * e.row 行号
                 * e.col 列号(columns中的列配置信息数组中的column对象的index)
                 * e.model 行数据对象 kendo.data.Model
                 * e.field 列英文名
                 * e.preventDefault 禁止编辑
                 */

                if (e.model["soft_delete"] === "1") {
                    // 使用默认值 禁止编辑
                    e.preventDefault();

                    WindowUtil({
                        'title': "提示",
                        "content": "<div class='kendo-del-message'>使用了默认配置的列，不可编辑</div>"
                    });
                } else {

                    if (e.field === "soft_delete") {
                        e.preventDefault();
                    } else if (e.field === "column_hidden") {
                        var col = _.find(e.sender.columns, function (column) {
                            if (column.field === e.field && column.attributes && column.attributes["mustShow"]) {
                                // 列必须显示
                                return true;
                            }
                            return false;
                        });

                        if (col) {
                            WindowUtil({
                                'title': "提示",
                                "content": "<div class='kendo-del-message'>" + col.title + " 列不可隐藏</div>"
                            });
                        }
                    }
                }

            },
            onCheckRow: function (e) {
                // /**
                //  * 点击行首checkbox，勾选行时触发的事件
                //  * @param e     kendo的Event对象
                //  * e.sender     kendoGrid对象，resultGrid
                //  * e.fake       用于区分是手动点击的事件还是模拟的事件
                //  * e.checked    用于区分是勾选还是取消勾选
                //  * e.model      勾选或取消勾选的行数据，kendo.data.Model
                //  * e.row        当前行的行号
                //  * e.tr         行的tr,包括固定列和数据列 jquery对象
                //  */
                // var $element = e.sender.element,
                //     $upBtn = $element.find("#"+ personalBlockId + "_up > .k-button"),
                //     $downBtn = $element.find("#"+ personalBlockId + "_down > .k-button"),
                //     $undoBtn = $element.find("#"+ personalBlockId + "undo > .k-button"),
                //     $redoBtn = $element.find("#"+ personalBlockId + "_redo > .k-button");
                //
                // if (e.model["soft_delete"] === "1") {
                //     // 禁用 up down undo
                //     $upBtn.prop("disabled", true);
                //     $downBtn.prop("disabled", true);
                //     $undoBtn.prop("disabled", false);
                //     $redoBtn.prop("disabled", true);
                // } else {
                //     $upBtn.prop("disabled", false);
                //     $downBtn.prop("disabled", false);
                //     $undoBtn.prop("disabled", false);
                //     $redoBtn.prop("disabled", false);
                // }

            },

            onRowClick: function (e) {
                /**
                 * 单击数据行时触发的事件，注意编辑状态时不会触发
                 * @param e
                 * e.sender     kendoGrid对象，resultGrid
                 * e.model      点击的行数据，kendo.data.Model
                 * e.row        当前行的行号
                 * e.tr         行的tr,包括固定列和数据列 jquery对象
                 */

                // if (e.model["soft_delete"] === "1") {
                //     // 禁用 up down undo
                // } else {
                //
                // }
            },

            dataBinding: function () {

            },

            saveOptions: { // 提交数据时的判断
                create: true,
                update: false
            },

            blockId: personalBlockId,
            height: 400,
            autoBind: false,
            toolbarConfig: {
                add: false, "delete": false, save: false, cancel: false,
                buttons: [{
                    name: personalBlockId + "_up",
                    attributes: {
                        style: "float:left",
                        title: "向上"
                    },
                    icon: "css:fa-arrow-up",
                    layout: ICON,
                    click: function () {
                        if (personalGrid.getCheckedRows().length === 0) {
                            WindowUtil({
                                'title': "向上移动列",
                                "content": "<div class='kendo-del-message'>没有选中的行</div>"
                            });
                        } else {
                            if (_mixedHandler(personalGrid.getCheckedRows())) {
                                WindowUtil({
                                    'title': "向上移动列",
                                    "content": "<div class='kendo-del-message'>不允许同时移动固定列和非固定列</div>"
                                });
                            } else {
                                var lockedCount = _.filter(personalGrid.getDataItems(), {column_locked: "1"}).length;
                                each(personalGrid.getCheckedRows(), function (i, dataItem) {
                                    var index = personalGrid.dataSource.indexOf(dataItem);
                                    var newIndex;
                                    if (dataItem.column_locked === "1") {
                                        newIndex = Math.max(0, index - 1);
                                    } else { // 非固定列不能移动到固定列之前
                                        newIndex = Math.max(lockedCount, index - 1);
                                    }

                                    if (newIndex != index) {
                                        var data = personalGrid.dataSource.data();
                                        var upRow = data[newIndex];

                                        dataItem.set("column_order", newIndex + 1);
                                        data[newIndex] = dataItem;
                                        data[newIndex + 1] = upRow;
                                        upRow.set("column_order", newIndex + 2);


                                    } else {
                                        if (newIndex > 0) {
                                            WindowUtil({
                                                'title': "向上移动列",
                                                "content": "<div class='kendo-del-message'>非固定列不能移动到固定列的上方</div>"
                                            });

                                        } else {
                                            WindowUtil({
                                                'title': "向上移动列",
                                                "content": "<div class='kendo-del-message'>已经移动到了顶部</div>"
                                            });
                                        }

                                        return false;
                                    }

                                });
                            }
                        }
                    }
                }, {
                    name: personalBlockId + "_down",
                    icon: "css:fa-arrow-down",
                    layout: ICON,
                    attributes: {
                        style: "float:left",
                        title: "向下"
                    },
                    click: function () {
                        if (personalGrid.getCheckedRows().length === 0) {
                            WindowUtil({
                                'title': "向下移动列",
                                "content": "<div class='kendo-del-message'>没有选中的行</div>"
                            });
                        } else {

                            if (_mixedHandler(personalGrid.getCheckedRows())) {
                                WindowUtil({
                                    'title': "向下移动列",
                                    "content": "<div class='kendo-del-message'>不允许同时移动固定列和非固定列</div>"
                                });
                            } else {
                                var lockedCount = _.filter(personalGrid.getDataItems(), {column_locked: "1"}).length;
                                each(personalGrid.getCheckedRows().reverse(), function (i, dataItem) {
                                    var index = personalGrid.dataSource.indexOf(dataItem);

                                    var newIndex;
                                    if (dataItem.column_locked === "1") { // 固定列不能移动到非固定列的下方
                                        newIndex = Math.min(lockedCount - 1, index + 1);

                                    } else {
                                        newIndex = Math.min(personalGrid.dataSource.total() - 1, index + 1);
                                    }

                                    if (newIndex != index) {
                                        var data = personalGrid.dataSource.data();
                                        var downRow = data[newIndex];

                                        dataItem.set("column_order", newIndex + 1);
                                        data[newIndex] = dataItem;
                                        data[newIndex - 1] = downRow;
                                        downRow.set("column_order", newIndex);
                                    }
                                    else {
                                        if (newIndex === lockedCount - 1) {
                                            WindowUtil({
                                                'title': "向下移动列",
                                                "content": "<div class='kendo-del-message'>固定列不能移动到非固定列的下方</div>"
                                            });

                                        } else {
                                            WindowUtil({
                                                'title': "向下移动列",
                                                "content": "<div class='kendo-del-message'>已经移动到了底部</div>"
                                            });
                                        }
                                        return false;

                                    }
                                });
                            }
                        }
                    }
                }, {
                    name: personalBlockId + "_undo",
                    icon: "css:fa-ban",
                    text: "默认配置",
                    layout: ICON_AND_TEXT,
                    attributes: {
                        style: "float:left",
                        title: "默认配置"
                    },
                    click: function () {
                        // 数据库里 软删除 soft delete
                        each(personalGrid.getCheckedRows(), function (i, row) {
                            row.set("soft_delete", "1");
                        });
                        personalGrid.saveChanges();
                    }
                },
                    {
                        name: personalBlockId + "_redo",
                        icon: "css:fa-database",
                        text: "自定义配置",
                        layout: ICON_AND_TEXT,
                        attributes: {
                            style: "float:left",
                            title: "自定义配置"
                        },
                        click: function () {
                            // 数据库里 软删除 mark delete
                            each(personalGrid.getCheckedRows(), function (i, row) {
                                row.set("soft_delete", "0");
                            });

                            personalGrid.saveChanges();
                        }
                    }, {
                        name: personalBlockId + "_cancel",
                        icon: "css:fa-times-circle-o",
                        text: "取消",
                        layout: "3",
                        attributes: {
                            style: "float: right"
                        },
                        click: function () {
                            personalGrid.cancelChanges();
                        }
                    },
                    {
                        name: personalBlockId + "_refresh",
                        icon: "css:fa-refresh",
                        text: "保存并刷新",
                        layout: "3",
                        attributes: {
                            style: "float: right"
                        },
                        click: function () {
                            personalGrid.saveChanges();
                            window.location.reload();
                        }
                    }
                ]
            },
            eiInfo: gridPersonalInfo,
            url: IPLATUI.CONTEXT_PATH + "/service",
            serviceName: "EDFA60"
        });

        personalWindow = $("#ef_personal_window_" + options.blockId).kendoWindow({
            title: "自定义列信息",
            width: "80%",
            // height: "70%",
            position: {
                top: "10%",
                left: "10%"
            },
            visible: false,
            modal: true,
            actions: [
                "Close"
            ],
            animation: {
                close: {duration: 500},
                open: {duration: 500}
            }
        }).data("kendoWindow");

        return personalWindow;
    };

    // personalGrid.element.on("click", ".i-text-btn-sm", function (e) {
    //     var handlers = IPLAT.Util.unbindHandlers(personalGrid.dataSource, "change");
    //     var uid = $(this).parent().data("uid");
    //
    //     if ($(this).hasClass("personal-up")) { // 向上
    //         var dataItem = personalGrid.dataSource.getByUid(uid);
    //         var index = personalGrid.dataSource.indexOf(dataItem);
    //         var newIndex = Math.max(0, index - 1);
    //
    //         if (newIndex != index) {
    //             personalGrid.dataSource.remove(dataItem);
    //             personalGrid.dataSource.insert(newIndex, dataItem);
    //         }
    //
    //
    //     } else if ($(this).hasClass("personal-down")) { // 向下
    //         var dataItem = personalGrid.dataSource.getByUid(uid);
    //         var index = personalGrid.dataSource.indexOf(dataItem);
    //         var newIndex = Math.min(personalGrid.dataSource.total() - 1, index + 1);
    //
    //         if (newIndex != index) {
    //             personalGrid.dataSource.remove(dataItem);
    //             personalGrid.dataSource.insert(newIndex, dataItem);
    //         }
    //
    //     } else if ($(this).hasClass("personal-undo")) {
    //
    //     }
    //
    //     // IPLAT.Util.bindHandlers(personalGrid.dataSource, "change", handlers);
    //
    // });
})(window.jQuery);
/**
 * 构建工具栏和按钮
 */
;(function ($) {
    var EiConstant = IPLAT.EiConstant,
        EiInfo = IPLAT.EiInfo,
        WindowUtil = IPLAT.WindowUtil,
        TEXT = IPLATUI.Config.Layout.TEXT,
        ICON = IPLATUI.Config.Layout.ICON,
        ICON_AND_TEXT = IPLATUI.Config.Layout.ICON_AND_TEXT,
        gridDefaultButtons = [],

        NS = ".IPLAT",
        ON_DELETE = "onDelete",
        DELETE_ACTION = IPLAT.EFGrid.DELETE_ACTION, // 点击删除按钮时，记录删除操作

        isArray = $.isArray,
        each = $.each,
        extend = $.extend;

    function ismobile() {//移动端适配
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/(iPhone|iPod|Android|ios)/i) || ua.match(/MicroMessenger/i) == 'micromessenger') {
            return true;
        }
        else {
            return false;
        }
    }

    var flg = ismobile();
    /**
     * 初始化工具栏信息
     *
     * STEP1 处理buttons，包括 EDFA01注册的按钮，默认的按钮，js中定义的按钮
     * STEP2 处理Grid右侧Setting下拉菜单中的逻辑，包括：个性化显示列，导出数据等
     * STEP3 处理翻页条在Grid上方的逻辑
     *
     * @param options
     * @private
     */
    IPLAT.EFGrid._initToolbar = function (options) {
        var gridConfig = options.gridConfig,
            needAuth = options.needAuth;

        var toolbarConfig = extend(true, {
            "add": true,
            "cancel": true,
            "save": true,
            "delete": true
        }, options.toolbarConfig, gridConfig.toolbarConfig);

        delete gridConfig.toolbarConfig; // 去除页面上的toolbarConfig，防止被再次继承

        if (!isArray(toolbarConfig.buttons)) {
            toolbarConfig.buttons = [];
        }
        if (!isArray(toolbarConfig.default_layout)) {
            toolbarConfig.default_layout = [];
        }


        /*******************************************************
         *
         * STEP1    处理buttons，包括 EDFA01注册的按钮，默认的按钮
         *          js中定义的按钮
         *
         *******************************************************/

        // 1. 权限配置优先级最高;
        // 2. 判断IPLATUI中的配置; 在工具栏上追加按钮，覆盖原有的按钮功能
        // 3. 判断EFGrid Tag中的配置;

        if (needAuth) {
            gridDefaultButtons = [];
            // __eiInfo 当前页面上的EiInfo
            // TODO: needAuth = false的时候，注册的自定义按钮iframe GRID嵌入等隐患

            var btnDescInfo, efFormButtonDesc = __eiInfo.getAttr()[EiConstant.EF_FORM_BUTTON_DESC];

            if (IPLAT.isString(efFormButtonDesc)) {
                btnDescInfo = EiInfo.parseJSONString(efFormButtonDesc);
            } else if ($.isPlainObject(efFormButtonDesc)) {
                btnDescInfo = EiInfo.parseJSONObject(efFormButtonDesc);
            }

            // var btnDescInfo = EiInfo.parseJSONString(__eiInfo.getAttr()[EiConstant.EF_FORM_BUTTON_DESC]);

            var filteredBlockIds = _.filter(_.keys(btnDescInfo.getBlocks()), function (gridId) {
                // 后台GRID信息注册不规范，导致多个block出现
                return gridId.trim().toUpperCase() === "GRID:" + options.gridId.toUpperCase();
            });

            var customButtons = [], // 后台注册的自定义按钮
                gridButtonRegex = /^((INSERT($|_\d+$))|(SAVE($|_\d+$))|(CANCEL($|_\d+$))|(DELETE($|_\d+$)))/;
            // EFGridButtonNames = ["INSERT", "SAVE", "CANCEL", "DELETE", "SETTING"];

            var registerButtonConfig = {};

            each(filteredBlockIds, function (index, blockId) {
                var gridBlock = btnDescInfo.getBlock(blockId);

                for (var i = 0; i < gridBlock.getRows().length; i++) {
                    var buttonId = gridBlock.getCell(i, "button_ename").toString().toUpperCase();

                    if (gridBlock.getCell(i, "button_status").toString() === "1") {
                        // 只维护有权限的按钮信息
                        if (gridButtonRegex.test(buttonId)) {
                            var buttonName = buttonId.split('_')[0]; // INSERT_1
                            buttonName = buttonName === "INSERT" ? "add" : buttonName.toLowerCase();
                            registerButtonConfig[buttonName] = true;

                            gridDefaultButtons.push({
                                name: buttonName,
                                text: gridBlock.getCell(i, "button_cname").toString(),
                                icon: gridBlock.getCell(i, "uri").toString(),
                                layout: gridBlock.getCell(i, "layout").toString()
                            });

                            // toolbarConfig['default_layout'][buttonName] = gridBlock.getCell(i, "layout").toString();
                        } else { // 自定义的按钮
                            customButtons.push({
                                name: buttonId,
                                text: gridBlock.getCell(i, "button_cname").toString(),
                                icon: gridBlock.getCell(i, "uri").toString(),
                                layout: gridBlock.getCell(i, "layout").toString()
                            });
                        }
                    }
                }
            });

            toolbarConfig = _.mapObject(toolbarConfig, function (value, buttonId) {
                if (_.indexOf(_.keys(registerButtonConfig), buttonId) < 0 &&
                    _.indexOf(["add", "cancel", "save", "delete"], buttonId) > -1) {
                    // Grid的按钮没有注册 永远不会显示
                    return false;
                }
                return value;
            });

            // 注册的按钮在自定义按钮的前面
            toolbarConfig.buttons = customButtons.concat(toolbarConfig.buttons);
        }

        // 此时 toolbarConfig.buttons数组还未创建 toolbarConfig中只有权限信息
        var blockId = options.blockId,
            gridId = options.gridId,
            personalWindowId = "#ef_personal_window_" + blockId,
            kendoToolBarItems = []; // kendoToolBar组件需要的items参数

        // kendo默认的增删改按钮 FIXME name和id混淆使用了
        var defaultToolbar = [
            {
                name: "add",
                text: "新增",
                icon: "css:k-add",
                layout: ICON_AND_TEXT
            },

            {
                name: "save-changes",
                text: "保存",
                icon: "css:k-update",
                layout: ICON_AND_TEXT
            },

            {
                name: "cancel-changes",
                text: "取消",
                icon: "css:k-cancel",
                layout: ICON_AND_TEXT
            },

            {
                name: "delete",
                text: "删除",
                icon: "css:k-delete",
                layout: ICON_AND_TEXT,
                click: function (e) {
                    var gridInstance = $("#" + gridId).data("kendoGrid");

                    var dataSource = gridInstance.dataSource,
                        models = [];

                    if (gridInstance.trigger(ON_DELETE + NS, {event: e})) {
                        return;
                    }

                    each(gridInstance.getCheckedRows(), function (i, model) {
                        models.push(model);
                    });


                    var deleteHTML = kendo.template($("#del-template").html())(
                        {message: "确认删除此数据么?", ok: '确定', cancel: '取消'}
                    );

                    if (models.length > 0) {
                        WindowUtil({
                            title: "删除",
                            content: deleteHTML,
                            ok: function () {
                                var that = this;

                                // 存储当前的删除操作
                                gridInstance._action = DELETE_ACTION;

                                // 仅在删除失败的场景下用于恢复，业务上不能直接使用
                                gridInstance._deleteRows = gridInstance.getCheckedRowsIndex();

                                // 清空选中的列
                                for (var i = 0; i < models.length; i++) {
                                    var index = _.indexOf(gridInstance._checkedRows, models[i].uid);
                                    gridInstance._checkedRows.splice(index, 1);
                                }

                                // Grid暂不刷新，成功或者失败的回调中再刷新
                                gridInstance.removeRows(models, false);

                                dataSource.sync();

                                that.data("kendoWindow").close();
                            },
                            cancel: function () {
                                var that = this;
                                that.data("kendoWindow").close();
                            }
                        });
                    } else {
                        WindowUtil({
                            'title': "删除",
                            "content": "<div class='kendo-del-message'>没有选中的行</div>"
                        });
                    }
                }
            }
        ];

        // 防止js中自定义的按钮覆盖了grid 默认的4个按钮
        var _configButton = function (i, buttonName) {
            var button = defaultToolbar[i];

            if (isArray(toolbarConfig.buttons)) {
                var index = _.findIndex(toolbarConfig.buttons, function (e) {
                    return e.name === buttonName;
                });

                if (index > -1) {
                    button = extend(button,
                        toolbarConfig.buttons[index]
                    );
                    toolbarConfig.buttons.splice(index, 1);
                }
            }
            return button;
        };

        // 平台使用的按钮对象 非kendoToolBar所需的items
        var toolbarButtons = [];

        // 读取toolbarConfig中Grid的默认四个按钮的信息
        each(["add", "save-changes", "cancel-changes", "delete"], function (i, buttonName) {
            var buttonId = buttonName.split("-")[0];
            if (toolbarConfig[buttonId]) {
                var registerBtn = _.find(gridDefaultButtons, {name: buttonId}),
                    defaultBtn = _configButton(i, buttonName); // 去除buttons数组中和默认按钮name重复的元素
                if (registerBtn) {
                    if(flg){
                        toolbarButtons.push(defaultBtn);
                    }else {
                        registerBtn = extend({}, defaultToolbar[i], registerBtn);
                        registerBtn.name = buttonName;
                        toolbarButtons.push(registerBtn);
                    }
                } else {
                    toolbarButtons.push(defaultBtn);
                }

            }
        });

        if (isArray(toolbarConfig.buttons)) {
            toolbarButtons = toolbarButtons.concat(toolbarConfig.buttons);
        }

        toolbarConfig.buttons = toolbarButtons;
        var menuButtons=[]
        // 按钮图标文字显示控制 并转换成kendoToolBar所需的items
        each(toolbarButtons, function (index, buttonOptions) {
            var btnLayout = buttonOptions['layout'] || TEXT,
                btnSpan = "",
                btnText = "<span>" + (buttonOptions['text'] || "") + "</span>";

            var btnClass = IPLAT.Util.parseBtnClass(buttonOptions['icon']),
                iconCss = btnClass.css,
                btnCss = btnClass.btnClass;

            if (btnLayout !== TEXT) { // 显示图标
                if (btnLayout === ICON) {
                    iconCss = iconCss + " i-btn-only-icon";
                    btnText = "";
                }
                btnSpan = "<span class='" + iconCss + "'></span>";
            }

            var button = {
                text:btnText,
                type: "button",
                attributes: extend(buttonOptions["attributes"], {
                    "class": "kendo-xplat-" + buttonOptions.name + " xplat-float-right",
                    "id": buttonOptions.name
                }),
                template: kendo.template("<button class='i-btn-lg " + btnCss +
                    " k-grid-" + buttonOptions.name + "' type='button'>" + btnSpan + btnText + "</button>")
            };
            if(flg){
                btnSpan= "<span class='k-icon " + buttonOptions.icon.slice(4)+ "'></span>";
                if (buttonOptions.icon.slice(4) == "" ){
                    btnSpan= "<span class='sl-icon fa fa-map-o'></span>";
                }
                if(buttonOptions.icon.length==1){
                    btnSpan= "<span class='fa fa-file-o' style='padding-right: 4px'></span>";
                }
                button.attributes= extend(buttonOptions["attributes"], {
                    "class": "kendo-xplat-" + buttonOptions.name + " xplat-float-right",
                    "id": buttonOptions.name,
                    "style":"min-width: 24px"
                });
                button.template= kendo.template("<button class='i-btn-lg " + btnCss +
                    " k-grid-" + buttonOptions.name + "' type='button' style='min-width:24px; padding:2px 0px 2px 5px;'>" + btnSpan  + "</button>");
            };
            kendoToolBarItems.push(button);
        });

        /*******************************************************
         *
         * STEP2    处理Grid右侧Setting下拉菜单中的逻辑，包括：
         *          个性化显示列，导出数据等
         *
         *******************************************************/

        var _buildGridSettings = function (options) {
            var defaultActions = [];
            if (options.personal) { // 自定义列的顺序和显示
                defaultActions.push({
                    name: "personalGrid_" + blockId,
                    text: "自定义数据列",
                    click: function () {
                        var personalWindow = $(personalWindowId).data("kendoWindow");
                        personalWindow.center().open();
                    }
                });
            }
            // grid的配置项覆盖config配置项
            var tempExportGrid = extend({}, options, options.gridConfig);
            var exportGrid = tempExportGrid.exportGrid;


            if (exportGrid) { // 开启了grid的导出功能
                var exportOptions = {};
                var exportEiInfo = new EiInfo("");

                exportOptions["frontExport"] = true;
                exportOptions["exportFileType"] = "xls";
                exportOptions["exportBlockId"] = blockId;
                exportOptions["exportFileName"] = exportGrid.exportFileName || blockId;

                if ($.isPlainObject(exportGrid)) { // Grid导出的配置项解析
                    exportOptions["exportFileType"] =
                        exportGrid.exportFileType || "xls";

                    exportOptions["exportBlockId"] =
                        exportGrid.exportBlockId || blockId;

                    if (isAvailable(exportGrid.exportServiceName) && isAvailable(exportGrid.exportMethodName)) {
                        // 使用后台服务，生成要导出的EiInfo
                        exportOptions["exportServiceName"] = exportGrid.exportServiceName;
                        exportOptions["exportMethodName"] = exportGrid.exportMethodName;

                        exportOptions["frontExport"] = false; // 后台导出的标志
                    }
                }

                defaultActions.push({
                    name: "exportGrid_" + blockId,
                    text: "导出数据",
                    click: function () {
                        var gridInstance = $("#" + gridId).data("kendoGrid");
                        var doExport = true;

                        if ($.isFunction(exportGrid.beforeExport)) { // 导出数据前的事件
                            doExport = exportGrid.beforeExport(gridInstance); // 业务上判断是否导出
                        }

                        if (doExport) { // 执行导出逻辑
                            // 配置导出文件名
                            if ($.isFunction(exportGrid.exportFileName)) {
                                // 注意函数每次点击都会被调用，例如导出文件名需要设置时间戳
                                exportOptions["exportFileName"] = exportGrid.exportFileName(gridInstance);
                            }

                            if (exportOptions["frontExport"]) {

                                // 前端导出
                                if ($.isFunction(exportGrid.exportEiInfo)) {
                                    // 注意exportEiInfo函数每次点击都会被调用
                                    exportEiInfo = exportGrid.exportEiInfo(gridInstance);

                                } else if (IPLAT.isEiInfo(exportGrid.exportEiInfo)) {
                                    exportEiInfo = exportGrid.exportEiInfo;
                                } else {
                                    // 默认为导出当前页，前端导出
                                    // TODO: 1.指明导出的列；2.指明不导出的列；3.导出显示的值（例如下拉选项的中文内容）
                                    // exportEiInfo = gridInstance.wrapEiBlock(null);
                                    exportEiInfo = gridInstance.getDisplayEiInfo(exportOptions["exportBlockId"]);
                                }

                                // 根据指明的导出列/不导出列 过滤exportEiInfo
                                var existColumns = _.keys(exportEiInfo.getBlock(blockId).getBlockMeta().getMetas()),
                                    exportColumns = exportGrid['exportColumns'] || existColumns,
                                    unExportColumns = exportGrid['unExportColumns'] || [];

                                var removedColumns = _.filter(existColumns, function (existColumn) {
                                    return exportColumns.indexOf(existColumn) < 0;
                                }).concat(
                                    _.filter(unExportColumns, function (unExportColumn) {
                                        return existColumns.indexOf(unExportColumn) > -1;
                                    }));

                                if (removedColumns.length > 0) {
                                    // 过滤掉不需要导出的列
                                    exportEiInfo.getBlock(blockId).removeColumns(removedColumns);
                                }

                                exportOptions["exportEiInfo"] = exportEiInfo.toJSONString();
                            } else {

                                // 后端导出
                                // 后台导出时，不使用默认的查询条件，业务上提供自定义的查询条件
                                if ($.isFunction(exportGrid.queryEiInfo)) {
                                    exportOptions["queryInfo"] = exportGrid.queryEiInfo(gridInstance);
                                } else if (IPLAT.isEiInfo(exportGrid.queryEiInfo)) {
                                    exportOptions["queryInfo"] = exportGrid.queryEiInfo;
                                } else {
                                    // 后台导出时，使用默认的查询条件
                                    exportOptions["queryInfo"] = gridInstance.getQueryInfo();
                                }

                                if (IPLAT.isEiInfo(exportOptions["queryInfo"])) {
                                    exportOptions["queryInfo"] = exportOptions["queryInfo"].toJSONString();
                                }
                            }

                            IPLAT.Util.exportGrid(exportOptions);
                        } // doExport if结束
                    } // click函数结束
                });

            }

            return defaultActions;
        };

        var settingActions = _buildGridSettings(options);

        if (!isArray(toolbarConfig["setting"])) {
            toolbarConfig["setting"] = [];
        }

        settingActions = settingActions.concat(toolbarConfig["setting"]);
        toolbarConfig["settingActions"] = settingActions;

        if (settingActions.length > 0) { // 处理设置信息，grid右侧的下拉菜单
            kendoToolBarItems.push({
                type: "buttonGroup",
                buttons: settingActions,
                overflow: "always" // kendo toolbar anchor dropdown buttons
            });
        }

        toolbarConfig["kendoToolBarItems"] = kendoToolBarItems;


        /*******************************************************
         *
         * STEP3    处理翻页条在Grid上方的逻辑
         *
         *******************************************************/

        if (IPLAT.EFGrid._hasToolbarPager(options)) {

            if (IPLAT.EFGrid._hasToolbarButtons(toolbarConfig) && options.showCount) {
                // 有ToolBarButtons且从服务端查询总数时的翻页展示处理

                extend(true, options.pageable, {
                    messages: {
                        "display": "共 {2} 条"
                    }
                });
            }
        }

        options.toolbarConfig = toolbarConfig;

        return toolbarConfig;
    };


    // 创建操作按钮工具栏
    IPLAT.EFGrid._createToolBar = function (options, gridInstance) {
        var blockId = options.blockId,
            kendoToolBarItems = options.toolbarConfig["kendoToolBarItems"],
            toolbarId = '#ef_grid_toolbar_' + blockId,
            $grid = gridInstance.element;

        $grid.find(toolbarId).kendoToolBar({
            items: kendoToolBarItems
        });

        // 工具条渲染结束后 绑定按钮的事件
        var toolbarButtons = options.toolbarConfig["buttons"];

        each(toolbarButtons, function (index, buttonOptions) {
            if ($.isFunction(buttonOptions.click)) {
                $(toolbarId).on("click", ".kendo-xplat-" + buttonOptions.name, buttonOptions.click);
            }
        });

        if (IPLAT.EFGrid._hasToolbarSettings(options.toolbarConfig)) {
            $(toolbarId).addClass("k-iplat-setting-open");
        }

        $(toolbarId).on("click.IPLAT", '.k-grid-cancel-changes', function () {
            // 点击cancel-changes按钮，会更改所有model（tr）的uid
            gridInstance._checkedRows = [];
        });
    };

})(window.jQuery);
(function ($) {
    var Class = kendo.Class,
        ajaxEi = IPLAT.ajaxEi,
        EiConstant = IPLAT.EiConstant,
        EiInfo = IPLAT.EiInfo,
        EiBlock = IPLAT.EiBlock,
        htmlDecode = IPLAT.htmlDecode,
        buildAjaxOption = IPLAT.Util.buildAjaxOption,

        WindowUtil = IPLAT.WindowUtil,
        NotificationUtil = IPLAT.NotificationUtil,
        Notification = IPLAT.Notification,

        NS = ".IPLAT",

        CREATE_ACTION = IPLAT.EFGrid.CREATE_ACTION,
        READ_ACTION = IPLAT.EFGrid.READ_ACTION,
        UPDATE_ACTION = IPLAT.EFGrid.UPDATE_ACTION,
        DELETE_ACTION = IPLAT.EFGrid.DELETE_ACTION, // 点击删除按钮时，记录删除操作

        BEFORE_ADD = "beforeAdd", // copyAdd
        ON_ADD = "onAdd", // models已经准备好
        AFTER_ADD = "afterAdd", // models已经准备好
        TD_VALIDATOR_CLASS = 'td-validator',
        TD_ERROR_MSG = 'errorMsg',

        ON_SAVE = "onSave",
        SAVECHANGES = "saveChanges", // onSave对应的kendo原生事件
        ON_CANCEL = "onCancel",
        ON_DELETE = "onDelete",

        ON_SUCCESS = "onSuccess",
        ON_FAIL = "onFail",

        BEFORE_REQUEST = "beforeRequest",

        BEFORE_EDIT = "beforeEdit",
        AFTER_EDIT = "afterEdit",
        ON_CHECKROW = "onCheckRow",
        ON_CHECK_ALLROWS = "onCheckAllRows",
        ON_CELLCLICK = "onCellClick",
        ON_ROWCLICK = "onRowClick",
        ON_ROWDBLCLICK = "onRowDblClick",
        LOADCOMPLETE = "loadComplete",
        GRID_CELL = "td[role='gridcell']",

        // 动态渲染列的标记
        DYNAMIC_COLUMN = '$dynamic$',

        CSRF_HEADER = {},
        AJAX_OPTIONS = {
            type: 'POST',
            dataType: "json",
            contentType: "application/json",
            headers: CSRF_HEADER
        },
        personalInfo = new EiInfo("personalInfo"),

        COLUMN_TYPE = ['string', 'date', 'datetime', 'enums'],
        ENCODED = IPLATUI.Config.EFGrid.encoded,
        MAX_COUNT = IPLATUI.Config.EFGrid.MAX_COUNT,
        QUERY_ALL = IPLATUI.Config.EFGrid.QUERY_ALL,
        BOTTOM_BORDER = IPLAT.ColorBox.GRID_BOTTOM_BORDER,
        BOTTOM_BORDER_HOVER = IPLAT.ColorBox.GRID_BOTTOM_BORDER_HOVER,
        INVALID_COLOR = IPLAT.ColorBox.INVALID_COLOR,
        DEFAULT_TOOLTIP_WIDTH = 450,
        DEFAULT_ERROR_TOOLTIP_WIDTH = 100,
        gridDefaults,
        isArray = $.isArray,
        isPlainObject = $.isPlainObject,
        isFunction = $.isFunction,
        isString = _.isString,
        each = $.each,
        keys = _.keys,
        find = _.find,
        extend = $.extend,
        autoFitFlag = true;

    function GridSet(){
        /**
                   * 集合元素的容器，以对象来表示
                   * @type {Object}
                   */
        var items = {};/**
                  * 检测集合内是否有某个元素
                  * @param {Any} value  要检测的元素
                  * @return {Boolean}    如果有，返回true
                  */
        this.has = function(value) {
            // hasOwnProperty的问题在于
            // 它是一个方法，所以可能会被覆写
            return items.hasOwnProperty(value)
        };/**
                      * 给集合内添加某个元素
                      * @param {Any} value 要被添加的元素
                      * @return {Boolean}    添加成功返回True。
                      */
        this.add = function(value) {
            //先检测元素是否存在。
            if (!this.has(value)) {
                items[value] = value;
                return true;
            }
            //如果元素已存在则返回false
            return false;
        };

        this.valuesLegacy = function() {
            var keys = [];
            for (var key in items) {
                keys.push(key)
            }
            return keys;
        };
    }

    function GridMap() {
        this.elements = [];
        //获取Map元素个数
        this.size = function () {
            return this.elements.length;
        },
            //向Map中增加元素（key, value) 
            this.put = function (_key, _value) {
                if (this.containsKey(_key) == true) {
                    if (this.containsValue(_value)) {
                        if (this.remove(_key) == true) {
                            this.elements.push({
                                key: _key,
                                value: _value
                            });
                        }
                    } else {
                        this.elements.push({
                            key: _key,
                            value: _value
                        });
                    }
                } else {
                    this.elements.push({
                        key: _key,
                        value: _value
                    });
                }
            },
            this.set = this.put,
            this.containsKey = function (_key) {
                var bln = false;
                try {
                    for (i = 0; i < this.elements.length; i++) {
                        if (this.elements[i].key == _key) {
                            bln = true;
                        }
                    }
                } catch (e) {
                    bln = false;
                }
                return bln;
            },
            // 判断Map中是否含有指定value的元素
            this.containsValue = function(_value) {
                var bln = false;
                try {
                    for (i = 0; i < this.elements.length; i++) {
                        if (this.elements[i].value == _value) {
                            bln = true;
                        }
                    }
                } catch (e) {
                    bln = false;
                }
                return bln;
            },

            //获取指定key的元素值value，失败返回null
            this.get = function (_key) {
                try {
                    for (i = 0; i < this.elements.length; i++) {
                        if (this.elements[i].key == _key) {
                            return this.elements[i].value;
                        }
                    }
                } catch (e) {
                    return null;
                }
            }


    }

    // grid列上的查询条件
    kendo.ui.FilterMenu.fn.options.operators.string = {
        contains: "包含",
        eq: "等于",
        neq: "不等于"

    };

    //过滤model数据列filter方法
    var iplatFieldFilter = function (field) {
        return this.hasOwnProperty(field) && field !== '_handlers' && field !== '_events'
            && !(this.idField !== 'id' && field === 'id') && field !== 'dirty' && field !== '_accessors';
    };

    // EFGrid的全局配置
    gridDefaults = IPLATUI.Config.EFGrid;

    /**
     * EFGrid封装前端请求数据，获取服务端数据的接口
     */
    var AbstractTransport = Class.extend({
        init: function (options) {
            var that = this;
            that.options = options;

            that.CREATE = options["insertMethod"] || "insert";
            that.READ = options["queryMethod"] || "query";
            that.UPDATE = options["updateMethod"] || "update";
            that.DESTROY = options["deleteMethod"] || "delete";

            that.serviceName = options[EiConstant.SERVICE_NAME] || options.eiInfo.get(EiConstant.SERVICE_NAME);
            that.methodName = options["queryMethod"] || options["methodName"] || "query";
            that.efSecurityToken = $("#efSecurityToken").val();
            that.postEiInfo = new EiInfo();

            CSRF_HEADER = { // 请求前加入header
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('efSecurityToken', that.efSecurityToken);
                }
            };

        },

        // 设置自定义的查询条件
        _postQuery: function () {
            var that = this,
                postQuery = false;
            var kendoGid = $("#" + that.options.gridId).data("kendoGrid");

            if (isAvailable(kendoGid) && IPLAT.isEiInfo(kendoGid._postQueryInfo)) {
                // Grid渲染完成后，调用postQuery接口进行自定义查询
                that.postEiInfo = kendoGid._postQueryInfo;
                postQuery = true;

                // 防止查询条件中无初始的resultBlock，resultBlock的attr中也包含查询条件
                that._buildPostEiBlock();

                // 自定义查询结束后，清楚自定义查询的标记
                kendoGid._postQueryInfo = null;
            }

            return postQuery;
        },

        _buildPostEiBlock: function () {
            var that = this,
                blockId = that.options.blockId,
                kendoGid = $("#" + that.options.gridId).data("kendoGrid");

            // FIXME 注意评审 result block的元数据


            var eiBlock;
            if (isAvailable(kendoGid) && isAvailable(kendoGid.eiBlock)) {
                eiBlock = kendoGid.eiBlock;
            } else {
                eiBlock = that.options.eiBlock;
            }

            var postEiBlock = that.postEiInfo.getBlock(blockId);

            if (!isAvailable(postEiBlock)) {
                postEiBlock = new EiBlock(eiBlock.getBlockMeta());
                that.postEiInfo.addBlock(postEiBlock);
            }

            // 防止 eiBlock 中 attr 被覆盖
            postEiBlock.setAttr(extend({}, eiBlock.getAttr()));
        },

        _buildFilter: function (params) {
            var that = this,
                blockId = that.options.blockId,

                // JS中可以通过配置 query 来配置查询的EiInfo
                gridConfig = that.options.gridConfig,
                _options = extend({}, that.options, gridConfig),
                query = _options.query,
                postEiInfo;


            if (!that._postQuery()) {
                // 每次查询都会检查初始的query设置

                if (isFunction(query)) { // 通过函数设置查询条件 return EiInfo
                    postEiInfo = query.call(that, params);

                } else if (IPLAT.isEiBlock(query)) { // 直接指明查询条件的EiBlock
                    postEiInfo = new EiInfo("");
                    postEiInfo.addBlock(query);

                } else if (IPLAT.isEiInfo(query)) { // 直接指明EiInfo
                    postEiInfo = query;

                } else if (IPLAT.isString(query) && $(query).length > 0) {
                    // 通过String选择器 DOM jQuery 序列化出 查询条件EiInfo
                    postEiInfo = EiInfo.build($(query));

                } else { // 默认是序列化整个页面
                    postEiInfo = EiInfo.build(document.body);
                }

                if (IPLAT.isEiInfo(postEiInfo)) {
                    that.postEiInfo = postEiInfo; // 解析页面上的查询条件
                } else {
                    that.postEiInfo = new EiInfo();
                }

                that._buildPostEiBlock();

                // dataSource.query 条件处理
                IPLAT.Util.filterAdapter(params.filter, that.postEiInfo);

                // build orderBy
                // 1. 后端排序
                // 2. 多列组合排序
                // 3. join的列SQL语法的问题

                // t { field: "age", dir: "desc" } is sent as:
                // sort[0][field]: age
                // sort[0][dir]: desc
                var postEiBlock = that.postEiInfo.getBlock(blockId);

                if (isArray(params.sort)) {
                    each(params.sort, function (index, item) {
                        var field = item["field"],
                            alias;

                        // 判断当前列是否存在别名
                        var aliasColumn = _.find(_options.columns, function (e) {
                            alias = e["alias"];
                            return e["field"] === field && isAvailable(alias);
                        });

                        if (isAvailable(aliasColumn)) {
                            item["field"] = aliasColumn["alias"];
                        }
                    });
                }

                postEiBlock.set("orderBy", IPLAT.Util.sortAdapter(params.sort));
            }
        },

        _buildModels: function (params, operation) {
            var that = this,
                pageSize,
                skip,
                options = that.options,
                modelId = options.modelId,
                blockId = options.blockId,
                gridId = options.gridId,
                postEiBlock = that.postEiInfo.getBlock(blockId),
                kendoGrid = $("#" + gridId).data('kendoGrid'),
                showCount = IPLAT.isKendoGrid(kendoGrid) ? kendoGrid.options.showCount : options.showCount;

            if (operation === READ_ACTION) {
                that.methodName = that.READ;
                pageSize = params.pageSize || 10;
                if (pageSize > MAX_COUNT) { // TODO: 超过允许的最大查询
                    pageSize = QUERY_ALL;
                }
                skip = params.skip || 0;

                postEiBlock.set(EiConstant.LIMIT, pageSize);
                postEiBlock.set(EiConstant.OFFSET, skip);

                if (!!showCount) {
                    postEiBlock.set(EiConstant.SHOW_COUNT, "true");
                } else {
                    postEiBlock.set(EiConstant.SHOW_COUNT, "false");
                }
            } else {
                if (operation === CREATE_ACTION) {
                    that.methodName = that.CREATE;

                } else if (operation === UPDATE_ACTION) {
                    that.methodName = that.UPDATE;

                } else if (operation === DELETE_ACTION) {
                    that.methodName = that.DESTROY;
                }

                var checkedRows = kendoGrid.getCheckedRows();

                // 提交勾选的数据，或者提示存在修改了，但没有勾选的数据，不会被提交
                var _exist = function (items, dataItem) {
                    return !!_.find(items, function (item) {
                        return dataItem["uid"] === item["uid"];
                        //return dataItem[modelId] === item[modelId];
                        // var flag = true
                        //
                        // for (var key in dataItem) {
                        //     if (dataItem[key] !== item[key]) {
                        //         flag = false;
                        //     }
                        // }
                        //
                        // return flag;
                    });
                };

                var submitChecked = true; // 默认提交勾选的行，执行_exist检查
                if (isPlainObject(options.saveOptions)) {
                    // personal grid 控制提交的数据行
                    submitChecked = options.saveOptions[operation];
                } else {
                    if (operation === "destroy") {
                        submitChecked = false; // TODO 删除时为什么不检查checked Rows
                    }
                }

                _mapModels(postEiBlock, options.columns, params.models, {
                    operation: operation,
                    submitChecked: submitChecked,
                    _exist: _exist,
                    checkedRows: checkedRows

                });
            }
        },

        buildTransport: function () {
            var that = this;

            return extend(that._buildURL(), {
                parameterMap: function (params, operation) {
                    that._buildFilter(params);
                    that._buildModels(params, operation);

                    return that._buildRequest();
                }
            });
        }
    });

    /**
     * 不再使用EiService的提交方式
     * @deprecated
     */
    var EiServiceTransport = AbstractTransport.extend({
        _buildURL: function () {
            var transportDefaults = buildAjaxOption();
            var that = this,
                url = that.options.url;

            return extend(true, transportDefaults, {
                read: {url: url},
                create: {url: url},
                update: {url: url},
                destroy: {url: url}
            });
        },
        _buildRequest: function () {
            var that = this,
                postEiInfo = that.postEiInfo,
                efSecurityToken = that.efSecurityToken,
                serviceName = that.serviceName,
                methodName = that.methodName;

            return {
                service: serviceName,
                method: methodName,
                eiinfo: postEiInfo.toJSONString(), // 完整的EFColumn元数据信息
                efSecurityToken: efSecurityToken
            };
        }
    });

    /**
     * Restful风格的提交方式
     */
    var RestfulTransport = AbstractTransport.extend({
        _buildURL: function () {
            var that = this,
                serviceName = that.serviceName,
                transportDefaults = buildAjaxOption({contentType: IPLAT.AJAX.ContentType.JSON}),
                transport,
                useFunction = false,
                url = that.options.url,
                readURL,
                createURL,
                updateURL,
                destroyURL;

            readURL = url + "/" + serviceName + "/" + that.READ;
            createURL = url + "/" + serviceName + "/" + that.CREATE;
            updateURL = url + "/" + serviceName + "/" + that.UPDATE;
            destroyURL = url + "/" + serviceName + "/" + that.DESTROY;

            transport = {
                read: extend({url: readURL}, CSRF_HEADER),
                create: extend({url: createURL}, CSRF_HEADER),
                update: extend({url: updateURL}, CSRF_HEADER),
                destroy: extend({url: destroyURL}, CSRF_HEADER)
            };

            transport = extend(true, transportDefaults, transport);


            if (isFunction(that.READ)) {
                transport.read = that.READ;
                useFunction = true;
            }

            if (isFunction(that.CREATE)) {
                transport.create = that.CREATE;
                useFunction = true;
            }

            if (isFunction(that.UPDATE)) {
                transport.update = that.UPDATE;
                useFunction = true;
            }

            if (isFunction(that.DESTROY)) {
                transport.destroy = that.DESTROY;
                useFunction = true;
            }

            if (useFunction) {
                transport = IPLAT.Util.buildCRUDFunction(transport, that);
            }

            return transport;
        },

        _buildRequest: function () {
            var that = this;
            return that.postEiInfo.toJSONString();
        }
    });

    /**
     * 封装了EiService和REST两种请求格式的工厂类
     */
    var TransportFactory = (function () {
        var transportTypes = {
            REST: RestfulTransport,
            EI: EiServiceTransport
        };

        return {
            getTransport: function (type, options) {
                var TransportBuilder = transportTypes[type],
                    builder = new TransportBuilder(options);

                return builder.buildTransport();
            },

            registerTransport: function (type, builder) {
                if (builder.prototype instanceof AbstractTransport) {
                    transportTypes[type] = builder;
                }
                return TransportFactory;
            }
        }
    })();

    /**
     * EFColumn列，自定义列的配置覆盖处理
     * @param {Array} preColumns preColumns是优先级高的数组，会覆盖baseColumns中的同名（field）元素，
     * preColumns中其他的（不存在于baseColumns中的）元素，默认追加到baseColumns末尾，
     * 如果类配置了属性position为front，则将该列放到baseColumns之前。
     *
     * @param {Array} baseColumns 将被覆盖的列
     * @return {Array} 被覆盖的列baseColumns
     * @private
     */
    function _extendColumns(preColumns, baseColumns) {
        if (isArray(preColumns) && preColumns.length > 0) {
            each(baseColumns, function (i, baseColumn) {
                each(preColumns, function (j, preColumn) {
                    if (baseColumn.field === preColumn.field) {
                        extend(true, baseColumns[i], preColumn); // 列名相同时，原生配置覆盖后台配置
                        preColumns[j] = {}; // 标记清除原生配置
                    }
                });
            });

            // 处理原生配置中不存在于EiBlock中的列，默认在列的最后。例如，自定义的按钮列。
            var frontColumns = [];
            var groupColumns = {};
            var groupedColumns = new GridSet();
            each(preColumns, function (i, column) {
                if (column.field) {
                    if (column.position === "front") {
                        frontColumns.push(column);
                    } else {
                        baseColumns.push(column);
                    }
                }
                //找出嵌套列
                if(column.columns){
                    findGroupColumns(groupColumns,column,groupedColumns);
                }
            });
            baseColumns = frontColumns.concat(baseColumns);
            //处理baseColumns被嵌套的重复的列
            var finalColumns = [];
            each(baseColumns, function (i, column) {
                if (column.field) {
                    //如果被分组列存在于第一层的column中，删除它以免造成重复
                    if (!groupedColumns.has(column.field)) {
                        finalColumns.push(column);
                    }
                }
            });
            baseColumns = finalColumns;
        }
        return baseColumns;
    }

    /**
     * 构造列信息，分为3个阶段
     * 1. 解析EiBlock， Tag ，JS中的属性配置
     * 2. 解析出校验等规则信息
     * 3. 处理编辑问题
     * @param options
     * @private
     */
    function _buildColumns(options) {
        var eiBlock = options.eiBlock,
            tagId = options.tagId,
            gridConfig = options.gridConfig, // 页面JS中的原生配置
            autoDraw = options.autoDraw || "yes",
            kendoColumns = [],
            modelId = "",
            modelFields = {},
            tagColumns = isPlainObject(IPLAT.EFGrid[tagId]) ? IPLAT.EFGrid[tagId].columns : [];

        if (gridConfig.rowNo !== undefined) { // 显示行号，gridConfig的优先级高
            options.rowNo = gridConfig.rowNo;
        }

        if (autoDraw === "no" || autoDraw === "false") {
            // 完全根据EFColumn Tag渲染
            // TODO: Tag属性和java js的不一致性处理, Tag上的动态属性设置
            kendoColumns = tagColumns; // 已经是kendo接受的格式，转换在EFColumn Tag中进行
            // 使用iplatWidth=true来标记自定义width的column
            each(kendoColumns, function (i, column) {
                if (!!column.width) {
                    column['iplatWidth'] = true;
                }
            });

        } else {
            // EiColumn.java, EFColumn.tag, js的属性映射处理
            // 原则上三者应该同步，本质上是EF的属性和功能映射到KendoUI
            // 处理列的显示和校验等信息，分析出schema.model所需的信息
            var blockMeta = eiBlock.getBlockMeta().getMetas(); // [EiColumn]

            kendoColumns = _.chain(blockMeta).map(function (eiColumn) {
                var columnJSON = eiColumn.toJSON(); // EiColumn完整的属性信息，包括java中动态set的属性

                // 数据类型的处理 "N", "C"， 数字默认居右， 数据类型包括B，N，C，D，E
                // 数字列的内容默认居右 这部分逻辑在 _buildColumnTemplate中处理了
                // if (columnJSON.type === "N") {
                //     align = "right";
                // }

                // 有定义列的方向，就使用默认
                var align = columnJSON.align;

                columnJSON.valueType = columnJSON.type; // schema.model里面的type信息

                columnJSON.editType = columnJSON.editor; // 单元格编辑时的展示类型

                delete columnJSON.editor; // 和kendo自定义的editor冲突

                if (columnJSON.readonly) { // 只读列
                    if (_.indexOf(IPLAT.EFGrid[tagId].readonlyColumns, columnJSON.name) < 0) {
                        // 通过EiColumn.java 设置的readonly处理
                        IPLAT.EFGrid[tagId].readonlyColumns.push(columnJSON.name);
                    }
                }

                // EiColumn Meta的信息的优先级低
                var columnAttr = columnJSON.attr, // EiColumn.java设置的自定义数据
                    locked = columnJSON.primaryKey, // 主键列是固定列
                    enable = true,
                    headerAlign,  // header中文本居的方位
                    // headerAttributes = {}, // 头部属性
                    hidden = (columnJSON.visible === false),
                    validation = {};

                if (isPlainObject(columnAttr)) { // EiColumn.java中设置的动态属性
                    locked = !!(columnAttr["locked"]);
                    enable = columnAttr['enable'];
                    headerAlign = columnAttr['headerAlign'];
                }

                if (columnJSON.regex) {
                    validation["data-regex"] = columnJSON.regex;
                }

                if (columnJSON.errorPrompt) {
                    validation["data-errorprompt"] = columnJSON.errorPrompt;
                }

                var columnOptions = {
                    field: columnJSON.name,
                    title: columnJSON.descName,
                    hidden: hidden,
                    locked: locked,
                    enable: enable,
                    width: columnJSON.width || gridDefaults.columnWidth,
                    height: columnJSON.height || gridDefaults.rowHeight,
                    attributes: extend({
                        align: align,
                        required: !columnJSON.nullable,
                        minLength: columnJSON.minLength,
                        maxLength: columnJSON.maxLength,
                        "data-rules": columnJSON.validateType
                    }, validation)
                };

                if (isString(headerAlign)) {
                    columnOptions['headerAttributes'] = {
                        style: "text-align:" + headerAlign
                    }
                }

                return extend(columnJSON, columnOptions);


            }).sortBy("pos").value(); // EiBlock中的列, autoDraw === "yes"

            if (autoDraw === "mixed" || autoDraw === "override") {

                var oldTagColumns = _.map(tagColumns, function (tagColumn, i) {
                    return extend({tagPos: i}, tagColumn);
                }); // 复制一份EFColumn的数组，保证tag的顺序，防止_extendColumns破坏了原来的tagColumns

                kendoColumns = _extendColumns(tagColumns, kendoColumns); // EFColumn Tag会覆盖EiBlock中的列配置

                if (autoDraw === "override") { // 显示的列以Tag为准，但是会混入EiBlock中的属性，注意和no的区别
                    kendoColumns = _.chain(kendoColumns).filter(function (column) {
                        return _.findIndex(oldTagColumns, function (tagColumn) {
                            var equal = tagColumn.field === column.field;
                            if (equal) {
                                column.tagPos = tagColumn.tagPos;
                            }
                            return equal;
                        }) >= 0;
                    }).sortBy("tagPos").map(function (column) {
                        delete column.tagPos;
                        return column;
                    }).value();
                }
            }
        }

        // 优先级最高的配置，支持kendo的所有原生配置，高级用法，用于自定义列
        if (isArray(gridConfig.columns)) {
            // 复制一份IPLATUI.EFGrid[blockId].columns，
            // 以防IPLATUI.EFGrid[blockId].columns被_extendColumns方法清空
            var gridConfigColumns = gridConfig.columns.concat([]);
            // 使用iplatWidth=true来标记自定义width的column
            each(gridConfigColumns, function (i, column) {
                if (!!column.width) {
                    column['iplatWidth'] = true;
                }
            });
            kendoColumns = _extendColumns(gridConfigColumns, kendoColumns);
            delete gridConfig.columns;
        }

        // Tag逻辑抽象成JS的场景(EFPopup)，直接在使用IPLAT.Grid({columns: []})
        if (isArray(options.columns)) {
            kendoColumns = _extendColumns(options.columns, kendoColumns);
            delete options.columns;
        }

        // 构造schema中的modelFields，将EiBlockMeta元数据信息映射到Kendo的schema
        modelId = kendoColumns[0].field;
        each(kendoColumns, function (i, column) {
            modelId = column.primaryKey ? column.field : modelId;
            column.width = column.width || gridDefaults.columnWidth;
            // 解析EiColumn中的校验等信息到modelFields中
            modelFields[column.field] = {
                editable: column.enable,
                defaultValue: column.defaultValue || "", //默认值如果和主键value值一致，会导致修改变成新增
                validation: column.attributes
            };

            var columnType = (column.attributes || {}).type || column.type;

            // 后端bean中类型转换为kendo支持的类型
            if (columnType === 'N') {
                columnType = 'number';
            }

            if (_.indexOf(COLUMN_TYPE, columnType) >= 0) {
                modelFields[column.field]['type'] = columnType;
            }

            if (column.editType === "dropdown") {
                modelFields[column.field].filterable = {
                    ui: function (element) {
                        element.kendoDropDownList({
                            dataSource: column.values,
                            dataTextField: column.textField,
                            dataValueField: column.valueField
                        });
                    }
                };
            }
        });
        // 干掉主键的默认值
        delete modelFields[modelId].defaultValue;

        options.columns = kendoColumns;
        options.columnCallback = gridConfig.columnCallback;

        // Grid中readonly = true , 所有的column都被设置为readonly = true
        if (options.readonly === true) {
            _.each(options.columns, function (column) {
                column.readonly = true;
            });
        }

        _buildSortColumns(options);

        _buildColumnTemplate(options);
        _buildColumnEditor(options);

        _buildColumnHeader(options);


        extend(true, options, {
            modelId: modelId,
            dataSource: {
                schema: {
                    model: {
                        id: modelId,
                        fields: modelFields
                    }
                }
            }
        });

        return kendoColumns;
    }

    /**
     * 用户可自定义列的显示，宽度，排列顺序，是否固定等信息。存入平台的TEDFA60表
     * @param options
     * @private
     */
    function _buildPersonalColumns(options) {
        var personal = options.personal,
            personalBlockId = "personal_" + options.blockId,
            personalColumns = [],
            kendoColumns = [];

        _buildColumns(options);

        if (personal) {
            // 从TEDFA60中有查到个性化的信息
            personalInfo = options.personalInfo;
            // 获取表格中排序
            personalColumns = personalInfo.getBlock(personalBlockId).getMappedRows(); // EDFA60表中的信息

            var resultColumns = new Array(options.columns.length), order;

            // 弹出的grid的列数据信息
            kendoColumns = options.columns;

            // 控制展示顺序
            each(kendoColumns, function (i, column) {
                var findColumn = _.find(personalColumns, {column_ename: column.field});

                if (findColumn) {
                    column.locked = findColumn.column_locked === "1";
                    column.hidden = findColumn.column_hidden === "1";
                    column.width = findColumn.column_width + "px";
                    order = findColumn.column_order || 0;
                    resultColumns[order] = column; //处理已经配置好的
                }
            });

            each(kendoColumns, function (i, column) {
                // 如果resultColumns 不存在column选项
                if (_.indexOf(resultColumns, column) < 0) {
                    for (var j = 0; j < kendoColumns.length; j++) {
                        if (!resultColumns[j]) {
                            resultColumns[j] = column;
                            break;
                        }
                    }
                }
            });

            options.columns = resultColumns;
        }

        // 增强初始化时，EFGrid的列信息
        var targetColumns = _.filter(options.columns, function (column) {
            return !!column.field;
        });

        options.eiBlock = EiBlock.buildByColumns(options.blockId, targetColumns);
    }

    /**
     * 处理列的排序（后端）
     * @param options
     * @private
     */
    function _buildSortColumns(options) {
        var sort = options.iplatSort,
            columns = options.columns;

        // 内部方法，设置column 中 sortable的值
        function setSortable(columns, isSort) {
            var sortObj,
                isSort = !!isSort; //强制转化为boolean

            // sortable 的实际值按照 js中sortable > column中sort > attr(java)中sort的规则来判定
            each(columns, function (i, column) {
                sortObj = $.extend({sortable: (column.attr || {}).sort}, {sortable: column.iplatSort}, {sortable: column.sortable});
                column.sortable = sortObj.sortable === isSort ? isSort : !isSort;
            });
        }

        if (sort === "single") {
            options.sortable = {
                mode: "single",
                allowUnsort: true, // 默认是true，允许出现非排序状态；asc normal desc
                initialDirection: "asc"// 初始的排序顺序
            };
            setSortable(columns, false);
        } else if (sort === "all") {
            options.sortable = {
                mode: "multiple",
                allowUnsort: true, // 默认是true，允许出现非排序状态；asc normal desc
                initialDirection: "asc"// 初始的排序顺序
            };
            setSortable(columns, false);
        } else if (sort === "setted") {
            options.sortable = {
                mode: "multiple",
                allowUnsort: true, // 默认是true，允许出现非排序状态；asc normal desc
                initialDirection: "asc"// 初始的排序顺序
            };
            setSortable(columns, true);
        }
    }

    /**
     * 处理了数据列的小计，总计
     * 根据displayType 设置固定的显示模版，提供扩展机制
     * @param options
     * @private
     */
    function _buildColumnTemplate(options) {
        var columns = options.columns, // kendoColumns
            rowNo = options.rowNo,
            gridConfig = options.gridConfig, // 页面JS中的原生配置
            gridId = options.gridId,
            sumType = options.sumType, // grid上的合计属性
            columnCallback = options.columnCallback;

        var flag = false;

        var page, total, finalSumType = null,
            aggregate = [];
        page = total = 0;

        var setFinalSumType = function (columns) {
            var subColumnSum = false;
            each(columns, function (i, column) {
                if (column.valueType === "N") {
                    if (IPLAT.isUndefined(column.attributes)) {
                        column.attributes = {};
                    }
                    column.attributes.align = "right"; // 解决在js中配置valueType为N时，align居左的问题
                    column.sumType = column.sumType || sumType; // 列上的合计属性覆盖grid的设置

                    if (finalSumType !== "all") { // 需要计算最终的合计类型
                        if (column.sumType === "page") {
                            page = 1;
                            finalSumType = "page";
                        }

                        if (column.sumType === "total") {
                            total = 1;
                            finalSumType = "total";
                        }


                        if (column.sumType === "all" || (page + total) === 2) {
                            finalSumType = "all";
                            // return false; // 等价于for循环的break, return 非false等价于continue
                        }
                    }
                    subColumnSum = true;
                }

                if (!IPLAT.isUndefined(column.columns)) {
                    setFinalSumType(column.columns, column);
                }
            });

            if (arguments.length === 2) {
                arguments[1].subColumnSum = subColumnSum;
            }
        };

        setFinalSumType(columns);

        // 确定footerTemplate的模板 []
        var sumTemplate = $("#sum-template").html();

        var aggregateCol = function (column) {
            if (column.sumType && column.valueType === "N") {
                aggregate.push({
                    field: column.field,
                    format: column.format,
                    aggregate: "sum"
                });
                column.footerAttributes = extend(column.footerAttributes, {
                    align: "right"
                });

                column.footerTemplate = kendo.template(sumTemplate.replace(/#=data.@field@.sumType#/g, column.sumType).replace(/@field@/g, column.field));
            }
            if (column.subColumnSum === true) {
                each(column.columns, function (i, subColumn) {
                    aggregateCol(subColumn);
                })
            }
        };

        each(columns, function (i, column) {
            aggregateCol(column);

            // 批量复制模版
            _buildColumnCopyTemplate(column);

            // 处理column的type和校验
            switch (column.displayType) {
                case "checkbox":
                    column.template = function (dataItem) {
                        var value = !!(dataItem[column.field] * 1); // 0 false "0"
                        var checked = value ? "checked" : "";
                        return "<input type='checkbox' disabled='disabled' value='" + value + "'" + checked + " class='i-grid-checkbox'>";
                    };
                    break;

                case "radio":
                    column.template = function (dataItem) {
                        var value = !!dataItem[column.field];
                        var checked = value ? "checked" : "";
                        return "<input type='radio' disabled='disabled' value='" + value + "'" + checked + " class='i-grid-radio'>";
                    };
                    break;

                case 'date':
                case 'datetime':
                    column.template = function (dataItem) {
                        var value = dataItem[column.field];
                        // 防止只设置displayType的时候 => parseFormats为undefined, 非空判断处理
                        if (column.parseFormats && column.parseFormats[0]) {
                            var date = kendo.parseDate(value, column.parseFormats[0]);
                            return kendo.format(column.format, date || "");
                        } else {
                            return kendo.format(column.format, value) || value || "";
                        }
                    };
                    break;

                case "url": // 不允许编辑
                    column.template = function (dataItem) {
                        var value = dataItem[column.field] || "";

                        if (isFunction(columnCallback) && !flag) {
                            flag = true;
                            // 绑定了无数次
                            $("body").on("click", "#" + gridId + " a.cell-url", function (e) {

                                var model = $("#" + gridId).data("kendoGrid").dataItem($(this).closest("tr"));
                                columnCallback(column.field, model);
                            });
                        }

                        return "<a href='#' class='cell-url'>" + value + "</a>";
                    };
                    break;

                case "button": // 不允许编辑
                    column.enable = false;
                    break;

                case "image": // 不允许编辑
                    column.enable = false;
                    break;

                default:
                    break;

            }

            // 可编辑的单元格，勾选时突出显示
            var showEditHelper = IPLAT.Util.boolConfigHelper(options.dynamic.editHelper,
                IPLATUI.Config.EFGrid.editHelper);

            // editable 是boolean变量，平台默认的 判断单元格是否可编辑的逻辑
            var editable = !(column.readonly === true || column.enable === false);

            // 业务可以在JS中自行判断单元格是否显示可编辑
            if (isFunction(options["customEditHelper"])) {
                editable = options["customEditHelper"](column);
            }

            // TODO 新增时readonly 无法提示用户其可编辑
            if (editable) {
                // 单元格可编辑 才会添加校验 可编辑提示的辅助div

                // 单元格可编辑就会被添加i-validate-helper样式 ，明确指明使用editHelper，再添加i-edit-helper
                var editClass = showEditHelper ? 'i-validate-helper i-edit-helper' : 'i-validate-helper';

                var editDiv = "<div class='" + editClass + "'>";

                // 前端防止处理XSS攻击, 内容默认是进行html encoded
                var encoded = IPLAT.Util.boolConfigHelper(column.encoded, ENCODED);
                var result = "";


                if (_.isString(column.template)) {
                    column.template = editDiv + column.template + "</div>";
                } else if (isFunction(column.template)) {
                    var func = column.template;
                    column.template = function (dataItem) {
                        // dataItem[column.field] = dataItem[column.field] || '';
                        result = func.call(this, dataItem);

                        if (result === undefined) {
                            result = ''
                        }

                        if (encoded) {
                            result = kendo.htmlEncode(result);
                        }

                        return editDiv + result + "</div>";
                    }

                } else {
                    if (column.format) {
                        // 数字的format信息
                        column.template = function (dataItem) {

                            // 删除isAvailable，kendo.format已做空值判断
                            // if (isAvailable(dataItem[column.field])) {
                            result = kendo.format(column.format, dataItem[column.field]);

                            if (encoded) {
                                result = kendo.htmlEncode(result);
                            }

                            return editDiv + result + "</div>";
                        };
                    } else {

                        if (encoded) {
                            // #: # kendo template会进行html encoded
                            column.template = editDiv + "#:" + column.field + " != null ? " +
                                column.field + ": ''#</div>";
                        } else {
                            column.template = editDiv + "#=" + column.field + " != null ? " +
                                column.field + ": ''#</div>";
                        }

                    }
                }
            }
        });

        options.finalSumType = finalSumType;
        options.aggregate = aggregate;

        var footer = "",
            footerTemplate = "";

        if (finalSumType) {
            footer = $("#sum-template").html().replace(/data\.@field@\./g, "");
            footerTemplate = kendo.template(footer)({
                sumType: finalSumType,
                page: "小计",
                sum: "总计"
            });

            if (!options.enable) {
                rowNo = options.rowNo = true; // 要合计，但是没有checkbox列，默认开启行号
                footer = "rowNo";
            } else {
                footer = "checkbox";
            }
        }

        // column的序列号
        if (rowNo) {
            var rowNoColumn = [{
                // field: "rowNo",
                headerAttributes: {
                    resizable: false,
                    style: "padding: 3px;"
                },
                headerTemplate: "<span>" + IPLATUI.Config.EFGrid.rowNoText + "</span>",
                template: function (item) {
                    var items = item.parent();
                    return "<span class='row-no'>" + (items.indexOf(item) + 1) + "</span>";
                },
                width: '40px',
                attributes: {
                    align: IPLATUI.Config.EFGrid.rowNoAlign
                },
                pos: -1,
                aid: true,
                enable: false,
                // 使用iplatWidth=true来标记定义width的column
                iplatWidth: true,
                locked: true
            }];

            if (footer === "rowNo") {
                rowNoColumn[0].footerTemplate = footerTemplate;
            }

            columns = rowNoColumn.concat(columns);
        }


        if (options.enable) {
            // checkbox列 批量选中操作
            if (!/hidden/gi.test(options.checkMode)) {
                var checkColumn = [extend({}, {
                    headerTemplate: "<input type='checkbox' class='check-all' />",
                    attributes: {
                        align: "center"
                    },
                    template: '<input type="checkbox" value=#=uid# class="kendo-check-box check-one" />',
                    width: '40px',
                    pos: -2,
                    aid: true,
                    headerAttributes: {
                        align: "center",
                        // 标识此列没有开启快捷菜单
                        shortcut_menu: false,
                        resizable: false
                    },
                    // 使用iplatWidth=true来标记定义width的column
                    iplatWidth: true,
                    enable: false,
                    locked: true
                }, gridConfig.checkColumn)];

                if (footer === "checkbox") {
                    checkColumn[0].footerTemplate = footerTemplate;
                    checkColumn[0].width = "40px";
                }

                columns = checkColumn.concat(columns);
            }
        } else {
            // options.toolbarConfig = {hidden: true};

            // 1.toolbarConfig={hidden:'all'}时,整个工具栏不显示;
            // 2.enable="false"：
            //   2.1.toolbarConfig={hidden:false} || 未配置toolbarConfig.hidden || 未配置toolbarConfig时,
            //       4个基础功能按钮不显示;
            //   2.2.toolbarConfig={hidden:true}时,所有按钮不显示(setting按钮不受控制);
            // 3.needAuth优先权 < enable
            options.toolbarConfig = extend(true, options.toolbarConfig,
                gridConfig.toolbarConfig, {
                    "add": false,
                    "cancel": false,
                    "save": false,
                    "delete": false
                });
        }
        options.columns = columns;
    }

    /**
     * 提供批量复制header的模版
     * @param column
     * @private
     */
    function _buildColumnCopyTemplate(column) {
        // 批量复制
        // 当column里面存在readonly和enable时候，关闭批量复制功能
        var enableCopy = true;
        // 当readonly = true 或者 readonly = 'readonly' 或者readonly = 'true'
        if (column.readonly === true || $.trim(column.readonly) === 'true' || $.trim(column.readonly) === 'readonly') {
            enableCopy = false
        }

        // 当column.enable = false 或者 column.enable = 'false'
        if (column.enable === false || column.enable === 'false') {
            enableCopy = false
        }

        if (enableCopy && column.copy === true) {
            var copyType = column.editType || column.popupType || "C";
            var link = "<a class='k-grid-copy k-state-border-down' data-type='" + copyType + "' href='javascript:;' " +
                "><span class='k-icon k-i-maximize'></span></a>";
            if (typeof column.headerTemplate === "string") {
                column.headerTemplate = link + column.headerTemplate;

            } else if (typeof column.headerTemplate === "function") {
                column.headerTemplate = link + column.headerTemplate.call(null, column);
            } else {
                column.headerTemplate = link + column.title;
            }
        }
    }

    /**
     * 让固定列的Grid和非固定列的Grid高度一致
     * 解决由于行高变化导致的固定区和数据区的table错位的问题
     * @param $tr       行tr的jQuery对象
     * @param gridId    grid的Id
     * @private
     */
    function _initGridAndLockedGridHeight($tr, gridId) {
        var table = $tr.closest('table'),
            $grid = $("#" + gridId),
            height = table.height() || 0;

        $grid.find('.k-grid-content-locked').height(height);
        // TODO 此处计算高度存在问题，如果触发横向滚动条，则需要再加上滚动条的高度
        $grid.find('.k-grid-content').height(height);
    }

    /**
     * 列类型的处理，主要是编辑，提供扩展机制
     * @param options
     * @private
     */
    function _buildColumnEditor(options) {
        var columns = options.columns,
            gridId = options['gridId'];

        each(columns, function (i, column) {
            if (column.attributes && column.attributes.required) {
                var span = "<span class='i-input-required'>*</span>";
                if (typeof column.headerTemplate === "string") {
                    column.headerTemplate = span + column.headerTemplate;

                } else if (typeof column.headerTemplate === "function") {
                    column.headerTemplate = span + column.headerTemplate.call(null, column);
                } else {
                    column.headerTemplate = "<span class='i-input-required'>*</span>" + column.title;
                }
            }

            // 处理column的type和 校验
            switch (column.editType) {
                case 'textarea':
                    column.editor = function (container, options) {

                        var field = options.field,
                            model = options.model,
                            grid = $("#" + gridId).data("kendoGrid"),
                            required = column.attributes.required,
                            fieldValue = model[field];
                        if (required === true || $.trim(required) === 'true') {
                            required = true;
                        }

                        if (!IPLAT.isString(fieldValue)) {
                            fieldValue = "";
                        }

                        var input = $('<span class="k-widget k-dropdown i-popup-input k-header">' +
                            '<span class="k-dropdown-wrap">' +
                            '<input type="text" readonly="readonly" id="' + field + '" class="textareaColumn" ' +
                            'value="' + fieldValue.replace(/[\r\n\v\f\t ]+/gi, ' ') + '"' + (required ? "required" : "") + '>' +
                            '<span class="k-select">' +
                            '<span id="icon_' + field + '" class="i-icon i-popup-textarea"></span></span></span></span>');

                        if (required) {
                            container.addClass("i-invalid-cell");
                        }

                        input.appendTo(container);

                        $("#icon_" + field).mousedown(function () {

                            var $this = $(this);
                            IPLAT.Popup.popupTextArea({
                                // title: '数据回填',
                                content: model[field],
                                pele: $this,
                                callback: function (val) {
                                    grid.setCellValue(model, field, val);
                                    this.data('kendoWindow').close();
                                }
                            })
                        });
                    };
                    break;
                case 'checkbox':
                    column.editor = function (container, options) {
                        var field = options.field;
                        // var input = $("<input type='checkbox' data-bind='checked:" + field + "'>");
                        //  kendo.bind(input, options.model);

                        var value = !!(options.model[field] * 1); // 0 false "0"
                        var checked = value ? "checked" : "";
                        var input = $("<input type='checkbox' " + checked + " >");
                        input.appendTo(container);

                        input.on("click", function (e) {
                            var checked = this.checked;
                            options.model.set(field, checked ? "1" : "0"); // 平台规范 boolean存数据库是"1", "0"
                            input.prop("checked", checked);
                        });
                    };
                    break;

                case 'radio':
                    column.editor = function (container, options) {
                        var field = options.field;
                        // var input = $("<input type='radio' data-bind='checked:" + field + "'>");
                        // input.appendTo(container);
                        // kendo.bind(input, options.model);
                        var value = !!(options.model[field] * 1); // 0 false "0"
                        var checked = value ? "checked" : "";
                        var input = $("<input type='radio' " + checked + " >");
                        input.appendTo(container);

                        input.on("click", function (e) {
                            var checked = this.checked;
                            options.model.set(field, checked ? "1" : "0");
                            input.prop("checked", checked);
                        });
                    };
                    break;

                case 'date':
                case 'datetime':
                    // 注意column的format是个json的字符串,value 最终的格式以DATE_FORMAT为准
                    var format = column.format || column.dateFormat;
                    column.format = "{0:" + format + "}";

                    if (_.isFunction(column["editor"])) {
                        break;
                    }

                    column.editor = function (container, options) {
                        var input = $('<input />'),
                            attributes = column.attributes || {};
                        input.attr("name", options.field);

                        if (attributes.required === "true" || attributes.required === true) {
                            input.prop("required", "true");
                            // 校验信息在td中不显示, 调整overflow，注意也影响了其他td
                            container.addClass("i-invalid-cell");
                        }

                        input.attr("id", "__colDate_" + options.field);
                        input.appendTo(container);

                        var dateOptions = extend({
                            dateId: "__colDate_" + options.field,
                            format: column.dateFormat,
                            parseFormats: column.parseFormats,
                            role: column.editType
                        }, column.dynamic);

                        var datetimepicker = IPLAT.Date(dateOptions);

                        // 动态属性值为字符串
                        if (dateOptions._readonly) {
                            datetimepicker.readonly();
                        }
                    };
                    break;

                case 'combo':
                case 'dropdown':
                    column.editor = function (container, options) {
                        var input = $('<input />'),
                            attributes = column.attributes || {};
                        input.attr("name", options.field);

                        if (attributes.required === true || attributes === true) {
                            input.prop("required", "true");
                            container.addClass("i-invalid-cell");
                        }

                        input.appendTo(container);

                        var template = column.itemTemplate || "#=" + column.textField + "#";

                        var data = isFunction(column['filter']) ? (column['filter'].call(input, options) || []) : column.values;

                        var dropDownOption = extend({
                            valuePrimitive: true,
                            value: column.defaultValue,
                            template: template,
                            valueTemplate: template,
                            dataTextField: column.textField,
                            dataValueField: column.valueField,
                            dataSource: data
                        }, attributes);  // grid下拉列动态属性,autoWidth,optionLabel,filter等

                        input.kendoDropDownList(dropDownOption);

                    };
                    break;
                case 'multiSelect':
                    column.editor = function (container, options) {
                        var selectId = options.field;
                        var tr = container.closest('tr');
                        var select = $('<select id="' + selectId + '"  style="width: 100%;"></select>');

                        var defaultValue = options.model[options.field] || column.defaultValue;
                        select.appendTo(container);

                        if (column.attributes.required === "true") {
                            select.prop("required", "true");
                            container.addClass("i-invalid-cell");
                        }

                        // 使用此函数导致content高度不准确，横向滚动条位置上移，导致错列，现决定multiSelect的输入框不撑开，缩略呈现
                        // 处理multiSelect固定列表格和非固定列表格高度不一致时候，固定列表格出现空白
                        // _initGridAndLockedGridHeight(tr, gridId);

                        var template = column.itemTemplate || "#=" + column.textField + "#";

                        var data = isFunction(column['filter']) ? (column['filter'].call(select, options) || []) : column.values;

                        var multiSelectOption = extend(true, {
                            valuePrimitive: true,
                            value: defaultValue.split(','),
                            template: template,
                            valueTemplate: template,
                            dataTextField: column.textField,
                            dataValueField: column.valueField,
                            dataSource: data,
                            autoClose: true,
                            change: function (e) {
                                var list = e.sender.value();
                                // 暂时关闭，等后面更好的办法处理编辑multiSelect造成的高度溢出问题
                                // _initGridAndLockedGridHeight(tr,gridId);
                                // $("[data-uid='"+tr.data('uid')+"']").height(tr.height());

                                if (list.length > 0) {
                                    options.model.set(options.field, list.join(","));
                                    // options.model[options.field] = list;
                                } else {
                                    options.model[options.field] = "";
                                }
                            }
                        }, column.dynamic);  // grid多选下拉列动态属性,autoClose,autoWidth,filter等

                        select.kendoMultiSelect(multiSelectOption);
                    };
                    break;
                default:
                    break;
            }
        });
    }


    /**
     * 处理column中列头部信息
     * @param options
     * @private
     */
    function _buildColumnHeader(options) {
        // TODO 没有考虑在批量复制的情况下，会导致header会被覆盖
        var columns = options.columns,
            headerAttributes = gridDefaults.headerAttributes || {};

        // 处理column中headerColumn
        each(columns, function (i, column) {
            // 存在headerTemplate与headerAttributes不需要添加默认样式
            if (!column.headerTemplate && !column.headerAttributes) {
                column.headerAttributes = headerAttributes;
            }
        });
    }

    /**
     * 实现grid头部的批量复制的逻辑
     * @param gridInstance
     * @private
     */
    function _initBatchCopy(gridInstance) {
        var $element = gridInstance.element;

        if (!$element) {
            return;
        }

        // 批量复制操作
        $element.on("click", "a.k-grid-copy", function (e) {
            var $this = $(this),
                $data = $this.data(),
                type = $data["type"],
                $th = $this.closest("th"),
                field = $th.data("field"),
                _column = gridInstance.findColumnByField(field);

            switch (type) {
                case 'C':
                    IPLAT.ColumnCopy.input(gridInstance, $th, $this, {backFill: _column.backFill});
                    break;
                case 'textarea':
                    IPLAT.Popup.popupTextArea({
                        title: '批量复制',
                        content: "",
                        pele: $this,
                        callback: function (val) {
                            var _this = this;
                            if ($.isFunction(_column.backFill)) {
                                _column.backFill.call(gridInstance, {
                                    value: val,
                                    window: _this.data('kendoWindow'),
                                    copy: true
                                })
                            } else {
                                var rows = gridInstance.getCheckedRows(); // EFGrid列的批量赋值功能
                                $.each(rows, function (index, item) {
                                    gridInstance.setCellValue(item, field, val);
                                });
                                _this.data('kendoWindow').close();
                            }
                        }
                    });
                    break;
                case 'date':
                case 'datetime':
                    var _dateOptions = extend({
                        backFill: _column.backFill,
                        format: _column.dateFormat,
                        parseFormats: _column.parseFormats,
                        role: _column.editType
                    }, _column.dynamic);

                    IPLAT.ColumnCopy.date(gridInstance, $th, $this, _dateOptions);
                    break;
                case 'combo':
                case 'dropdown':
                    var template = _column.itemTemplate || "#=" + _column.textField + "#";
                    IPLAT.ColumnCopy.select(gridInstance, $th, $this, {
                        valuePrimitive: true,
                        value: _column.defaultValue,
                        template: template,
                        valueTemplate: template,
                        dataTextField: _column.textField,
                        dataValueField: _column.valueField,
                        backFill: _column.backFill,
                        dataSource: _column.values
                    });
                    break;
                case 'multiSelect':
                    var template = _column.itemTemplate || "#=" + _column.textField + "#";
                    IPLAT.ColumnCopy.multiSelect(gridInstance, $th, $this, {
                        valuePrimitive: true,
                        value: _column.defaultValue,
                        template: template,
                        valueTemplate: template,
                        dataTextField: _column.textField,
                        dataValueField: _column.valueField,
                        dataSource: _column.values,
                        backFill: _column.backFill,
                        autoClose: true
                    });
                    break;
                case 'popup':
                    // popupType由COLUMN变成INPUT,textElement为当前title所在的th标签,column中backFill复用
                    var options = _column.popupOptions;
                    options.popupType = options.popupType.replace("COLUMN", "INPUT");
                    var popupOptions = extend({
                        textElement: $th,
                        copy: true,
                        init: _column.init,
                        query: _column.query,
                        backFill: _column.backFill,
                        backFillGrid: gridInstance
                    }, options);
                    IPLAT.Popup.popupGrid(popupOptions);
                    break;
                case 'tree':
                    var columnOptions = _column.treeOptions;
                    columnOptions.popupType = columnOptions.popupType.replace("COLUMN", "INPUT");

                    var treeOptions = extend({}, columnOptions, {
                        copy: true,
                        textElement: $th,
                        containerId: columnOptions.containerId + "_copy",
                        treeId: columnOptions.treeId + "_copy",
                        init: _column.init,
                        query: _column.query,
                        backFill: _column.backFill,
                        backFillGrid: gridInstance
                    });
                    IPLAT.Popup.popupTree(treeOptions);
                    break;
                default:
                    break;
            }

            return false;
        });
    }

    /**
     * Grid数据源的初始构建
     *
     * @param {Object} options grid的配置
     * @return {Object} 返回初始的dataSource
     * @private
     */
    function _initDataSource(options) {
        var blockId = options.blockId,
            gridId = options.gridId,
            finalSumType = options.finalSumType, // page total all
            dataSource,
            resultBlock,
            kendoGrid;

        // response的数据处理顺序: requestEnd--> parse--> errors--> total--> data
        var GridModel = kendo.data.Model.define({
            shouldSerialize: iplatFieldFilter
        });
        dataSource = {
            batch: true, // 一次请求提交多条数据
            serverFiltering: true, // 服务端过滤
            serverPaging: true, // 服务端分页
            serverSorting: true, // 服务端排序
            schema: {
                modelBase: GridModel,
                errors: function (response) {
                    // response是EiInfo的JSON 首先执行errors逻辑
                    // HTTP 200，对结果进行判断要不要触发error处理。 status为 负数 或者 正数时， 不强制检测result block
                    if (ajaxEi.getStatus() == 0 && !resultBlock) {
                        // 查询时不能缺少数据块 强制要求update insert delete的status设置为正数
                        return "表格[" + blockId + "]操作失败，原因[缺失数据块]";
                    }
                    if (ajaxEi.getStatus() < 0) {
                        // status为负数，页面报异常，解决复制新增失败后主键不可编辑问题
                        return ajaxEi;
                    }
                    return null;
                },

                total: function (response) {
                    var count = resultBlock.get(EiConstant.COUNT);
                    var limit = resultBlock.get(EiConstant.LIMIT);

                    // Grid对象已经生成
                    var kendoGrid = $("#" + gridId).data('kendoGrid'),
                        // 后台count查询标记，值为String类型
                        showCount = resultBlock.get(EiConstant.SHOW_COUNT) === "true";

                    if (showCount && $.isNumeric(count) && parseInt(count) >= 0) {
                        // 区分showCount时，count结果为0 和 非showCount时的，默认count 0
                        // 后台进行了Count
                        this.isOver = false;
                    } else {
                        var rows = ajaxEi.getBlock(blockId).getMappedRows();
                        var dataSource = kendoGrid.dataSource;
                        var pageSize = limit || dataSource.pageSize();
                        var page = dataSource.page();

                        // 返回数据小于每页数量，表明后端数据获取结束
                        if (rows.length < pageSize) {
                            count = ( page - 1 ) * pageSize + rows.length;
                            this.count = count;
                            this.isOver = true;
                        } else {
                            this.isOver = false;
                            // 提高总数数量，能够继续获取数据
                            count = (page + 1) * pageSize;
                        }
                    }

                    return count;
                },

                data: function (response) {
                    // var that = this; // kendo.data.DataReader

                    // insert的时候需要新增的数据行的Id，update, delete不做要求，返回正常的EiInfo即可
                    ajaxEi = EiInfo.parseJSONObject(response);
                    var kendoGrid = $("#" + gridId).data("kendoGrid"),
                        pager = kendoGrid.pager;

                    // 将每次操作返回的EiInfo设置到grid对象中，注意ajaxEi不是Grid options中eiInfo
                    kendoGrid.eiInfo = ajaxEi;
                    kendoGrid.eiBlock = ajaxEi.getBlock(blockId);

                    IPLAT.ajaxEi = ajaxEi;

                    if (this.isOver) {
                        if (pager) {
                            pager.dataSource._total = this.count;
                        }
                    }

                    var rows = ajaxEi.getBlock(blockId).getMappedRows();
                    var pageSize = resultBlock.get(EiConstant.LIMIT) || kendoGrid.dataSource.pageSize();
                    if (pager) {
                        pager.dataSource._pageSize = pageSize;
                    }
                    return rows.slice(0, pageSize);
                }
            },

            error: function (e) {
                // 两种错误: 1.数据请求异常（ajax e.xhr）
                //          2.业务异常(e.errors)
                var kendoGrid = $("#" + gridId).data("kendoGrid"),
                    errors = e.errors;

                if (kendoGrid._action === DELETE_ACTION) {
                    // 恢复原来删除的数据，并勾选
                    kendoGrid.cancelChanges();
                    kendoGrid.setCheckedRows(kendoGrid._deleteRows);
                }

                if (!e.errors) {
                    // 格式化平台的异常信息 获得msgObj
                    errors = IPLAT.Util.formatErrorMessage((e.xhr && e.xhr.responseText) || "");
                    e.errors = errors;
                }

                if (!kendoGrid.trigger(ON_FAIL + NS, {errorMsg: e.errors, xhr: e.xhr})) {
                    NotificationUtil(errors, Notification.ERROR);
                }
            },

            requestEnd: function (e) {
                // e => sender(DataSource) response(JSON) type("read", "create" ...)

                var that = this,
                    type = e.type,
                    response = e.response; // EiInfoJSON

                ajaxEi = null;

                try {
                    kendoGrid = $("#" + gridId).data("kendoGrid");

                    // 失败场景下 e.type 为 undefined
                    kendoGrid._action = type || kendoGrid._action;

                    // 服务没有返回EiInfo格式的JSON时，response是undefined；
                    // 将会导致ajax调用的error，从而触发DataSource的error处理函数
                    // 可能产生JSON parse Error
                    ajaxEi = EiInfo.parseJSONObject(response);

                    // 返回的EiInfo中可能没有Grid需要的EiBlock
                    // 在数据预处理的errors函数中返回错误信息，从而触发DataSource的error处理函数
                    resultBlock = ajaxEi.getBlock(blockId);

                    var status = ajaxEi.getStatus();

                    if (status >= 0) {

                        if (type === 'read') {
                            var autoDraw = kendoGrid.options.autoDraw;
                            if (autoDraw === 'dynamic' && ajaxEi.get(DYNAMIC_COLUMN) !== "keep") {

                                // 动态渲染的列没必要再去触发 change 刷新原来的grid
                                IPLAT.Util.unbindHandlers(that, "change");
                                // 动态渲染的列需要清除原来的列配置，否则会重复
                                kendoGrid.options.toolbarConfig = null;
                                kendoGrid._rebuild(ajaxEi);

                            }
                        }

                        if (!kendoGrid.trigger(ON_SUCCESS + NS, {eiInfo: ajaxEi, type: type})) {
                            var level = status === 0 ? Notification.SUCCESS : Notification.WARNING;
                            NotificationUtil(ajaxEi, level);
                            if (type !== 'read') {
                                kendoGrid.unCheckAllRows();
                            }
                        }
                    } else {
                        // 注意：trigger error 将导致Grid的操作复原
                        ajaxEi.set(EiConstant.SHOW_DETAIL_MSG, true);
                        e.errors = ajaxEi;

                        if (isAvailable(ajaxEi.get("redirect"))) {
                            // 登录过期后的重定向 需要判断弹出iframe的场景
                            var topWindow = IPLAT.getParentWindow() || window;
                            topWindow.location.href = ajaxEi.get("redirect");
                        }
                    }
                } catch (error) {
                    // 服务没有返回EiInfo格式的JSON，会自动触发error事件
                    // e.errors = "服务端没有返回正确的EiInfo数据";
                    // e.errors = "表格[" + blockId + "]数据失败，原因[" + ajaxEi.getMsg() + "]";
                    // that.trigger("error", e);
                }
            }
        };

        if (finalSumType) { // 小计 总计的判断
            dataSource.serverAggregates = true; // 服务端总计
            dataSource.aggregate = options.aggregate;

            dataSource.schema.aggregates = function (response) {
                ajaxEi = EiInfo.parseJSONObject(response);
                var rows = ajaxEi.getBlock(blockId).getMappedRows(),
                    pageSum = 0,
                    totalSum = ajaxEi.get(blockId + "-" + EiConstant.COLUMN_TOTAL_SUM) || {},
                    aggregates = {};

                var thisAggreate;
                if(IPLAT.isAvailable(response["__aggregate__"])){
                    thisAggreate = response["__aggregate__"];
                }else{
                    thisAggreate = options.aggregate;
                }
                // {"a":1,b:2} ==> {"a": {sum: 1}, b:{sum:2}}
                each(thisAggreate, function (i, value) {
                    var field = value.field;
                    if (finalSumType === "all" || finalSumType === "page") {
                        pageSum = 0;
                        each(rows, function (j, row) {
                            pageSum += (parseFloat(row[field]) || 0); // 小计
                        });
                    }

                    var sum = IPLAT.isAvailable(totalSum[field]) ? totalSum[field] : '', // 避免数值为0时，总计不显示
                        page = pageSum.toFixed(2);

                    if (value.format) {
                        sum = kendo.format(value.format, sum);
                        page = kendo.format(value.format, pageSum);
                    }

                    aggregates[field] = {
                        sum: sum, // 服务端总计
                        page: page,
                        sumType: finalSumType
                    };
                });

                return aggregates;
            };
        }

        return dataSource;
    }

    /**
     * 解析简化后的options，合并为kendo的格式
     * @param options
     * @private
     */
    function _buildDataSource(options) {

        var dataSourceDefaults = _initDataSource(options),
            dataSourceSettings = options.dataSource,
            dataSource = {};

        if (!options.strict) {
            // 使用IPLAT封装后的配置，混合使用kendo的配置
            var url = options.url;

            if (url) {
                // 配置transport
                extend(true, dataSource, dataSourceDefaults, {
                    transport: TransportFactory.getTransport("REST", options)
                    // transport: TransportFactory.getTransport("EI", options)
                }, dataSourceSettings);

            } else {
                extend(true, dataSource, dataSourceDefaults, dataSourceSettings);
            }
        } else {
            // 严格模式，完全遵循kendo的格式配置dataSource
            dataSource = dataSourceSettings;
        }
        // delete options.dataSource;

        return dataSource;
    }

    /**
     * EFGrid的options的封装, 返回符合kendoGrid格式的options
     * @param options EFGrid的options
     * @return {Object} 符合kendoGrid格式的options
     * @private
     */
    function _beforeInit(options) {
        var blockId = options.blockId,
            eiInfo = options.eiInfo,
            configId = options.configId, // 解决同一个页面弹出Grid的blockId和原Grid blockId重复的问题
            gridConfig, // 页面JS中的原生配置
            dataSource;

        options.tagId = options.tagId || (blockId + "-" + kendo.guid());
        options.eiBlock = eiInfo.getBlock(blockId);
        options.dynamic = options.dynamic || {}; // 兼容js中直接调用IPLAT.Grid的写法

        options = extend(true, {}, gridDefaults, options); // 复制一份defaults

        if (options.eiBlock) {
            // IPLATUI.EFGrid中的配置
            gridConfig = options.gridConfig = extend({}, IPLATUI.EFGrid[configId || blockId]);

            // 构造列信息
            _buildPersonalColumns(options);

            // 构造数据源
            dataSource = _buildDataSource(options);

            // 构造翻页条
            IPLAT.EFGrid._initPager(options);

            // 构造操作栏
            options.toolbarConfig = IPLAT.EFGrid._initToolbar(options);

            if (IPLAT.EFGrid._hasToolBar(options)) {
                // 确定toolbarConfig的配置后， 判断是否渲染 toolbar
                // 定制Grid上Toolbar的操作
                extend(true, options, {
                    toolbar: [{
                        template: kendo.template("<div id='ef_grid_toolbar_" + blockId +
                            "' class='grid_toolbar' ></div>")
                    }]
                });
            }

            // gridConfig.pageable = false， 在此可以覆盖掉 默认的翻页配置
            return extend(true, {dataSource: dataSource}, options, gridConfig);

        } else {
            // 初始化时必须有Meta信息
            NotificationUtil("表格[" + blockId + "]初始化失败，原因[缺失数据块]", Notification.ERROR);
            return false;
        }
    }

    /**
     * kendoGrid渲染结束后的处理
     * @param options
     * @param gridInstance
     * @private
     */
    function _afterInit(options, gridInstance) {
        var autoFit = options.autoFit, // 是否开启Grid中column宽度根据内容去自适应
            $grid = gridInstance.element;

        if (IPLAT.isEiInfo(options.personalInfo)) {
            options.personalWindow = IPLAT.EFGrid._buildPersonal(options, gridInstance);
        }

        gridInstance._checkedRows = [];

        // checkbox批量选择处理
        var _checkToEdit = function () {
            var timer = null;

            // 单击数据行事件处理
            $grid.on("click.IPLAT", "tr[role=row]", function (e) {
                // fixed 阻止事件冒泡，防止主从表中事件都触发
                IPLAT.Util.stopPropagation(e);

                timer && clearTimeout(timer);
                if (e.detail === 2) // 双击 兼容 Gecko 的浏览器
                    return;

                // currentTarget = this --> tr
                // target 真正触发的事件的dom节点
                var $target = $(e.target) || $(e.srcElement),
                    $tr = $(this),//刚刚点击的一行
                    model = gridInstance.dataItem($tr),
                    rowNo = $tr.index(); // jQuery的方法，获取tr在table中的行号

                timer = setTimeout(function () {
                    var $td = $target.closest('td');
                    var THEAD = "THEAD";

                    //为了解决点击列头后勾选上第一行
                    if ((!$td.is("td") || $td.is("td.k-edit-cell")) && ($tr[0].parentNode.nodeName === THEAD)) {
                        // 非编辑状态才会触发，TODO: 按钮，url处理 改造成fake
                        return;
                    }

                    if (options.checkMode.indexOf("row") >= 0) {
                        // 单击行也能check, 触发onCheckRow事件
                        gridInstance.setCheckedRows(rowNo)
                    }

                    var index = gridInstance.cellIndex($td),
                        columnField = "";
                    if (gridInstance.columns[index]) {
                        columnField = gridInstance.columns[index].field;
                    }

                    gridInstance.trigger(ON_CELLCLICK + NS, {
                        event: e,
                        td: $td,
                        field: columnField,
                        model: model,
                        row: rowNo
                    });

                    var $TRs = gridInstance.element.find("tr[data-uid=" + model.uid + "]");

                    gridInstance.trigger(ON_ROWCLICK + NS, {
                        event: e,
                        tr: $TRs,
                        model: model,
                        row: rowNo
                    });

                }, IPLATUI.Config.Timer.dblclick);
            });

            // 双击事件处理
            $grid.on("dblclick.IPLAT", "tr[role=row]", function (e) {
                // fixed 阻止事件冒泡，防止主从表中事件都触发
                IPLAT.Util.stopPropagation(e);

                timer && clearTimeout(timer);

                var $target = $(e.target) || $(e.srcElement),
                    $tr = $(this),
                    model = gridInstance.dataItem($tr),
                    $td = $target.closest('td'),
                    THEAD = "THEAD",
                    rowNo = $tr.index(); // jQuery的方法，获取tr在table中的行号

                if ((!$td.is("td") || $td.is("td.k-edit-cell")) && ($tr[0].parentNode.nodeName === THEAD)) {
                    // 非编辑状态才会触发，TODO: 按钮，url处理 改造成fake
                    return;

                }

                if (options.checkMode.indexOf("row") >= 0) {
                    // 单击行也能check, 触发onCheckRow事件
                    gridInstance.setCheckedRows(rowNo)
                }

                var $TRs = gridInstance.element.find("tr[data-uid=" + model.uid + "]");

                gridInstance.trigger(ON_ROWDBLCLICK + NS, {
                    event: e,
                    tr: $TRs,
                    model: model,
                    row: rowNo
                });
            });

            // checkbox 全选
            $grid.on("click.IPLAT", "input.check-all", function (e) {
                // fixed 阻止事件冒泡，防止主从表中事件都触发
                IPLAT.Util.stopPropagation(e);

                var target = e.target || e.srcElement,
                    checked = target.checked;

                gridInstance.trigger(ON_CHECK_ALLROWS + NS, {
                    event: e,
                    checked: checked
                });

                $grid.find("input.check-one").each(function (index, element) {
                    var $element = $(element);
                    element.checked = checked;  // 每一行的列头checkbox状态重置
                    $element.trigger("check-one", [true]);
                });
            });

            // 单个checkbox 处理
            $grid.on("click.IPLAT check-one", "input.check-one", function (e, fake) {
                // fixed 阻止事件冒泡，防止在主从表中事件都触发
                IPLAT.Util.stopPropagation(e);

                var that = this,
                    checked = that.checked,
                    $element = $(that),
                    uid = $element.val(),
                    checkedIndex = _.indexOf(gridInstance._checkedRows, uid);

                // TODO: 全选的状态受到单选的影响, 需要自定义三种状态的checkbox

                if (options.checkMode.indexOf("single") >= 0) {
                    // 只能勾选一行
                    each(gridInstance.getCheckedRows(), function (index, checkedRows) {
                        var dataUid = checkedRows.uid;
                        if (dataUid !== uid) {
                            var $checkOne = $grid.find("input[value=" + dataUid + "]");
                            if ($checkOne.length > 0) {  // 解决单选模式下，删除一条记录后再次勾选出错问题
                                $checkOne[0].checked = false;
                                // $checkOne.trigger("check-one", [true]);
                                $checkOne.eq(0).closest("tr").removeClass("i-state-selected k-state-selected");
                                $grid.find(".k-grid-content tr[data-uid=" + dataUid + "]").removeClass("i-state-selected k-state-selected");
                            }
                        }
                    });
                }


                var $contentRow = $grid.find(".k-grid-content tr[data-uid=" + uid + "]");

                if (checked) { // 勾选行
                    $element.closest("tr").addClass("i-state-selected k-state-selected");
                    $contentRow.addClass("i-state-selected k-state-selected");
                    if (checkedIndex < 0) {
                        gridInstance._checkedRows.push(uid);
                    }
                } else { // 取消勾选行
                    $element.closest("tr").removeClass("i-state-selected k-state-selected");
                    $contentRow.removeClass("i-state-selected k-state-selected");
                    if (checkedIndex >= 0) {
                        gridInstance._checkedRows.splice(checkedIndex, 1);
                    }
                }

                // shift区域勾选
                if (e.shiftKey) {
                    var checkArray = $grid.find("input.check-one"),
                        startUid,
                        $start,
                        startIndex,
                        endIndex,
                        minIndex,
                        maxIndex;


                    if (gridInstance._checkedRows.length < 2) {
                        startIndex = 0;
                    } else {
                        startUid = gridInstance._checkedRows[gridInstance._checkedRows.length - 2];
                        $start = $grid.find("input[value=" + startUid + "]");
                        startIndex = _.indexOf(checkArray, $start[0]);
                    }

                    endIndex = _.indexOf(checkArray, $element[0]);

                    minIndex = Math.min(startIndex, endIndex);
                    maxIndex = Math.max(startIndex, endIndex);

                    for (var i = minIndex; i < maxIndex; i++) {
                        uid = checkArray.eq(i).val();
                        checkedIndex = _.indexOf(gridInstance._checkedRows, uid);

                        if (checkedIndex < 0) {
                            checkArray[i].checked = true;
                            checkArray.eq(i).trigger("check-one", [true]);
                        }
                    }
                }

                var $tr = $element.closest("tr"),
                    model = gridInstance.dataItem($tr),
                    rowNo = $tr.index(),
                    $TRs = gridInstance.element.find("tr[data-uid=" + model.uid + "]");

                gridInstance.trigger(ON_CHECKROW + NS, {
                    fake: fake, // 不是真正的点击，通过trigger得到的fake事件
                    event: e,
                    checked: checked,
                    model: model,
                    tr: $TRs,
                    row: rowNo
                });
            });
        };

        if (IPLAT.EFGrid._hasToolBar(options)) {
            IPLAT.EFGrid._createToolBar(options, gridInstance);
        }

        _checkToEdit();

        // 翻页时，重置勾选的行
        gridInstance.bind("page", function () {
            gridInstance._checkedRows = [];
        });

        // 为了保证Grid性能，autoFit只被触发一次
        gridInstance.one('autoFit', function () {
            // 调整column的宽度，对column进行宽度全适应
            // iplatWidth=true的column通常来源于block中meta,EFColumn.tag,JS中EFGrid.columns,checkbox,rowNo
            var gridInstance = this;

            var columns = gridInstance.options.columns;
            each(columns, function (index, column) {
                if (!column['iplatWidth']) {
                    gridInstance.autoFitColumn(index);
                }
            });
        });

        // 翻页时，取消时，全选checkbox状态重置
        gridInstance.bind("dataBound", function (e) {
            var checkAll = $("#" + options.gridId).find(".check-all");
            if (checkAll.length > 0) {
                checkAll[0].checked = false;
            }

            // 恢复选中的状态
            gridInstance.refreshCheckRows();

            // 从表的checkbox居中
            $("input[type=checkbox]").closest("td").css('text-align', 'center');

            // TODO scrollable 默认是显示垂直方向的滚动条的，grid高度足够时避免出现
            // http://docs.telerik.com/kendo-ui/controls/data-management/grid/how-to/Layout/hide-scrollbar-when-not-needed
            var gridWrapper = e.sender.wrapper;
            var gridDataTable = e.sender.table;
            var gridDataArea = gridDataTable.closest(".k-grid-content");

            gridWrapper.toggleClass("no-scrollbar", gridDataTable[0].offsetHeight <= gridDataArea[0].offsetHeight);

            // FIXME 只对column进行重绘，避免每次都重绘整个grid Tab
            setTimeout(function () { // 滚动条 行高 重绘
                gridInstance.resize(true);
            }, 300);

            IPLAT.EFGrid._refreshPagerCount(gridInstance);

            if (!!autoFit) {
                this.trigger('autoFit');
            }

            // 有数据时去除header底部border
            _handleGridHeaderBorder(gridInstance);

            //修改分页数据时【比如50、100时】，防止出现的纵向滚动条导致content与header部分错位
            _handeleGridPagerChange(gridInstance);
        });

        if (!options.showCount) { // 服务器没有返回总数
            // 防止pager对象不存在
            if (gridInstance.pager) {
                var $pager = gridInstance.pager.element;
                $pager.addClass("no-show-count");
            }
        }

        _initBatchCopy(gridInstance);

        // 按Tab键，切换当前编辑的单元格
        $grid.keydown(function (event) {
            var checkedRows = $grid.find(".k-grid-content tr.i-state-selected");
            var lockedRows = $grid.find(".k-grid-content-locked tr.i-state-selected");
            var cells = [];
            var rowLength = 0;

            each(checkedRows, function (i, item) {
                if (lockedRows.length === 0) {
                    rowLength = item.children.length;
                } else {
                    rowLength = lockedRows[i].children.length + item.children.length;

                    each(lockedRows[i].children, function () {
                        if ($(this).find("[type='checkbox']").length > 0) {
                            return rowLength = rowLength - 1;
                        }
                        cells.push(this)
                    });
                }

                each(item.children, function () {
                    cells.push(this);
                });
            });

            var editingCell = $grid.find("td[data-role='editable']");
            var index = _.indexOf(cells, editingCell[0]);

            switch (event.keyCode) {
                case 9 :
                    // Tab切换前先进行校验
                    if (!$(editingCell.find("input")).kendoInputValidate().valid) {
                        var validator = $("#" + __eiInfo.get("efFormEname")).kendoValidator().data("kendoValidator");
                        validator.validateInput($(editingCell.find("input")));
                        return false;
                    }
                    event.preventDefault();
                    if (event.shiftKey && index - 1 >= 0) {
                        editingCell.find("input").blur();
                        gridInstance.editCell($(cells[index - 1]));
                        break;
                    }
                    if (index + 1 < cells.length) {
                        var columns = gridInstance.columns;
                        for (; index + 1 < cells.length;) {
                            if (columns[1 + (index + 1) % (columns.length - 1)].readonly &&
                                // 新增时Tab切换不跳过readonly列
                                !gridInstance.dataItem(editingCell.closest("tr")).isNew()) {
                                index = index + 1;
                            } else
                                break;
                        }
                        editingCell.find("input").blur();
                        gridInstance.editCell($(cells[index + 1]));
                    }
                    break;
                case 38:
                    event.preventDefault();
                    if (index - rowLength >= 0) {
                        editingCell.find("input").blur();
                        gridInstance.editCell($(cells[index - rowLength]));
                    }
                    break;
                case 40:
                    event.preventDefault();
                    if (index !== -1 && index + rowLength < cells.length) {
                        editingCell.find("input").blur();
                        gridInstance.editCell($(cells[index + rowLength]));
                    }
                    break;
                default:
                    break;
            }
        });

        // 处理column的快捷菜单
        if (!!options.shortcutMenu) {
            // 获取menu列表信息
            var menus = IPLATUI.Config.EFColumnShortcutMenu;
            var blockId = options.blockId;

            if (menus && $.isArray(menus) && menus.length) {
                var columnMenu = $("#column-shortcut-menu").html() || '';
                var columnMenuTemplate = kendo.template(columnMenu)({
                    menus: menus
                });

                // 使用kendoContextMenu组件去组装shortcutMenu
                $('#ef_shortcutMenu_' + blockId).html(columnMenuTemplate).kendoContextMenu({
                    target: "#ef_grid_" + blockId,
                    filter: "th.k-header",
                    open: function (e) {
                        // 过滤
                        var shortcut_menu = $(e.target).attr('shortcut_menu');
                        if (shortcut_menu === 'false') {
                            e.preventDefault();
                        }
                    },
                    select: function (e) {
                        var column = $(e.target).data('field');
                        var menu = _.find(menus, function (menu) {
                            return menu.type === $(e.item).data('type');
                        });
                        // 处理函数
                        menu.invokeFn && menu.invokeFn(gridInstance, column);
                    }
                });
            }
        }

        if (options.finalSumType && options.finalSumTypeScrollPosition === 'bottom') {
            gridInstance.bind('dataBound', function (e) {
                var grid = e.sender, lockedTr, tr, wrap;
                if (grid.lockedFooter) {
                    lockedTr = grid.lockedFooter.find('tr');
                    grid.lockedTable.append(lockedTr);
                }

                wrap = grid.footer.find('.k-grid-footer-wrap');
                grid.table.append(wrap.find('tr'));

                grid.footer.hide();
            })
        }

        // 打开列头和辅助横向滚动条的悬浮开关
        if (options.isFloat === true && $(".k-grid").length > 0) {

            // 纵向：数据较多，页面纵向滚动
            $(window).unbind('scroll').scroll(kendo.throttle(_gridFloatHandler, 100));

            // 横向：resize列宽
            // TODO 固定列resize时存在偶发异常 无法进行resize
            gridInstance.resizable.bind("resizeend", kendo.throttle(scrollSync, 100));

            // 底部横向滚动条
            $(document.body).append("<div id='floating-scrollbar-" + options.blockId + "' style='position: fixed; bottom: 0; height: 30px; " +
                "overflow-x: auto; overflow-y: hidden; display: none; '>" +
                "<div style='border: 1px solid rgb(255, 255, 255); opacity: 0.01;'></div>" +
                "</div>");
        }

    }

    /**
     * EFGrid组件构造
     *
     * @param options
     * @return {*}
     */
    IPLAT.xGrid = function (options) {
        var gridInstance = null,
            kendoGridOptions = _beforeInit(options);

        if (kendoGridOptions) {
            gridInstance = $("#" + options.gridId).kendoGrid(kendoGridOptions).data("kendoGrid");

            _afterInit(kendoGridOptions, gridInstance);

            if (kendoGridOptions.autoBind === false) {
                var blockId = gridInstance.getBlockId();
                var rowsLength = options.eiInfo.getBlock(blockId).getRows().length;

                if (options.autoDraw === "dynamic") {
                    // 根据返回的EiInfo 动态渲染列
                    if (options.eiInfo.get(DYNAMIC_COLUMN) !== "keep") {
                        // 防止递归调用
                        gridInstance.setEiInfo(options.eiInfo, "keep");

                    }
                } else {
                    if (rowsLength > 0) {
                        gridInstance.setEiInfo(options.eiInfo);
                    }
                }

            }

            // 初始无数据时header底部的border处理
            _handleGridHeaderBorder(gridInstance);

            // 底部border
            _handleGridBottomBorder(gridInstance);

            // 设置了enable=false并且第一列为隐藏列时的border处理
            _handeleGridHiddenLeftBorder(gridInstance);

            //设置了enable=false并且没有设置固定列的情况下grid-content的宽度处理
            // _handeleGridContentWidth(gridInstance);

            gridInstance.bind(SAVECHANGES, function (e) {
                var grid = e.sender;

                if (!grid.isValid()) { // 保存之前的校验
                    e.preventDefault();
                }

                if (isFunction(kendoGridOptions[ON_SAVE])) {
                    kendoGridOptions[ON_SAVE].call(grid, e);
                }
            });

            gridInstance.bind(ON_CANCEL + NS, kendoGridOptions[ON_CANCEL]);
            gridInstance.bind(ON_DELETE + NS, kendoGridOptions[ON_DELETE]);


            gridInstance.dataSource.bind("requestStart", function (e) {
                if (gridInstance.trigger(BEFORE_REQUEST + NS, {type: e.type})) {
                    e.preventDefault();
                }

            });

            gridInstance.bind(BEFORE_REQUEST + NS, kendoGridOptions[BEFORE_REQUEST]);
            gridInstance.bind(ON_SUCCESS + NS, kendoGridOptions[ON_SUCCESS]);
            gridInstance.bind(ON_FAIL + NS, kendoGridOptions[ON_FAIL]);

            gridInstance.bind(BEFORE_ADD + NS, kendoGridOptions[BEFORE_ADD]);
            gridInstance.bind(ON_ADD + NS, kendoGridOptions[ON_ADD]);
            gridInstance.bind(AFTER_ADD + NS, kendoGridOptions[AFTER_ADD]);

            gridInstance.bind("dataBinding", function (e) {
                if (e.action === "add") {
                    if (gridInstance.trigger(ON_ADD + NS, e)) {
                        e.preventDefault(); // 不再触发AFTER_ADD
                    }
                }
            });

            gridInstance.bind(BEFORE_EDIT + NS, kendoGridOptions[BEFORE_EDIT]);
            gridInstance.bind(AFTER_EDIT + NS, kendoGridOptions[AFTER_EDIT]);

            gridInstance.bind(ON_CHECKROW + NS, kendoGridOptions[ON_CHECKROW]);
            gridInstance.bind(ON_CHECK_ALLROWS + NS, kendoGridOptions[ON_CHECK_ALLROWS]);
            gridInstance.bind(ON_CELLCLICK + NS, kendoGridOptions[ON_CELLCLICK]);
            gridInstance.bind(ON_ROWCLICK + NS, kendoGridOptions[ON_ROWCLICK]);
            gridInstance.bind(ON_ROWDBLCLICK + NS, kendoGridOptions[ON_ROWDBLCLICK]);

            // 自定义事件的处理
            if (isFunction(kendoGridOptions.loadComplete)) {
                kendoGridOptions.loadComplete(gridInstance);
            }

            if(!IPLAT.isUndefined(kendoGridOptions.dropTarget)){
                gridInstance.wrapper.kendoDropTarget(kendoGridOptions.dropTarget);
            }

            // 处理grid hover事件
            gridInstance.element.on("mouseover", "tr", function (e) {
                var _uid = $(this).data("uid");
                $("tr[data-uid='" + _uid + "']").addClass("k-td-hover");
            });

            gridInstance.element.on("mouseout", "tr", function (e) {
                var _uid = $(this).data("uid");
                $("tr[data-uid='" + _uid + "']").removeClass("k-td-hover");
            });


            var _tooltip = _.throttle(function (td, msg, type) {
                var $this = $(td),
                    parent = $this.closest("tr"),
                    width = $this.width(),
                    text = kendo.htmlEncode($this.text().trim()),
                    errorMsg = (_.isString(msg) && kendo.htmlEncode(msg)) || text,

                    // errorMessageText = "<span class='k-icon k-i-warning'></span>&nbsp;&nbsp;" + htmlDecode(errorMsg),
                    errorMessageText = "<span class='k-icon k-i-warning'></span>&nbsp;&nbsp;" + errorMsg,
                    fontSize = $this.css('font-size'),
                    $otherTooltips = $("[data-role='tooltip']"),
                    fontWidth = IPLAT.getCurrentStrWidth(text, fontSize),
                    toolTipOptions = {
                        showAfter: 0,
                        animation: false,
                        hide: function () {
                            // 清除tooltip
                            $this.removeAttr('data-role');
                            this.destroy();
                        }
                    };

                // 处理页面上可能存在的tooltip, 让其消失
                each($otherTooltips, function (i, tooltip) {
                    var kendoToolTip = $(tooltip).data('kendoTooltip');

                    // 校验出错的tooltip的hide 不在此处理，参考iplat.ui.kendo.validator.js 中 showValidateMsg函数
                    var inValid = $(tooltip).is("input.k-invalid");

                    if (kendoToolTip instanceof kendo.ui.Tooltip && !inValid) {
                        kendoToolTip.hide();
                    }
                });


                if (type === 'error' && parent.hasClass('i-state-selected')) { // 校验出错时的tooltip

                    extend(toolTipOptions, {width: DEFAULT_ERROR_TOOLTIP_WIDTH, content: errorMessageText});

                    var toolTip = $this.kendoTooltip(toolTipOptions).data("kendoTooltip");
                    toolTip.show();

                    var $toolTip = toolTip.popup.element;
                    // 临时使用 css 重置样式，后续样式调整
                    $toolTip.css('background', INVALID_COLOR);
                    $toolTip.find('.k-callout-n').css('border-bottom-color', INVALID_COLOR);

                } else {
                    // 单元格文字过长的tooltip
                    // tr,td结点没有被选中,出现tooltip
                    // 选中内容，就不出现tooltip
                    // 主从表中，主表包含子表的td也不展示
                    if (!($this.hasClass('k-state-selected') || parent.hasClass('i-state-selected') || $this.hasClass('k-detail-cell'))) {
                        if (fontWidth >= width) {
                            if (fontWidth > DEFAULT_TOOLTIP_WIDTH) {
                                $.extend(toolTipOptions, {width: DEFAULT_TOOLTIP_WIDTH});
                            }
                            $.extend(toolTipOptions, {content: text});

                            // 每次tooltip都是重新渲染
                            var longTextTooltip = $this.kendoTooltip(toolTipOptions).data("kendoTooltip");
                            longTextTooltip.show();
                        }
                    }
                }
            }, 400);

            // tooltip处理Grid中td展示信息过长
            gridInstance.element.on("mouseover", "td", function (e) {
                var $this = $(this);
                var errorMsg = $.trim($this.data(TD_ERROR_MSG)) || '';
                if (errorMsg) {
                    _tooltip(this, errorMsg, 'error');
                } else {
                    _tooltip(this);
                }
            });

            _amazingHandler(gridInstance);
        }

        return gridInstance;
    };


    extend(true, IPLAT, {
        Grid: IPLAT.xGrid,
        Transport: {
            AbstractTransport: AbstractTransport,
            EiServiceTransport: EiServiceTransport,
            RestfulTransport: RestfulTransport,
            TransportFactory: TransportFactory
        }
    });


    /**
     * 回填的EiBlock的列和当前Grid列的对应关系Map
     *
     * 理论上回填的EiBlock的列应该包含当前Grid的所有列，
     * 回填的EiBlock的不包含Grid的列时，pos为-1
     *
     * @param inBlock
     */
    kendo.ui.Grid.fn.getColumnMap = function (inBlock) {
        var that = this,
            eiBlock = that.eiBlock || that.getInitBlock();

        var metas = eiBlock.getBlockMeta().getMetas();

        var columns = inBlock.getBlockMeta().getMetas();

        var indexMap = {};

        // 维护Grid列和待赋值的Block的列的key的关系
        for (var key in metas) {
            var column = columns[key] || {pos: -1};
            indexMap[key] = column["pos"];
        }

        return indexMap;
    };

    /**
     * 设置单行的数据，如果Grid已有的 index 数据行无效，就在Grid顶部添加新行
     *
     * @param {Number} index     grid的行号
     * @param {kendo.data.Model} sourceModel sourceModel应该包含当前Grid的所有数据列
     */
    kendo.ui.Grid.fn.setRow = function (index, sourceModel) {
        var that = this,
            model = that.dataSource.at(index),
            idField = that.dataSource.options.schema.model.id, // 主键field name
            fields = that.dataSource.options.schema.model.fields,
            modelJSONObj = typeof sourceModel.toJSON === 'function' ?
                sourceModel.toJSON() : sourceModel; // 变为JSON格式的Object对象

        var BizModel = kendo.data.Model.define({
            id: idField,
            fields: fields,
            shouldSerialize: iplatFieldFilter
        });

        var destModel = new BizModel(modelJSONObj);
        // dirty = true 表明model存在脏数据，kendo在保存时候，会对脏数据进行提交。
        destModel.dirty = true;

        if (model) {
            destModel["_events"] = model["_events"]; // model -> change -> dataSource -> change -> grid
            destModel.id = model[idField]; // 防止id _defaultId一致，把destModel误判成isNew
            destModel[idField] = model[idField]; // 原有数据行的主键不能被set修改
            that.dataSource.data()[index] = destModel;
            destModel.set("uid", model.uid); //保持原有的uid， 保证checked列表不变化
        } else {
            this.dataSource.insert(0, destModel);
        }
    };


    /**
     * 将EiInfo中的EiBlock数据追加到Grid中
     * EiInfo中EiBlock的列信息和Grid的EiBlock的列信息不一致
     *
     * @param inInfo    待添加的EiInfo
     * @param bottom    默认在Grid的顶部添加行，为true时 在Grid的底部添加行
     * @param checked   默认勾选新增的行, 为false时不勾选
     */
    kendo.ui.Grid.fn.addEiInfo = function (inInfo, bottom, checked) {
        var that = this,
            blockId = that.getBlockId();

        var inBlock = inInfo.getBlock(blockId);

        if (inBlock) {
            var indexMap = that.getColumnMap(inBlock);
            var models = [];

            each(inBlock.getRows(), function (i, row) {
                models.push(IPLAT.Util.block2Model(i, inBlock, indexMap));
            });

            that.addRows(models, bottom, checked);
        }

    };

    /**
     * Grid的当前页新添加行数据
     *
     * @param rows      单个Model 或者Model数组
     * @param bottom    默认在Grid的顶部添加行，为true时 在Grid的底部添加行
     * @param checked   默认勾选新增的行, 为false时不勾选
     */
    kendo.ui.Grid.fn.addRows = function (rows, bottom, checked) {
        var that = this,
            dataSource = that.dataSource,
            data = dataSource.data(),
            rows2Add = [], // kendo.data.Model
            models = $.isArray(rows) ? rows : [rows],
            handlers = IPLAT.Util.unbindHandlers(that.dataSource, "change");

        // Model.define 影响editable的editor的fieldType的判断，
        // 解决复制新增数据列的editor变为numberbox的问题
        var idField = that.dataSource.options.schema.model.id || "";
        var fields = that.dataSource.options.schema.model.fields;

        var kendoModel;

        // 当前Grid的使用的Model
        var BizModel = kendo.data.Model.define({
            id: idField,
            fields: fields,
            shouldSerialize: iplatFieldFilter
        });

        each(models, function (i, model) {
            // addRows的Model对象有可能来自子窗口，此时使用instanceof是不安全的
            if (IPLAT.isKendoModel(model)) {
                // 复制新增时，新的行数据的uid要唯一
                kendoModel = new BizModel(model.toJSON());

                rows2Add.push(kendoModel);
            } else if (isPlainObject(model)) {
                kendoModel = new BizModel(model.toJSON());

                rows2Add.push(kendoModel);
            }
        });

        that._checkedRows = [];

        var unchecked = checked === false;

        if (!unchecked) {
            // 勾选新增的行
            var copyNewRows = function (e) {
                each(e.items, function (index, item) {
                    that._checkedRows.push(item.uid);
                });
            };
            that.dataSource.one("change", copyNewRows);
        }

        // 批量复制新增，防止触发大量的dataBound事件
        var newIndex = 0;
        if (bottom) {

            // 在Grid底部添加行
            newIndex = data.length;
            data.push.apply(data, rows2Add); // ObservableArray push
        } else {
            data.unshift.apply(data, rows2Add); // trigger "dataBound"
        }

        // 重置id, isNew = true
        for (var length = newIndex + rows2Add.length; newIndex < length; newIndex++) {
            data[newIndex]._defaultId = data[newIndex]._defaultId || '';
            data[newIndex].id = data[newIndex]._defaultId;
        }

        IPLAT.Util.bindHandlers(that.dataSource, "change", handlers);

        that.dataSource.trigger("change", {items: rows2Add, action: "add"});
    };

    /**
     * 删除Grid中的行数据
     *
     * @param list      单行号或者多行号, 也可以是某行数据的Model对象
     * @param binding   删除时，是否刷新Grid，为false时，不刷新Grid
     */
    kendo.ui.Grid.fn.removeRows = function (list, binding) {
        var that = this,
            dataSource = that.dataSource,
            data,
            index,
            length,
            models = [],
            deleteIndex;

        var handlers = IPLAT.Util.unbindHandlers(that.dataSource, "change");

        if (IPLAT.isKendoModel(list)) {
            models.push(list);
        } else if ($.isArray(list) && _.isNumber(list[0])) {
            models = that.getRows(list);
        } else {
            models = list; // [model, model, ...]
        }

        for (index = 0, length = models.length; index < length; index++) {
            data = dataSource.data();
            deleteIndex = _.indexOf(data, models[index]);
            data.splice.call(data, deleteIndex, 1);
        }

        IPLAT.Util.bindHandlers(that.dataSource, "change", handlers);

        if (binding !== false) {
            that.dataSource.trigger("change", {items: models, action: "remove"});
        }
    };

    /**
     * 获取EFGrid的blockId
     * @return {string}
     */
    kendo.ui.Grid.fn.getBlockId = function () {
        return this.options.blockId || "";
    };

    /**
     * 使用EiInfo刷新EFGrid
     * @param eiInfo
     */
    kendo.ui.Grid.fn.setEiInfo = function (eiInfo) {
        var that = this,
            handlers,
            blockId = that.getBlockId(),
            eiBlock = eiInfo.getBlock(blockId),
            dataSource = that.dataSource;

        if (arguments[1]) {
            // 动态渲染列的标记
            eiInfo.set(DYNAMIC_COLUMN, arguments[1]);
        }

        if (eiBlock) {
            var limit = eiBlock.get(EiConstant.LIMIT) || 10,
                offset = eiBlock.get(EiConstant.OFFSET) || 0;

            // 关闭change事件， 防止重复触发dataBinding等后续事件
            handlers = IPLAT.Util.unbindHandlers(that.dataSource, "change");
            var successObj = eiInfo.toJSON();
            if(IPLAT.isAvailable(this.options.aggregate)) {
                successObj["__aggregate__"] = this.options.aggregate;
            }
            dataSource.success(successObj);
            dataSource._skip = offset;
            dataSource._take = limit;
            IPLAT.Util.bindHandlers(that.dataSource, "change", handlers);
            dataSource._process(dataSource._data);
        }
    };
    /**
     * 获取kendoGrid对象中的每次操作结果的EiInfo
     */
    kendo.ui.Grid.fn.getEiInfo = function () {
        return this.eiInfo || this.options.eiInfo;
    };


    function findGroupColumns(groupColumns,column,groupedColumns){
        if(IPLAT.isAvailable(column.columns)){
            var currentColumnName = column.field;
            groupColumns[currentColumnName] = [];
            _.each(column.columns , function(column){
                groupColumns[currentColumnName].push(column.field);
                if(IPLAT.isAvailable(groupedColumns)) {
                    groupedColumns.add(column.field);
                }
                if(IPLAT.isAvailable(column.columns)){
                    findGroupColumns(groupColumns, column, groupedColumns);
                }
            });
        }
    }

    function pushColumnsToArray(groupColumns,columnName,posArray) {
        var isGroupColumn = IPLAT.isAvailable(groupColumns[columnName]);
        if(isGroupColumn){
            var nextColumns = groupColumns[columnName];
            _.each(nextColumns, function(columnElem){
                pushColumnsToArray(groupColumns, columnElem, posArray);
            });
        }else{
            posArray.push(columnName);
        }
    }

    /**
     * 获取Grid当前页各列显示值结果的EiInfo
     */
    kendo.ui.Grid.fn.getDisplayEiInfo = function (blockId) {

        // 执行具体的业务逻辑，在前端产生要导出的EiInfo
        var that = this,
            eiInfo = new EiInfo(),
            eiBlockId = blockId || "result",
            eiBlock = new EiBlock(eiBlockId),
            eiBlockMeta = new EiBlockMeta(eiBlockId),
            groupColumns = {},
            groupColDesc = {},
            groupedColumns = new GridSet(),
            columnMap = new GridMap(),
            posArray = [];

        // 获取列信息
        var gridElement = that.element,
            gridHeader = gridElement.find(".k-grid-header"),  // 标题
            gridLock = gridElement.find(".k-grid-content-locked"),  // 固定列
            gridContent = gridElement.find(".k-grid-content");  // 非固定列

        var headerTables = gridHeader.find("table"),
            lockTable = gridLock.find("table"),
            contentTable = gridContent.find("table");

        _.each(that.columns, function (column) {
            findGroupColumns(groupColumns, column, groupedColumns);
        });
        // 列头信息
        _.each(headerTables, function (headerTable) {
            _.each($(headerTable).find("th"), function (th) {
                // 非小计总计的情况
                if (IPLAT.isUndefined(that.options.sumType) || that.options.sumType === 'none') {
                    if (!!$(th).data("field") && th.style.display !== "none") {
                        // 剔除勾选列 序号列 隐藏列
                        var eiColumn = new EiColumn($(th).data("field"));
                        eiColumn.descName = $(th).text();
                    }
                } else {
                    // 小计总计在勾选列
                    if ($(th).find("input[type='checkbox']").length === 1) {
                        // 新增小计总计列的EiColumn
                        var eiColumn = new EiColumn("sumType");
                    }
                    // 小计总计在序号列 无勾选列的情况下
                    if (!that.options.enable && that.options.rowNo && !$(th).data("field")) {
                        var eiColumn = new EiColumn("sumType");
                    }
                    // 其他列 非勾选列 非序号列 非隐藏列
                    if (!!$(th).data("field") && th.style.display !== "none") {
                        var eiColumn = new EiColumn($(th).data("field"));
                        eiColumn.descName = $(th).text();
                    }
                }

                if (!IPLAT.isUndefined(eiColumn)) {
                    // eiBlockMeta.addMeta(eiColumn);
                    //记录临时顺序列表，之后再统一校验排序
                    var isGroupedColumn = groupedColumns.has(eiColumn.name);
                    if(!isGroupedColumn){
                        pushColumnsToArray(groupColumns, eiColumn.name,posArray);
                    }
                    //存放Map对象中，方便后续组装
                    columnMap.set(eiColumn.name, eiColumn);
                }
            });
        });

        //将所有column按最终排序输出到eiBlock中，并将group关系写到block attr中
        _.each(posArray, function (columnName) {
            eiBlockMeta.addMeta(columnMap.get(columnName));
        });
        eiBlock.set("groupColumns", groupColumns);
        for(var columnName in groupColumns){
            var groupColumn = columnMap.get(columnName);
            groupColDesc[columnName] = groupColumn.descName;
        }
        eiBlock.set("groupColumnsCname", groupColDesc);
        //var arrGroupedColumns = [];
        // groupedColumns.forEach(function (element) {
        //     arrGroupedColumns.push(element);
        // });
        var arrGroupedColumns = groupedColumns.valuesLegacy();
        eiBlock.set("groupedColumns", arrGroupedColumns);

        // 固定列信息
        if (lockTable.length > 0) {
            _.each(lockTable.find("tr"), function (tr) {
                    var trRow = [];
                    _.each($(tr).find("td"), function (td) {
                        // 非小计总计的情况
                        if (IPLAT.isUndefined(that.options.sumType) || that.options.sumType === 'none') {
                            if ($(td).find("input[type='checkbox']").length === 0 &&
                                $(td).find("span.row-no").length === 0 &&
                                td.style.display !== "none") {
                                // 剔除勾选列 序号列 隐藏列
                                trRow.push($(td).text());
                            }
                        } else {
                            // 有勾选列和序号列
                            if (that.options.enable && that.options.rowNo) {
                                // 剔除小计总计行：序号列的单元格的内容，解决错列问题
                                if ($(td).prev().find(".i-sum-wrapper").length === 0 &&
                                    $(td).find("span.row-no").length === 0 &&
                                    td.style.display !== "none") {
                                    // 剔除隐藏列
                                    trRow.push($(td).text());
                                }
                            } else {
                                if (td.style.display !== "none") {
                                    // 剔除隐藏列
                                    trRow.push($(td).text());
                                }
                            }
                        }

                    });
                    eiBlock.addRow(trRow);
                }
            )
        }

        // 非固定列信息
        if (contentTable.length > 0) {
            _.each(contentTable.find("tr"), function (tr, trIndex) {
                var trRow = [];
                _.each($(tr).find("td"), function (td) {
                    if (td.style.display !== "none") {
                        // 剔除隐藏列
                        if (!IPLAT.isUndefined(eiBlock.rows[trIndex])) { // 有固定列
                            eiBlock.rows[trIndex].push($(td).text());
                        } else {
                            trRow.push($(td).text()); //无固定列
                        }
                    }
                });
                // 无固定列
                if (!(trRow.length === 0))
                    eiBlock.addRow(trRow);
            })
        }

        eiBlock.setBlockMeta(eiBlockMeta);
        eiInfo.addBlock(eiBlock);

        return eiInfo;
    };

    /**
     * 获取当前Grid的查询条件
     */
    kendo.ui.Grid.fn.getQueryInfo = function () {
        var that = this,
            filter = that.dataSource.filter(); // kendoGrid上的查询条件

        var postString = that.dataSource.options.transport.parameterMap({
            filter: filter
        }, READ_ACTION);

        // queryInfo暂不加入结果集(result EiBlock)
        return EiInfo.parseJSONString(postString);
    };

    /**
     * kendoGrid渲染结束后，自定义查询
     * 注意 此API 不会使用query回调中的EiInfo，完全以queryInfo为查询条件，提交到后台
     *
     * @param {EiInfo} queryInfo 查询条件
     */
    kendo.ui.Grid.fn.postQuery = function (queryInfo) {
        var that = this;

        that._postQueryInfo = queryInfo;
        that.dataSource.page(1);
    };


    /**
     * 设置grid的EiBlock， 会刷新Grid。
     * @param {EiBlock} eiBlock grid将使用的EiBlock
     */
    kendo.ui.Grid.fn.setEiBlock = function (eiBlock) {
        if (eiBlock.getBlockId() === this.getBlockId()) {
            var eiInfo = this.getEiInfo();
            eiInfo.addBlock(eiBlock);
            this.setEiInfo(eiInfo);
            this.eiBlock = eiBlock;
        }
    };

    kendo.ui.Grid.fn.getEiBlock = function () {
        return this.eiBlock;
    };

    /**
     * 获取Grid中的固定列的配置信息。 [{field: "", locked: true},{...}]
     * @param exclude 是否排除checkbox列
     * @return {Array}
     */
    kendo.ui.Grid.fn.getLockedColumns = function (exclude) {
        var that = this, lockedColumns = [];
        each(that.columns, function (i, column) {
            if (column.locked) {
                lockedColumns.push(column);
            }
        });
        if (that.options.enable && exclude) {

            // 排除checkbox固定列
            lockedColumns.shift();
        }
        return lockedColumns;
    };

    /**
     * 获取自定义区域弹出Grid
     * 包括普通弹出列grid 和 批量赋值弹出grid
     * @param $inqu  自定义查询区DOM
     * @returns {*|jQuery}
     */
    kendo.ui.Grid.fn.getPopupGridByInqu = function ($inqu) {
        if ($inqu.length > 0) {
            var containerId = $inqu.closest("div[data-role='window']").attr("id"),
                gridId = containerId.replace('ef_popup', 'ef_grid');

            return $("#" + gridId).data("kendoGrid");
        }
    };

    /**
     * 模拟创建一个input
     * @param value 传入的值
     * @param column 列属性
     * @return {element}
     */
    var mockInput = function (value, column) {
        var $input = $('<input>'),
            inputValue = IPLAT.isAvailable(value) ? value : '', // 确保value为0时会返回0，而不是''
            attributes = column.attributes || {};
        $input.attr(attributes);
        $input.val(inputValue);
        return $input;
    };

    /**
     * 校验 model 的值是否合法
     * @param model 对象
     * @return {Array}
     */
    kendo.ui.Grid.fn.validModel = function (model) {
        // 获取column的信息
        var that = this,
            columnNames,
            modelJSON,
            column,

            // 存储 model 的校检结果
            validatorList = [];

        if (!IPLAT.isKendoModel(model)) {
            return validatorList;
        }

        // 获取原生的 modelJSON 的和 name
        modelJSON = model.toJSON() || {};
        columnNames = keys(modelJSON) || [];

        each(columnNames, function (i, name) {
            if (isString(name)) {
                column = that.getColumn(name);
                if (column) {

                    // 验证单个输入框的结果
                    var $input = mockInput(modelJSON[name], column);
                    var result = $input.kendoInputValidate();
                    extend(result, {name: name});
                    validatorList.push(result);
                }
            }
        });

        return validatorList;
    };

    /**
     * 对 column 设置错误提示信息
     * @param model 对象
     * @param column 列名
     * @param errorMsg 错误信息
     */
    kendo.ui.Grid.fn._setCellErrorMsg = function (model, column, errorMsg) {
        var that = this,
            $tr,
            $cell;

        if (!IPLAT.isKendoModel(model)) {
            return;
        }

        if (!column) {
            return;
        }

        $cell = that.getCell(model, column);
        $cell.addClass(TD_VALIDATOR_CLASS);
        $cell.data(TD_ERROR_MSG, errorMsg);
    };

    /**
     * 获取Grid中cell的dom元素
     * @param model 对象
     * @param column 列名
     * @return {element}
     */
    kendo.ui.Grid.fn.getCell = function (model, column) {
        var that = this,
            $tr,
            $cell,
            uid,
            offset,
            cellIndex;
        if (!IPLAT.isKendoModel(model)) {
            return;
        }

        if (!column) {
            return;
        }
        uid = model.uid;

        // 分为两种情形进行处理, locked 和非 locked
        if (that.isCellLocked(column)) {
            cellIndex = that.getColumnIndex(column);
            $tr = that.element.find(".k-grid-content-locked tr[data-uid=" + uid + "]");
            $cell = $tr.find("td[role='gridcell']").eq(cellIndex);
        } else {
            offset = that.getLockedColumns().length || 0;
            cellIndex = that.getColumnIndex(column);
            $tr = that.element.find(".k-grid-content tr[data-uid=" + uid + "]");

            // td[role='gridcell'] 能够直接指明是需要编辑的column, 防止 checkbox, 序列号, 主从表
            $cell = $tr.find("td[role='gridcell']").eq(cellIndex - offset);
        }

        return $cell;
    };

    /**
     * 判断整个Grid的输入是否合法
     * @param validateAll 是否对整个数据行校验
     * @param rows 需要校检的行
     * @return {boolean}
     */
    kendo.ui.Grid.fn.isValid = function (validateAll, rows) {
        var that = this,
            $rows,
            model,
            validatorList,
            valid = true;

        if (that.element.find(".k-invalid").length > 0) {
            return false;
        }

        // TODO: popupInput,自定义校验
        $rows = rows || that.tbody.find("tr");

        for (var i = 0; i < $rows.length; i++) {
            model = that.dataItem($rows[i]);
            if (model && (validateAll || model.isNew())) {
                validatorList = that.validModel(model);
                each(validatorList, function (index, validator) {
                    if (!validator.valid) {
                        that._setCellErrorMsg(model, validator.name, validator.errorMsg);
                        valid = false;
                    }
                });
            }
        }

        return valid;
    };

    /**
     * 重写refresh接口，提供新增完成后的回调功能
     */
    kendo.ui.Grid.fn.refresh = (function (refresh) {
        return function (e) {
            var that = this;

            refresh.call(that, e); // dataBinding-->dataBound

            if (e && e.action === "add") {
                that.trigger(AFTER_ADD + NS, {
                    action: "add",
                    index: e.index,
                    items: e.items
                });
            }
        }
    })(kendo.ui.Grid.fn.refresh);

    /**
     * 重写新增接口，提供复制新增，新增事件回调功能
     */
    kendo.ui.Grid.fn.addRow = (function (addRow) {
        return function () {
            var that = this,
                copyToAdd = that.options.copyToAdd,
                columns = that.columns,
                rows = that.getCheckedRows();
            // 设置主键的defaultValue
            var setPrimaryKeyDefaultValue = function (grid, columns) {
                var createdItems = grid.dataSource.created();
                _.each(columns, function (column) {
                    if (!!column.defaultValue && column.primaryKey === true) {
                        _.each(createdItems, function (item) {
                            item[column.field] = column.defaultValue;
                            that.editCell(that.getCell(item, column.field))
                        })
                    }
                })
            };

            // addRow的时候必须要触发editCell，否则新增的行无法勾选，没有选中的样式；
            // kendoGrid原生的可编辑列的判断逻辑，在固定列存在时(checkbox列)有问题，
            // 从而无法进入editCell逻辑， 如果不加判断editCell，有时候会触发两次编辑
            var editFirstRow = function (force) {
                // 优化实现方式
                // if (force) {
                for (var i = 0; i < 50; i++) { // 防止序号列grid复制新增报错
                    var colStr = i.toString();
                    var colNextStr = (i + 1).toString();
                    var field = that.element.find("th[data-index='" + colStr + "']").data('field');
                    if (!IPLAT.isAvailable(field)) {
                        field = that.element.find("th[data-index='" + colNextStr + "']").data('field');
                    } else {
                        break;
                    }
                }
                //此处进行判断，直接点击新增是否触发了editCell，在addRow中进行了勾选
                if(that._checkedRows.length == 0){
                    var model = that.dataSource.data()[0];
                    var $cell = that.getCell(model, field);
                    if ($cell.length) {
                        that.editCell($cell);
                    }
                }else{
                    //对选中的所有行进行复制新增时，均变为选中状态
                    var checkedLength = that._checkedRows.length;
                    $(that.dataSource.data()).each(function (index) {
                        //确保最后是第一行的cell处于editor状态
                        var model = that.dataSource.data()[checkedLength - index - 1];
                        var $cell = that.getCell(model, field);
                        if ($cell.length) {
                            that.editCell($cell);
                        }
                        if(index == checkedLength - 1){
                            return false;
                        }
                    })
                }
                // var model = that.dataSource.data()[0];
                // var $cell = that.getCell(model, field);
                // if ($cell.length) {
                //     that.editCell($cell);
                // }
                //}
            };

            if (!that.trigger(BEFORE_ADD + NS, {}) && that.isValid()) { // 增加记录前的回调
                // 拷贝增加并且存在选中时候进行 copy 增加
                if (copyToAdd && rows.length > 0) {
                    var addHTML = kendo.template($("#del-template").html())({
                        message: "[" + rows.length + "]条记录被选中，将它们复制为新记录吗？",
                        ok: '确定',
                        cancel: '取消'
                    });

                    WindowUtil({
                        title: "新增数据",
                        content: addHTML,
                        ok: function () {
                            var kendoWindow = this.data("kendoWindow");
                            that.addRows(rows);
                            editFirstRow(true);
                            kendoWindow.close();
                        },
                        cancel: function () {
                            var kendoWindow = this.data("kendoWindow");
                            that._checkedRows = []; // TODO: 取消已选中的行?
                            addRow.call(that);
                            setPrimaryKeyDefaultValue(that, columns); //新增设置主键defaultValue值
                            kendoWindow.close();
                            editFirstRow();
                        }
                    });

                } else {
                    addRow.call(that);
                    setPrimaryKeyDefaultValue(that, columns); //新增设置主键defaultValue值
                    editFirstRow();
                }
            }
        }
    })(kendo.ui.Grid.fn.addRow);

    /**
     * 重写单元格的编辑方法，提供勾选后编辑，编辑事件回调
     */
    kendo.ui.Grid.fn.editCell = (function (editCell) {
        return function ($cell) {
            $cell = $($cell);
            var that = this, model = that._modelForContainer($cell);

            if (!model) {
                return;
            }

            var fake = arguments[1], // 不需要触发事件，模拟调用editCell
                beforeEditHandlers,
                editHandlers,
                $tr = $cell.closest("tr"), // $contentRow
                row = $tr.index(),
                col = that.cellIndex($cell),
                isNew = model.isNew(),
                $lockedRow,
                $contentRow;

            // 清空 validator 样式和提示信息
            if ($cell.hasClass(TD_VALIDATOR_CLASS)) {
                $cell.removeClass(TD_VALIDATOR_CLASS);
                $cell.removeData(TD_ERROR_MSG);
            }

            if (isNew && !fake) { // 校验时，不勾选新行
                $contentRow = that.element.find(".k-grid-content tr[data-uid=" + $tr.data("uid") + "]");
                $lockedRow = that.element.find(".k-grid-content-locked tr[data-uid=" + $tr.data("uid") + "]");

                $lockedRow.addClass("i-state-selected k-state-selected");
                $contentRow.addClass("i-state-selected k-state-selected");

                var checkbox = $lockedRow.find("input.check-one")[0] || $contentRow.find("input.check-one")[0];
                if (checkbox) { // 选中checkbox
                    checkbox.checked = true;
                    that._checkedRows = _.union(that._checkedRows, [model.uid]);
                }
            }

            // 这里tr需要处理两种情况,一种是选中后编辑(i-state-selected),另外一种是使用JS进行自定义编辑处理(i-edit-row)
            if ($tr.hasClass("i-state-selected") || $tr.hasClass("i-edit-row")) {

                if (fake) { // 禁用事件
                    $cell.addClass("fake-edit"); // 防止editor的逻辑触发
                    beforeEditHandlers = IPLAT.Util.unbindHandlers(that, BEFORE_EDIT + NS);
                    editHandlers = IPLAT.Util.unbindHandlers(that, "edit");
                }

                // beforeEdit通过e.preventDefault(),可以控制不再进行编辑
                if (that.trigger(BEFORE_EDIT + NS, {
                    container: $cell,
                    row: row,
                    col: col, // 不是EiColumn中的pos
                    field: that.element.find("th[data-index='" + col + "']").data('field'),
                    model: model
                })) {
                    // 在beforeEdit设置return false，不影响trigger的返回值
                    return;
                }

                editCell.call(that, $cell);

                if (fake) { // 启用事件
                    IPLAT.Util.bindHandlers(that, BEFORE_EDIT + NS, beforeEditHandlers);
                    IPLAT.Util.bindHandlers(that, "edit", editHandlers);
                }

                // 编辑时选中单元格的内容，便于重新输入
                $cell.find("input").select();
            }
        };
    })(kendo.ui.Grid.fn.editCell);

    /**
     * 重写单元格的编辑结束，关闭单元格的方法，自定义触发单元格编辑结束事件
     */
    kendo.ui.Grid.fn.closeCell = (function (closeCell) {
        return function (isCancel) {
            var that = this,
                $cell = that._editContainer,
                fake = arguments[1], // 模拟的closeCell调用
                $tr,
                uid,
                model;

            if (!$cell) {
                return;
            }

            $tr = $cell.closest('tr');
            uid = $tr.attr(kendo.attr('uid'));
            model = that.dataSource.getByUid(uid);
            $cell.removeClass("i-invalid-cell");

            if (!fake) {
                // 结束编辑的回调事件处理
                var row = $tr.index(),
                    col = that.cellIndex($cell);

                if (that.trigger(AFTER_EDIT + NS, { // 自定义校验，不关闭单元格
                    container: $cell,
                    row: row,
                    col: col, // 注意，不是EiColumn中的pos
                    field: that.element.find("th[data-index='" + col + "']").data('field'),
                    model: model
                })) {

                    return;
                }
            }
            that._relatedRow($tr).removeClass("k-grid-edit-row");
            closeCell.call(that, isCancel);


        };

    })(kendo.ui.Grid.fn.closeCell);

    /**
     * 重写取消方法，自定义触发取消事件
     */
    kendo.ui.Grid.fn.cancelChanges = (function (cancelChanges) {
        return function () {
            var that = this;

            if (!that.trigger(ON_CANCEL + NS, {})) {
                cancelChanges.call(that);
            }
        };
    })(kendo.ui.Grid.fn.cancelChanges);

    /**
     * 通过field查找column
     * @param field String 列名
     * @return {} 此列配置列表
     */
    kendo.ui.Grid.fn.findColumnByField = function (field) {
        return find(this.columns, function (column) {
            return column['field'] === field;
        })
    };

    /**
     * 获取Grid中勾选中的列的方法
     *
     * @return {Array} 返回kendo.data.Model数组
     */
    kendo.ui.Grid.fn.getCheckedRows = function () {
        var that = this;
        var rows = [];

        each(that.element.find(".k-grid-content tr.i-state-selected"),
            function (i, tr) {
                rows.push(that.dataItem(tr));
            });
        return rows;
    };

    /**
     * 重写Column的resize 事件
     * @private
     */
    kendo.ui.Grid.prototype._positionColumnResizeHandle = function () {
        var that = this,
            indicatorWidth = that.options.columnResizeHandleWidth,
            lockedHead = that.lockedHeader ? that.lockedHeader.find("thead:first") : $();

        that.thead.add(lockedHead).on("mousemove" + ".kendoGrid", "th", function (e) {
            var th = $(this);
            if (th.hasClass("k-group-cell") || th.hasClass("k-hierarchy-cell")) {
                return;
            }
            that._createResizeHandle(th.closest("div"), th);
        });
    };

    /**
     * 获取Grid选中的列的方法（点击选中 Selectable）
     *
     * @return {Array} 返回kendo.data.Model数组
     */
    kendo.ui.Grid.fn.getSelectedRows = function () {
        var that = this;
        var rows = [];

        // tr.i-state-selected 表示行是通过checkbox勾选的，勾选同时会加上tr.k-state-selected
        // 注意: 出现了tr.i-state-selected，必然会有tr.k-state-selected样式
        // kendoGrid自身的selectable会添加tr.k-state-selected，在PopupGrid的场景下，
        // 隐藏了checkbox，无法添加tr.i-state-selected，tr上只存在tr.k-state-selected
        each(that.element.find(".k-grid-content tr.k-state-selected").not("tr.i-state-selected"),
            function (i, tr) {
                rows.push(that.dataItem(tr));
            });
        return rows;
    };

    /**
     * 获取Grid已点选的数据行的行号数组
     *
     * @param  {Boolean} checked  默认不包括勾选的行
     * @returns {Number|*}
     */
    kendo.ui.Grid.fn.getSelectedRowsIndex = function (checked) {
        var gridInstance = this,
            rows,
            selectedIndexArray = [];

        if (!checked) {
            rows = gridInstance.content.find('.k-state-selected').not('.i-state-selected');

        } else {
            rows = gridInstance.content.find('.k-state-selected');
        }

        each(rows, function (i, row) {
            selectedIndexArray.push($(row).index());
        });


        return selectedIndexArray;
    };


    /**
     * kendoGrid中存在locked列的时候，原生的dataItems函数返回的model会翻倍，
     * 所以平台提供getDataItems方法来获取当前页的model数组
     * @return {*}
     */
    kendo.ui.Grid.fn.getDataItems = function () {
        var that = this, dataItems = that.dataItems();
        if (that.lockedTable) {
            return _.first(dataItems, dataItems.length / 2);
        }
        return dataItems;
    };

    /**
     * 设置Grid中勾选的行
     * @param list list 可以为单个数字或者字符如：0 或者 "0"，也可以是包含数字的数组如[0,1,2] 或者 [0,1,"2"],
     * 如果数组中出现数字与非数字，会对数字标识的行进行选中
     */
    kendo.ui.Grid.fn.setCheckedRows = function (list) {
        var that = this,
            models = that.getRows(list);

        each(models, function (index, model) {
            // fixed 扩大 checkbox 的获取范围， 防止没有固定列情况下，API失效
            var $tr = that.element.find("tr[data-uid='" + model.uid + "']"),
                $checkbox = $tr.find("input.check-one");


            if (that.dataItem($tr).isNew()) {
                $checkbox[0].checked = false;
            }

            if ($checkbox[0] && !$checkbox[0].checked) {
                $checkbox[0].checked = true;
                $checkbox.trigger("check-one", [true]);
            }
        });
    };

    /**
     * 设置Grid中不勾选的行
     * @param list list 可以为单个数字或者字符如：0 或者 "0"，也可以是包含数字的数组如[0,1,2] 或者 [0,1,"2"],
     * 如果数组中出现数字与非数字，会对数字标识的行进行选中
     */
    kendo.ui.Grid.fn.setUnCheckedRows = function (list) {
        var that = this,
            models = that.getRows(list);

        each(models, function (index, model) {
            // fixed 扩大 checkbox 的获取范围， 防止没有固定列情况下，API失效
            var $tr = that.element.find("tr[data-uid='" + model.uid + "']"),
                $checkbox = $tr.find("input.check-one");

            if ($checkbox[0] && $checkbox[0].checked) {
                $checkbox[0].checked = false;
                $checkbox.trigger("check-one", [true]);
            }
        });
    };

    /**
     * 勾选所有的数据行
     */
    kendo.ui.Grid.fn.checkAllRows = function () {
        var that = this,
            length = that.getDataItems().length,
            list = [length];
        for (var i = 0; i < length; i++) {
            list[i] = i;
        }
        that.setCheckedRows(list);
    };

    /**
     * 取消勾选所有的数据行
     */
    kendo.ui.Grid.fn.unCheckAllRows = function () {
        var that = this,
            length = that.getDataItems().length,
            list = [length];
        for (var i = 0; i < length; i++) {
            list[i] = i;
        }
        that.setUnCheckedRows(list);

    };

    /**
     * 反选数据行
     */
    kendo.ui.Grid.fn.toggleCheckRows = function () {
        var that = this,
            models = that.getDataItems();

        each(models, function (index, model) {
            var $lockedTR = that.element.find(".k-grid-content-locked tr[data-uid='" + model.uid + "']"),
                $checkbox = $lockedTR.find("input.check-one");

            if ($checkbox[0]) {
                $checkbox[0].checked = !$checkbox[0].checked;
                $checkbox.trigger("check-one", [true]);
            }
        });
    };

    /**
     * 获取Grid已勾选的数据行的行号数组
     *
     * @return {Array}
     */
    kendo.ui.Grid.fn.getCheckedRowsIndex = function () {
        var gridInstance = this,
            dataUid = [],
            checkedIndexArray = [];
        var view = gridInstance.dataSource.view();
        var  gridRows = gridInstance.getCheckedRows();//已经勾选的行

        if (gridRows.length > 0 ) {
            each(gridRows, function (index, checkedRows) {
                var checkedRowsUid = checkedRows.uid;
                dataUid.push(checkedRowsUid);
            })
        }

        each(view, function (index, model) {
            if (_.indexOf(gridInstance._checkedRows, model.uid) >= 0) {
                checkedIndexArray.push(index);
            }
        });
        return checkedIndexArray;
    };

    /**
     * 根据_checkedRow数组，勾选Grid的数据行
     */
    kendo.ui.Grid.fn.refreshCheckRows = function () {
        // 恢复选中的状态
        var gridInstance = this;
        var indexArray = gridInstance.getCheckedRowsIndex();

        gridInstance.setCheckedRows(indexArray);
    };


    /**
     * 获取Grid中的单行或多行数据,返回的是kendo.data.Model的数组 [model,...]
     * @param list 行号或者行号数组
     * @return {Array}
     */
    kendo.ui.Grid.fn.getRows = function (list) {
        var that = this,
            rowNumbers,
            rows = [],
            dataItems = that.getDataItems();

        if (isArray(list)) {
            rowNumbers = list;
        } else {
            rowNumbers = [list];
        }

        each(rowNumbers, function (index, rowNumber) {
            if (!isNaN(rowNumber)) {
                var rowNum = parseInt(rowNumber, 10);
                rows.push(dataItems[rowNum]);
            }
        });
        return rows;
    };

    /**
     * 根据列名判断该列是否为固定列
     * @param field 列名
     * @return {boolean}
     */
    kendo.ui.Grid.fn.isCellLocked = function (field) {
        var that = this,
            columns = that.columns;

        return _.findIndex(columns, {field: field, locked: true}) >= 0;
    };

    /**
     * 根据列名获取该列的配置信息的位置索引
     * @param field 列名
     * @return {Object}
     */
    kendo.ui.Grid.fn.getColumnIndex = function (field) {
        var that = this,
            index;

        index = that.element.find("th[data-field='" + field + "']").data("index");

        return index;
    };
    /**
     * 根据列名获取该列的配置信息 columns[index]
     * @param field 列名
     * @return {Object}
     */
    kendo.ui.Grid.fn.getColumn = function (field) {
        var that = this,
            columns = that.columns;

        return columns[that.getColumnIndex(field)];
    };

    /**
     * 设置Grid中一行或多列记录的字段值（批量赋值）
     * @param list 单行号或者多行号, 也可以是某行数据的Model对象
     * @param field 列字段英文名
     * @param cellValue 是列的值
     */
    kendo.ui.Grid.fn.setCellValue = function (list, field, cellValue) {
        var that = this, rows = [];

        if (IPLAT.isKendoModel(list)) {
            rows.push(list);
        } else {
            rows = that.getRows(list);
        }

        each(rows, function (i, model) {
            if (model.hasOwnProperty(field)) {
                if (cellValue !== model[field]) {

                    var locked = that.isCellLocked(field),
                        $tr, // locked或locked的行
                        $cell,
                        index, // columns数组中的index
                        uid;

                    model[field] = cellValue;
                    model.dirty = true; // 解决数据变化无法提交的问题

                    $cell = that.getCell(model, field);
                    $cell.addClass("k-dirty-Cell");

                    uid = model.uid;
                    index = that.getColumnIndex(field);

                    if (locked) {
                        $tr = that.element.find(".k-grid-content-locked tr[data-uid=" + uid + "]");
                    } else {
                        $tr = that.element.find(".k-grid-content tr[data-uid=" + uid + "]");
                    }

                    that._displayCell($cell, that.columns[index], model);
                    $('<span class="k-dirty"/>').prependTo($cell);

                    that.trigger(AFTER_EDIT + NS, {
                        fake: true,
                        container: $cell,
                        row: $tr.index(),
                        col: index,
                        field: field,
                        model: model
                    });
                }
            }
        });
    };

    /**
     * 获取Grid中勾选的数据，组装成EiBlock
     * @return {EiBlock}
     */
    kendo.ui.Grid.fn.getCheckedBlockData = function () {
        var that = this;

        return that.model2EiBlock(that.getCheckedRows());
    };

    /**
     * 获取Grid当前页的数据，组装成EiBlock
     *
     * @return {EiBlock|*}
     */
    kendo.ui.Grid.fn.getBlockData = function () {
        var that = this;

        return that.model2EiBlock(that.getDataItems());
    };

    /**
     * 便捷方法，把EiBlock组装成EiInfo，默认将当前Grid的全部数据都放在EiInfo中；
     * 注意和getEiInfo方法的区分
     *
     * @param {EiBlock} resultBlock     结果集EiBlock
     * @return {EiInfo} 包装后的EiInfo
     */
    kendo.ui.Grid.fn.wrapEiBlock = function (resultBlock) {
        var that = this,
            outInfo = that.getQueryInfo(); // 根据EFGrid上的查询条件构造新的EiInfo

        var result = resultBlock || that.getBlockData(); // 默认使用当前Grid的全部数据

        outInfo.addBlock(result);

        return outInfo;
    };

    /**
     * 将kendo.data.Model数组的数据，转成EiBlock的数据
     *
     * @param {Array} models kendo.data.Model数组
     * @return {EiBlock}
     */
    kendo.ui.Grid.fn.model2EiBlock = function (models) {
        var that = this,
            columns = that.options.columns,
            currentBlock = that.getInitBlock();

        var dataBlock = new EiBlock(currentBlock.getBlockMeta());
        var attr = extend({}, currentBlock.getAttr());
        dataBlock.setAttr(attr);

        if (!isArray(models) && IPLAT.isKendoModel(models)) {
            models = [models];
        }

        return _mapModels(dataBlock, columns, models);
    };


// 防止空的EiBlock中无有效的meta信息，使用场景和options.eiBlock相同
    kendo.ui.Grid.fn.getInitBlock = function (rebuild) {
        if (rebuild) {
            // 调用时，重新构建
            return this._buildCurrentEiBlock();
        }

        return this.options.eiBlock;
    };

    /**
     * 根据初始化后的options中的columns信息，构造包含有效Meta信息的EiBlock
     *
     * @private
     */
    kendo.ui.Grid.fn._buildCurrentEiBlock = function () {
        return this._buildEiBlock(function (column) {
            return !!column.field;
        });
    };

    /**
     * 过滤EFGrid的列，并根据这些列信息构造EiBlock
     *
     * @param {Function} filter 列过滤函数，例如，过滤出数字列，日期列等
     * @return {EiBlock} 据EFGrid初始列信息构造的EiBlock
     * @private
     */
    kendo.ui.Grid.fn._buildEiBlock = function (filter) {
        var that = this,
            originColumns = that.options.columns,
            targetColumns = [];

        if (isFunction(filter)) {
            for (var i = 0, length = originColumns.length; i < length; i++) {
                if (filter.call(that, originColumns[i]) === true) {
                    targetColumns.push(originColumns[i]);
                }
            }
        } else {
            targetColumns = originColumns;
        }

        return EiBlock.buildByColumns(that.getBlockId(), targetColumns);
    };


    /**
     * 获取Grid中Cell的展示值
     * @param model model对象
     * @param column 列名称
     * @public
     */
    kendo.ui.Grid.fn.getCellText = function (model, column) {
        var $cell = this.getCell(model, column);
        if ($cell) {
            return $cell.text();
        }

        return '';
    };

    /**
     * 更新列头信息
     * @param callBack
     * @public
     */
    kendo.ui.Grid.fn.refreshHeader = function (callback) {
        if ($.isFunction(callback)) {
            callback.call(this);
        }

        this._thead();
        this.refresh();
    };

    /**
     * 处理Grid的Model数据和显示值间的显示差异问题。例如，日期列，Model中是Date对象，EiBlock中需要格式化后的字符串
     * @param dataBlock 待提交的EiBlock
     * @param columns   Grid的列信息数据
     * @param models    待提交的Model数组
     * @param mixin     勾选时提交的业务逻辑
     * @return {*}
     * @private
     */
    var _mapModels = function (dataBlock, columns, models, mixin) {

        var dateColumns = _.filter(columns, function (column) {
            return column.editType === "date" || column.editType === "datetime";
        });


        // Grid中的数据提交，新增的(isNew)数据行默认值 "" --> " "
        var submitMode = $.isPlainObject(mixin),
            isNew = submitMode && mixin.operation === CREATE_ACTION;

        each(models, function (index, model) {
            // model[field] 单元格默认值和数据库的字段类型
            each(dateColumns, function (index, dateColumn) {
                var field = dateColumn.field,
                    dateFormat = dateColumn.parseFormats[0] || dateColumn.dateFormat;

                model[field] = kendo.toString(model[field], dateFormat);
            });

            if (submitMode) {
                if (mixin.submitChecked) {
                    // 判断model 是否在选中列表中
                    if (mixin._exist(mixin.checkedRows, model)) {
                        dataBlock.addRow(dataBlock.getMappedArray(model, true, isNew));
                    }
                } else {
                    // 提交所有change的行
                    dataBlock.addRow(dataBlock.getMappedArray(model, true, isNew));
                }
            } else {
                dataBlock.addRow(dataBlock.getMappedArray(model, true));
            }
        });
        return dataBlock;
    };

    /**
     * 用于处理kendoGrid渲染的千奇百怪的问题
     *
     * @param gridInstance kendoGrid 对象
     * @private
     */
    var _amazingHandler = function (gridInstance) {

        // 使用iPlatUI定制的翻页条，添加showCount的开关
        IPLAT.EFGrid._handlePagerCount(gridInstance);

        // gridInstance.element.on("focus", "table", function() {
        //     // kendo.grid.js tableClick -->focusTable 触发了table的focus事件
        //     // 不能在这里处理，focus已经导致滚动了，在kendo.all.min.js中修改对应的逻辑
        //     var x = window.scrollX, y = window.scrollY;
        //     // this.focus();
        //     window.scrollTo(x, y);
        //
        // });

        // grid 列resize的最小值
        // http://docs.telerik.com/kendo-ui/controls/data-management/grid/how-to/Layout/apply-minimum-width-during-column-resize
        var minTableWidth;
        var minColumnWidth = gridInstance.options.minColumnWidth || 50;
        var th;
        var idx;
        var grid;
        var isLocked = false;


        function resizeStart(e) {
            th = $(e.currentTarget).data("th");
            grid = th.closest(".k-grid").data("kendoGrid");
            idx = th.index();
            isLocked = th.closest("div").hasClass("k-grid-header-locked");

            // checkbox和序号列不能resize
            // http://docs.telerik.com/kendo-ui/controls/data-management/grid/how-to/Layout/disable-column-resize-for-specific-columns
            if ($(e.currentTarget).data("th").attr("resizable") === "false") {
                e.preventDefault();
                setTimeout(function () {
                    grid.wrapper.removeClass("k-grid-column-resizing");
                    $(document.body).add(".k-grid th").css("cursor", "");
                });
            }
        }

        gridInstance.resizable.bind("start", kendo.throttle(resizeStart, 200));

        // function resizeColumn(e) {
        //     if (th.width() >= minColumnWidth) {
        //         if (isLocked) {
        //             minTableWidth = grid.lockedTable.width();
        //         } else {
        //             minTableWidth = grid.tbody.closest("table").width();
        //         }
        //     }
        //
        //     if (th.width() < minColumnWidth) {
        //         e.preventDefault();
        //         if (isLocked) {
        //             th.closest("table").width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //             grid.lockedHeader.width(minTableWidth);
        //
        //             grid.lockedTable.width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //             grid.lockedContent.width(minTableWidth);
        //         } else {
        //             grid.thead.closest("table").width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //
        //             grid.tbody.closest("table").width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //         }
        //
        //     }
        // }
        //
        // gridInstance.resizable.bind("resize", kendo.throttle(resizeColumn, 200));
        //
        // gridInstance.resizable.bind("resizeend", kendo.throttle(function () {
        //     if (isLocked && th.width() < minColumnWidth) {
        //         grid.lockedHeader.width(minTableWidth);
        //         th.closest("table").width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //
        //         grid.lockedTable.width(minTableWidth).children("colgroup").find("col").eq(idx).width(minColumnWidth);
        //         grid.lockedContent.width(minTableWidth);
        //     }
        //
        //     setTimeout(function () {
        //         grid.lockedHeader.width(minTableWidth);
        //
        //         grid.lockedContent.width(minTableWidth);
        //
        //     }, 300);
        //
        // }, 200));

        // gridInstance.content.css("max-height", "256px");
        // gridInstance.lockedContent.css("max-height", "256px");


        // 处理小计总计，默认无数据时模板出现undefined的问题, 无数据不触发dataBound事件
        if (gridInstance.getDataItems().length === 0 && gridInstance.options.finalSumType) {
            var $sum = gridInstance.footer.find(".i-sum-wrapper");
            $sum.find(".i-sum-page").html(0);
            // $sum.removeClass("sum-undefined").addClass("sum-" + gridInstance.options.finalSumType);
        }
    };

    /**
     * 用于处理EFGrid header border的问题
     *
     * @param gridInstance kendoGrid 对象
     * @private
     */
    var _handleGridHeaderBorder = function (gridInstance) {
        if (gridInstance.dataSource.data().length > 0) {
            if (!_.isUndefined(gridInstance.lockedHeader)) {
                gridInstance.lockedHeader.removeClass("bottom-border");
            }
            if (!_.isUndefined(gridInstance.thead)) {
                gridInstance.thead.closest(".k-grid-header-wrap").removeClass("bottom-border");
                gridInstance.thead.find("th").removeClass("bottom-border");
            }
        } else if (gridInstance.dataSource.data().length === 0) {
            if (!_.isUndefined(gridInstance.lockedHeader)) {
                gridInstance.lockedHeader.addClass("bottom-border");
            }
            if (!_.isUndefined(gridInstance.thead)) {
                gridInstance.thead.closest(".k-grid-header-wrap").addClass("bottom-border");
                gridInstance.thead.find("th").addClass("bottom-border");
            }
        }
    };

    /**
     * 用于处理
     * 1、每页显示的记录条数增多，grid超出屏幕导致右侧出现滚动条，grid的content部分与header部分错位的问题
     * 2、grid设置了enable=false并且未设置有固定列的情况下，grid内容与列头错位，右侧出现滚动条的问题
     * @param gridInstance
     * @private
     */
    var _handeleGridPagerChange = function (gridInstance) {
        if(gridInstance.options.enable == false) {
            var count = 0;
            $(gridInstance.columns).each(function (index) {
                if (gridInstance.columns[index].locked == true) {
                    count = count + 1;
                }
            })
            //只要有一列设置了固定列，就不需要进行后续的处理,此处为没有设置固定列的情形
            if (count == 0) {
                var contentClientWidth = $(".k-grid-content")[0].clientWidth;
                var headerClientWidth = $(".k-grid-header")[0].clientWidth;
                if (contentClientWidth > headerClientWidth) {
                    $(".k-grid-content")[0].style.width = $(".k-grid-content")[0].getBoundingClientRect().width -
                        (contentClientWidth - headerClientWidth) + "px";
                }
                if (contentClientWidth < headerClientWidth) {
                    $(".k-grid-content")[0].style.width = $(".k-grid-content")[0].getBoundingClientRect().width +
                        (headerClientWidth - contentClientWidth) + "px";
                }
            }
        }
    };

    // /**
    //  * 用于处理grid设置了enable=false并且未设置有固定列的情况下，grid内容与列头错位，右侧出现滚动条的问题
    //  * @param gridInstance
    //  * @private
    //  */
    // var _handeleGridContentWidth = function (gridInstance) {
    //     if(gridInstance.options.enable == false){
    //         var count = 0;
    //         $(gridInstance.columns).each(function(index) {
    //             if (gridInstance.columns[index].locked == true) {
    //                 count = count + 1;
    //             }
    //         })
    //         //只要有一列设置了固定列，就不需要进行后续的处理,此处为没有设置固定列的情形
    //         if(count == 0){
    //             // var contentOffsetWidth = $(".k-grid-content")[0].offsetWidth;
    //             var headerClientWidth = $(".k-grid-header")[0].clientWidth;
    //             var contentClientWidth = $(".k-grid-content")[0].clientWidth;
    //             if(contentClientWidth < headerClientWidth){
    //                 $(".k-grid-content")[0].style.width = $(".k-grid-content")[0].getBoundingClientRect().width +
    //                     (headerClientWidth - contentClientWidth) + "px";
    //             }
    //         }
    //     }
    // };
    /**
     * 用于处理
     * 1、设置了enable=false并且第一列是隐藏列的情况下grid左侧边界线消失的问题
     * 2、第一列为隐藏列且为固定列的情况下，其他列有固定列存在时，grid左侧边界线消失问题
     * @param gridInstance kendoGrid对象
     * @private
     */
    var _handeleGridHiddenLeftBorder = function (gridInstance) {
        //设置了enable=false的情况
        if(gridInstance.options.enable == false){
            if(gridInstance.columns[0].hidden == true){
                //如果第一列是固定列的情况下，判断其他列是否至少有一列为固定列
                if(gridInstance.columns[0].locked == true){
                    var count = 0;
                    $(gridInstance.columns).each(function(index){
                        if(gridInstance.columns[index].locked == true){
                            count = count + 1;
                        }
                    })
                    //如果除了第一列，至少有一列为固定列
                    if(count > 1){
                        $(".k-grid-header-locked").css("border-left","1px solid #99D2FF");
                        $(".k-grid-content-locked").css("border-left","1px solid #99D2FF");
                    }else{
                        $("table[role='grid']").each(function(){
                            $(this).css("border-left","1px solid #99D2FF")
                        });
                    }
                }else{
                    $("table[role='grid']").each(function(){
                        $(this).css("border-left","1px solid #99D2FF")
                    });
                }
            }
        }
    };

    /**
     * 用于处理grid底部border hover状态的问题
     * @param gridInstance kendoGrid 对象
     * @private
     */
    var _handleGridBottomBorder = function (gridInstance) {
        var trLast = gridInstance.element.find("tr:last-child");
        if (trLast.length === 4 && trLast.eq(2).children("td").css("border-bottom-width") !== "1px") {
            trLast.eq(2).children("td").css("border-bottom-width", 1);
            trLast.eq(3).children("td").css("border-bottom-width", 1);
            trLast.eq(2).on("mouseover", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER_HOVER);
                trLast.eq(3).find("td").css("border-bottom-color", BOTTOM_BORDER_HOVER);
            });
            trLast.eq(3).on("mouseover", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER_HOVER);
                trLast.eq(2).find("td").css("border-bottom-color", BOTTOM_BORDER_HOVER);
            });
            trLast.eq(2).on("mouseout", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER);
                trLast.eq(3).find("td").css("border-bottom-color", BOTTOM_BORDER);
            });
            trLast.eq(3).on("mouseout", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER);
                trLast.eq(2).find("td").css("border-bottom-color", BOTTOM_BORDER);
            });
        } else if (trLast.eq(1).children("td").length > 0 && trLast.eq(1).children("td").css("border-bottom-width") !== "1px") {
            trLast.eq(1).children("td").css("border-bottom-width", 1);
            trLast.eq(1).on("mouseover", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER_HOVER);
            });
            trLast.eq(1).on("mouseout", function () {
                $(this).find("td").css("border-bottom-color", BOTTOM_BORDER);
            });
        }
    };

    /**
     * 获取屏幕内所有显示的Grid，冻结列头或者创建辅助滚动条的逻辑在 _gridFloatHandler 中处理
     */
    var getGrid = function (gridList) {
        // _.find查询第一个满足条件的元素  _.filter查询所有满足条件的元素
        var gridInstance = _.filter(gridList, function (grid) {

            var gridTop = $(grid).offset().top,
                gridH = $(grid).height(),
                scrollTop = IPLAT.Util.getBodyScrollTop();

            // Grid 没有被滚动移出屏幕上方
            var onTop = scrollTop < (gridTop + gridH);

            // Grid 没有被滚动移出屏幕下方 body height
            var onBottom = gridTop < scrollTop + $('body').height();


            return onTop && onBottom;
        });

        return $(gridInstance);
    };

    /**
     * Grid 高度过高时（例如显示 50条记录），浏览器一屏显示不全。
     *
     * 纵向滚动时：
     *
     * 1. 当列头滚动出屏幕外时，应冻结 Grid 列头 （列头悬浮在页面顶部，方便查看列信息）
     * 2. Grid存在横向滚动条时，当尾部的滚动条在屏幕外时，应创建辅助滚动条，方便滚动查看 Grid 行数据
     *
     * 一般上下布局不会超过2个Grid，（2个Grid的情况 上Grid冻结列头，下Grid创建辅助的滚动条）
     * 左右布局通常大于2个（上下布局的横向扩展）
     *
     * @private
     */
    var _gridFloatHandler = function () {
        var $grids = $(".k-grid"),

            $grids = getGrid($grids);

        _.each($grids, function (grid) {

            var $grid = $(grid);

            // Grid标题悬浮
            var $gridHeader = $grid.find(".k-grid-header"),
                $gridToolbar = $grid.find(".k-grid-toolbar");


            $gridHeader.css("position", "static");

            var headerH = $gridHeader.height(), // 列头高度
                toolbarH = $gridToolbar.length > 0 ? 24 : 0,  // 工具栏高度，考虑toolbar隐藏情况
                minrowH = 72; // 行高最小值 2行


            var gridTop = $grid.offset().top + toolbarH,

                gridH = $grid.height() - toolbarH,

                scrollTop = IPLAT.Util.getBodyScrollTop(),

                windowH = window.innerHeight;

            if (scrollTop > gridTop && scrollTop < (gridTop + gridH - headerH - minrowH)) {
                if ($gridHeader.css("position") !== "fixed") {
                    $gridHeader.css({"position": "fixed", "top": 0, "z-index": 99});
                }
            }


            // 创建辅助的底部横向滚动条
            var $floatingScroll = $("#floating-scrollbar-" + $grid.data("kendoGrid").options.blockId);
            if ($gridHeader.css("position") === "fixed") {
                gridH = gridH - headerH;
            }

            // 前提：触发纵向滚动条（下拉多行且未拉到底的情况） 同时，需要创建辅助的横向滚动条来方便查看数据信息
            if ((scrollTop + windowH < gridTop + gridH) && (scrollTop + windowH > gridTop + headerH)) {
                $floatingScroll.css("display", "block");
                scrollSync();
            } else if ((scrollTop + windowH > gridTop + gridH) || (scrollTop + windowH < gridTop + headerH)) {
                scrollSync(); // 解决 IE10下 纵向滚动条拉到底部 再往回拉动 真假滚动条交替时 列头滚动条重置为0 导致错位的问题
                $floatingScroll.css("display", "none");
            }
        });
    };


    /**
     * Grid 底部辅助横向滚动条悬浮处理
     *
     * 保证Grid header自身的滚动条，floatingScroll 辅助滚动条 ， Grid content自身的滚动条位置同步
     *
     *  @private
     */

    var scrollSync = function () {
        var $grids = $(".k-grid"),

            $grids = getGrid($grids);

        _.each($grids, function (grid) {

            var $grid = $(grid);

            var $floatingScroll = $("#floating-scrollbar-" + $grid.data("kendoGrid").options.blockId), // 悬浮滚动条
                contentScroll = $grid.find(".k-grid-content.k-auto-scrollable"), // 非固定列 content
                headerScroll = $grid.find(".k-grid-header-wrap.k-auto-scrollable"), // 非固定列 列头
                contentLeft = contentScroll.offset().left, // 非固定列 content的位置
                scrollLeft = contentScroll.scrollLeft(), // 非固定列 content scroll的位置
                contentWidth = contentScroll.width(), // 非固定列 content的宽度
                tableWidth = contentScroll.find("table").width(); // table的宽度

            // 解决IE10下列头scrollLeft重置为0的问题 保证headerScroll和contentScroll的滚动条位置一致
            headerScroll.scrollLeft(scrollLeft);
            headerScroll.width(contentWidth);

            // 保证$floatingScroll和contentScroll的滚动条位置一致
            $floatingScroll.scrollLeft(scrollLeft);


            // 设置$floatingScroll的宽度和位置
            $floatingScroll.css({"left": contentLeft + "px", "width": contentWidth + "px"});

            // 设置悬浮滚动条的宽度
            $floatingScroll.find("div").css("width", tableWidth + "px");


            // 滚动条事件绑定
            $floatingScroll.unbind("scroll").scroll(function () {
                contentScroll.scrollLeft($(this).scrollLeft()); // 设置content自身的滚动条与$floatingScroll保持一致
                headerScroll.scrollLeft($(this).scrollLeft());
            });
        });
    };


    /**
     * 销毁当前的 Grid 对象，重新绘制
     * 处理动态渲染列的场景
     */

    kendo.ui.Grid.fn._rebuild = function (eiInfo) {
        var that = this,
            originOptions = that.options,
            blockId = originOptions.blockId,
            $content = that.element.parent();


        // 销毁 EFGrid 相关DOM
        $content.empty();
        $content.append('<div id="ef_window_' + blockId + '" ></div>' +
            '<ul id="ef_shortcutMenu_' + blockId + '" style="display: none"></ul>' +
            '<div id="ef_personal_window_' + blockId + '"><div id="ef_personal_grid_' + blockId + '" ></div></div>' +
            '<div id="ef_grid_' + blockId + '" class="no-scrollbar"></div>');

        var ei = eiInfo || originOptions.eiInfo;
        originOptions.eiInfo = ei;
        originOptions.autoBind = false;

        // 清空原来的列
        originOptions.columns = [];
        originOptions.aggregate=[];
        if(IPLAT.isAvailable(originOptions.dataSource)){
            originOptions.dataSource = {};
        }
        window[blockId + 'Grid'] = IPLAT.Grid(originOptions);
    };

})
(window.jQuery);
;(function ($) {
    var IPLAT = window.IPLAT || {};
    var extend = $.extend,
        defaults_options = {
            animation: {
                close: {
                    effects: "fadeOut zoom:out",
                    duration: 300
                },
                open: {
                    effects: "fadeIn zoom:in",
                    duration: 300
                }
            },
            autoWidth: true,
            minLength: 1,
            enforceMinLength: true,
            filter: "contains",
            height: 200,
            highlightFirst: true,
            suggest: true,
            noDataTemplate: "没有数据"
        },
        transport_defaults = {
            read: {
                type: 'POST',
                dataType: "json",
                contentType: "application/json"
            }
        },
        dataSource,
        autoOption;

    function _beforeInit(options) {
        var dataBlock = options.dataBlock || "result";
        var nodeId = options.autoId;
        var eiInfo = options.eiInfo;
        var eiBlock = eiInfo.getBlock(dataBlock);
        var serviceName = options.serviceName || eiInfo.get(EiConstant.SERVICE_NAME);
        var methodName = options.queryMethod || "query";
        var efSecurityToken = $("#efSecurityToken").val();
        if(typeof(eiBlock) === "undefined"){
            EiCommunicator.send(serviceName,methodName,new EiInfo(),{
                onSuccess: function (e) {
                    eiBlock = e.getBlock(dataBlock);
                },
                onFail: function (e) {
                    NotificationUtil("获取[" + dataBlock + "]数据失败", "error");
                }
            },{async:false})
        }
        //初始化dataSource
        var _init_dataSource = function () {
            return {
                transport: extend(true, {}, transport_defaults, {
                    parameterMap: function (options, operation) {
                        var info = new EiInfo();
                        var autocomplete = $("#" + nodeId).data("kendoAutoComplete");
                        if (autocomplete.dataSource.options.serverFiltering) {
                            info.setByNodeObject(document.getElementById(nodeId).parentNode);
                        }
                        var block = info.getBlock(dataBlock);
                        if (!isAvailable(block)) {
                            block = new EiBlock(eiBlock.getBlockMeta());
                            info.addBlock(block);
                        }

                        block.setAttr(eiBlock.getAttr());
                        if (autocomplete.dataSource.options.serverPaging) {
                            if (options.pageSize >= 0 && options.skip >= 0) {
                                block.set(EiConstant.LIMIT, options.pageSize);
                            }
                        }else {
                            block.set(EiConstant.LIMIT, autocomplete.dataSource.options.pageSize);
                        }
                        return info.toJSONString();
                    }
                }),
                schema: {
                    data: function (response) {
                        ajaxEi = EiInfo.parseJSONObject(response);
                        return ajaxEi.getBlock(dataBlock).getMappedRows();
                    }
                },
                pageSize: 50
            }
        };
        var dataSource_defaults = _init_dataSource(options);
        dataSource = extend(true, {}, dataSource_defaults, {
            transport: {
                read: {
                    url: options.url + "/service/" + serviceName + "/" + methodName
                }
            }
        });

        //filter及noDataTemplate
        if (options.filter) {
            extend(defaults_options, {filter: options.filter})
        }
        if (options.noDataTemplate) {
            extend(defaults_options, {noDataTemplate: options.noDataTemplate})
        }

        // 优先级最高的配置, 支持kendo的所有原生配置
        var preOptions = extend({}, IPLATUI.EFAutoComplete[options.autoId]);

        // 处理kendo的配置，优先级最高。
        if (preOptions.dataSource) {
            dataSource = extend(true, {}, dataSource, preOptions.dataSource);
            delete preOptions.dataSource;
        }
        return extend({}, defaults_options, {dataTextField: options.dataTextField}, {dataSource: dataSource}, preOptions)
    }


    IPLAT.AutoComplete = function (options) {
        autoOption = _beforeInit(options);
        $("#" + options.autoId).kendoAutoComplete(autoOption);
    };
})(jQuery);

(function ($) {
    /**
     * EFButton Tag组件逻辑
     *
     * @param options
     * @constructor
     */
    IPLAT.Button = function (options) {
        var hasPrivilege = options.hasPrivilege,
            $button = options.button,
            buttonText = options.buttonText,
            desc = options.desc,
            layout = options.layout,
            uri = options.uri || "";

        if (hasPrivilege) {
            var _showText = true, _showIcon = false;

            var btnClass = IPLAT.Util.parseBtnClass(uri),
                iconCss = btnClass.css,
                btnCss = btnClass.btnClass;

            if (/fa-/.test(iconCss)) {
                // fa 字体图标的辅助样式
                iconCss += " i-btn-gap";
                if (!/^fa /.test(iconCss)) {
                    // 补全font awesome的class
                    iconCss = "fa " + iconCss;
                }
            } else if (/k-/.test(iconCss)) {
                // 补全kendo icon 的class
                if (!/^k-icon /.test(iconCss)) {
                    iconCss = "k-icon " + iconCss;
                }
            } else if (/i-/.test(iconCss)) {
                // 补全iplat icon 的class
                if (!/^i-icon /.test(iconCss)) {
                    iconCss = "i-icon " + iconCss;
                }
            }

            if (IPLAT.isNull(layout)) {
                layout = "1"; // 默认只显示按钮文字
            }
            if (layout === "2") {
                _showText = false;
                _showIcon = true;
            } else if (layout === "3") {
                _showText = true;
                _showIcon = true;
            }

            if (_showIcon) {
                var spanClass = _showText ? iconCss : iconCss + " i-btn-only-icon";
                var iconSpan = "<span class='" + spanClass + "'></span>";
                $button.append(iconSpan);
            }
            if (_showText) {
                var textSpan = "<span>" + buttonText + "</span>";
                $button.append(textSpan);
            }

            if (!_.isEmpty(btnCss)) {
                $button.addClass(btnCss);
            }

            $button.attr("title", desc);
            $button.attr("layout", layout);

            $button.css("display", "")
        }
    }
})(jQuery);
$(function () {
    if($('body')[0].className.indexOf("i-theme-ant") != -1){
    //UED最大化及最小化图标样式
    $(".si-size-fullscreen").each(function () {
        this.className="iconfont iconfullscreen";
        $(this.parentNode).on("click",function () {
            if(this.children[0].className.indexOf("actual") != -1){
                this.children[0].className="iconfont iconfullscreenexit";
            }else {
                this.children[0].className="iconfont iconfullscreen";
            }
        })
    })
    $(".si-arrow-up").each(function () {
        this.className="iconfont iconupsquare";
        $(this.parentNode).on("click",function () {
            if(this.children[0].className.indexOf("arrow-up") != -1){
                this.children[0].className="iconfont iconupsquare";
            }else {
                this.children[0].className="iconfont icondownsquare";
            }
        })
    })
    }
});
(function ($) {
    var IPLAT = window.IPLAT || {},
        dateDefaults,
        datetimeDefaults,
        timeDefaults,
        DATETIME = "datetime",
        DATE = "date",
        TIME = "time",
        DATESPAN = "datespan",
        extend = $.extend;

    dateDefaults = extend({}, IPLATUI.Config.EFDate);
    datetimeDefaults = extend({}, IPLATUI.Config.EFDateTime);
    timeDefaults = extend({}, IPLATUI.Config.EFTime);


    function _beforeInit(options, dateId) {
        // options中的null属性 空的属性， KendoUI不会使用
        var footer = kendo.template($("#date-footer-template").html());
        var defaults = {};

        if (DATESPAN === options[DATESPAN]) {
            extend(options, IPLATUI.EFDateSpan[dateId]);
        } else {
            extend(options, IPLATUI.EFDatePicker[dateId]);
        }

        switch (options.role) {
            case DATETIME:
                extend(defaults, datetimeDefaults);
                break;

            case "":
            case DATE:
                extend(defaults, dateDefaults);
                break;

            case TIME:
                extend(defaults, timeDefaults);
                break;
        }


        // 处理options中需要设置到 $("#" + options.dateId) 元素中的属性
        var $element = $("#" + dateId);
        $element.attr(IPLAT.Util.pickDOMAttributes(options));

        return extend(defaults, options, {
            footer: footer({
                today: dateId + "_today",
                clear: dateId + "_clear",
                close: dateId + "_close"
            })
        });
    }

    function _afterInit(dateInstance, dateId) {
        var $date = $("#" + dateId);

        // 覆盖设置的宽度，修复ie下显示不全的问题
        $date.attr("style", "width: 100%;");

        dateInstance.one("open", function () {
            var dp = this;

            // 清除kendo默认的今天的链接 k-link k-nav-today
            // setTimeout没有设置等待的时间，JS的Execution queue结束会调用
            setTimeout(function () {
                if (!IPLAT.isUndefined(dp.dateView)) {
                    var $wrapper = dp.dateView.popup.wrapper;

                    // 改变DOM结构 会导致已经绑定的事件失效，所以在unwrap后绑定事件
                    $wrapper.find(".date-footer-wrapper").unwrap();

                    $wrapper.on("click", "#" + dateId + "_today", function () {
                        //  kendo.date.today(): 不带时分秒的日期对象
                        var today = kendo.date.today();

                        if (dateInstance.options.role === DATETIME) {
                            today = new Date();
                        }

                        dateInstance.value(today);
                        dateInstance.close();
                        dateInstance.trigger("change");
                    });

                    $wrapper.on("click", "#" + dateId + "_clear", function () {
                        dateInstance.value(null);
                        dateInstance.close();
                        dateInstance.trigger("change");
                    });

                    $wrapper.on("click", "#" + dateId + "_close", function () {
                        dateInstance.close();
                    });
                }
            });
        });

        // 点击输入框弹出日期
        $date.on("click", function () {
            dateInstance.close("time");
            dateInstance.open("date");
        });
    }

    IPLAT.Date = function (options) {
        options = _beforeInit(options, options.dateId);
        var dateInstance, $date = $("#" + options.dateId);

        switch (options.role) {
            case DATETIME:
                dateInstance = $date.kendoDateTimePicker(options).data("kendoDateTimePicker");
                break;

            case "":
            case DATE:
                dateInstance = $date.kendoDatePicker(options).data("kendoDatePicker");
                break;

            case TIME:
                dateInstance = $date.kendoTimePicker(options).data("kendoTimePicker");
                break;
        }


        _afterInit(dateInstance, options.dateId);

        return dateInstance;
    };

    IPLAT.DateSpan = function (options) {

        function startChange() {
            var startDate = startDateInstance.value(),
                endDate = endDateInstance.value();

            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                endDateInstance.min(startDate);
            } else if (endDate) {
                startDateInstance.max(new Date(endDate));
                endDateInstance.min(new Date(1900, 0, 1));
            } else {
                startDateInstance.max(new Date(2099, 11, 31));
                endDateInstance.min(new Date(1900, 0, 1));
            }
        }

        function endChange() {
            var endDate = endDateInstance.value(),
                startDate = startDateInstance.value();

            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                startDateInstance.max(endDate);
            } else if (startDate) {
                startDateInstance.max(new Date(2099, 11, 31));
                endDateInstance.min(new Date(startDate));
            } else {
                startDateInstance.max(new Date(2099, 11, 31));
                endDateInstance.min(new Date(1900, 0, 1));
            }
        }

        /**
         * 起止日期间添加了 “到，至于，-，~”之类的
         */
        function handleExtChar(extChar, bindWidth, bindRatio) {
            if (extChar && bindWidth) { // 设置了bindWidth和extChar
                var bindRatioArray = bindRatio.split(":");

                var bindLabelWidth = bindRatioArray[0] ? bindRatioArray[0] : 4;

                var extLabel = '<label class="i-datespan-label">' + extChar + '</label>';

                if (bindRatioArray.length === 2) {
                    bindLabelWidth = bindRatioArray[0] * 1;
                }

                var $validateWrapper = $startDate.parent();
                var $bindWrapper = $validateWrapper.parent();

                $validateWrapper.append(extLabel);

                // endDate的内容插入到
                $validateWrapper.append($endDate.parent().html());

                // 删除掉endDate原来的DOM节点
                $endDate.parent().parent().remove();

                // 重置$endDate Input
                $endDate = $validateWrapper.find("input:eq(1)");

                $startDate.attr("style", "width: 45% !important;");
                $endDate.attr("style", "width: 45% !important;");


                $bindWrapper.prev().attr("class", "col-xs-" + bindLabelWidth + " control-label"); // bindLabel标签占据的栅格
                $bindWrapper.attr("class", "col-xs-" + (12 - bindLabelWidth)); // 两个日期占据的栅格

                $bindWrapper.parent().parent().addClass("i-datespan-ext");
            }
        }


        // 指明日期控件是属于DateSpan的
        options[DATESPAN] = DATESPAN;

        var startOptions = _beforeInit(options, options.startId);
        var endOptions = _beforeInit(options, options.endId);

        var startDateInstance, endDateInstance;

        var $startDate = $("#" + options.startId),
            $endDate = $("#" + options.endId);

        // 处理组件中间需要加字的场景
        handleExtChar(options.extChar, options.bindWidth, options.bindRatio);

        if (isAvailable(options.startDate)) {
            startOptions.value = options.startDate;
        }

        if (isAvailable(options.endDate)) {
            endOptions.value = options.endDate;
        }


        if (DATETIME === options.role) {
            // 日期时刻范围
            var now = new Date();

            if (!isAvailable(options.startDate) && options.startTimeFormat) {
                var startVal = new Date(kendo.toString(now, IPLAT.FORMAT.DATE_8_PR) + " " + options.startTimeFormat);

                startDateInstance = $startDate.kendoDateTimePicker(extend(startOptions,
                    {value: startVal})).data("kendoDateTimePicker");

                // 清空日期dom中设置的值，但保留初始的时分秒 (解决不能任意选择秒的问题)
                startDateInstance.element.val('');
            } else {
                // 设置了默认值
                startDateInstance = $startDate.kendoDateTimePicker(startOptions).data("kendoDateTimePicker");
            }

            if (!isAvailable(options.endDate) && options.endTimeFormat) {
                var endVal = new Date(kendo.toString(now, IPLAT.FORMAT.DATE_8_PR) + " " + options.endTimeFormat);
                endDateInstance = $endDate.kendoDateTimePicker(extend(endOptions,
                    {value: endVal})).data("kendoDateTimePicker");

                // 清空日期dom中设置的值，但保留初始的时分秒 (解决不能任意选择秒的问题)
                endDateInstance.element.val('');
            } else {
                endDateInstance = $endDate.kendoDateTimePicker(endOptions).data("kendoDateTimePicker");
            }

        } else {
            // 日期范围
            startDateInstance = $startDate.kendoDatePicker(startOptions).data("kendoDatePicker");
            // startDateInstance = $startDate.kendoDatePicker(extend(
            //     {change: startChange}, startOptions)).data("kendoDatePicker");

            endDateInstance = $endDate.kendoDatePicker(endOptions).data("kendoDatePicker");
        }

        // startDateInstance.max(endDateInstance.value());
        endDateInstance.min(startDateInstance.value());

        startDateInstance.bind("change", startChange);
        endDateInstance.bind("change", endChange);

        _afterInit(startDateInstance, startOptions.startId);
        _afterInit(endDateInstance, startOptions.endId);


        // 防止kendo DateTimePicker 造成的样式展示冲突
        $("#" + "t_" + options.startId + "_" + options.endId).css('visibility', 'visible');

        return {
            start: startDateInstance,
            end: endDateInstance
        };
    };


    /**
     * 重写readonly方法,在只读状态下能够通过点击图标弹出日期选择
     */
    kendo.ui.DatePicker.fn.readonly = (function (readonly) {
        return function (state) {
            var that = this;
            readonly.call(that, state);
            _viewToggle(that, state);
        }
    })(kendo.ui.DatePicker.fn.readonly);


    /**
     * 重写readonly方法,在只读状态下能够通过点击图标弹出日期及时间选择
     */
    kendo.ui.DateTimePicker.fn.readonly = (function (readonly) {
        return function (state) {
            var that = this;
            readonly.call(that, state);
            _viewToggle(that, state);
        }
    })(kendo.ui.DateTimePicker.fn.readonly);

    /**
     * 用于日期控件readonly状态下添加点击图标展开视图的功能
     *
     * @param dateInstance kendoDatePicker或kendoDateTimePicker 对象
     * @param readonly     readonly状态
     * @private
     */
    function _viewToggle(dateInstance, readonly) {
        var role = dateInstance.options.name,
            NS = ".kendoDatePicker",
            dateIcon = dateInstance._dateIcon;
        if (_.isUndefined(readonly)) {
            readonly = true;
        }

        if (role === "DatePicker") {
            if (readonly) {
                dateIcon.on("click" + NS, function () {
                    dateInstance.dateView.toggle();
                }).on("mousedown" + NS, function (e) {
                    e.preventDefault();
                })
            }
        } else if (role === "DateTimePicker") {
            var timeIcon = dateInstance._timeIcon;
            NS = ".kendoDateTimePicker";
            if (readonly) {
                dateIcon.on("click" + NS, function () {
                    dateInstance.toggle("date");
                }).on("mousedown" + NS, function (e) {
                    e.preventDefault();
                });
                timeIcon.on("click" + NS, function () {
                    dateInstance.toggle("time");
                }).on("mousedown" + NS, function (e) {
                    e.preventDefault();
                })
            }
        }
    }
})(jQuery);

(function(e) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], e); 
    } else {
        e(jQuery);
    }
})(function(j) {
    j.ui = j.ui || {};
    var e = j.ui.version = "1.12.1";
    (function() {
        var r, y = Math.max, x = Math.abs, s = /left|center|right/, i = /top|center|bottom/, f = /[\+\-]\d+(\.[\d]+)?%?/, l = /^\w+/, c = /%$/, a = j.fn.pos;
        function q(e, a, t) {
            return [ parseFloat(e[0]) * (c.test(e[0]) ? a / 100 : 1), parseFloat(e[1]) * (c.test(e[1]) ? t / 100 : 1) ];
        }
        function C(e, a) {
            return parseInt(j.css(e, a), 10) || 0;
        }
        function t(e) {
            var a = e[0];
            if (a.nodeType === 9) {
                return {
                    width: e.width(),
                    height: e.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                };
            }
            if (j.isWindow(a)) {
                return {
                    width: e.width(),
                    height: e.height(),
                    offset: {
                        top: e.scrollTop(),
                        left: e.scrollLeft()
                    }
                };
            }
            if (a.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: a.pageY,
                        left: a.pageX
                    }
                };
            }
            return {
                width: e.outerWidth(),
                height: e.outerHeight(),
                offset: e.offset()
            };
        }
        j.pos = {
            scrollbarWidth: function() {
                if (r !== undefined) {
                    return r;
                }
                var e, a, t = j("<div " + "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" + "<div style='height:100px;width:auto;'></div></div>"), s = t.children()[0];
                j("body").append(t);
                e = s.offsetWidth;
                t.css("overflow", "scroll");
                a = s.offsetWidth;
                if (e === a) {
                    a = t[0].clientWidth;
                }
                t.remove();
                return r = e - a;
            },
            getScrollInfo: function(e) {
                var a = e.isWindow || e.isDocument ? "" : e.element.css("overflow-x"), t = e.isWindow || e.isDocument ? "" : e.element.css("overflow-y"), s = a === "scroll" || a === "auto" && e.width < e.element[0].scrollWidth, r = t === "scroll" || t === "auto" && e.height < e.element[0].scrollHeight;
                return {
                    width: r ? j.pos.scrollbarWidth() : 0,
                    height: s ? j.pos.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function(e) {
                var a = j(e || window), t = j.isWindow(a[0]), s = !!a[0] && a[0].nodeType === 9, r = !t && !s;
                return {
                    element: a,
                    isWindow: t,
                    isDocument: s,
                    offset: r ? j(e).offset() : {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: a.scrollLeft(),
                    scrollTop: a.scrollTop(),
                    width: a.outerWidth(),
                    height: a.outerHeight()
                };
            }
        };
        j.fn.pos = function(h) {
            if (!h || !h.of) {
                return a.apply(this, arguments);
            }
            h = j.extend({}, h);
            var m, p, d, u, T, e, g = j(h.of), b = j.pos.getWithinInfo(h.within), k = j.pos.getScrollInfo(b), w = (h.collision || "flip").split(" "), v = {};
            e = t(g);
            if (g[0].preventDefault) {
                h.at = "left top";
            }
            p = e.width;
            d = e.height;
            u = e.offset;
            T = j.extend({}, u);
            j.each([ "my", "at" ], function() {
                var e = (h[this] || "").split(" "), a, t;
                if (e.length === 1) {
                    e = s.test(e[0]) ? e.concat([ "center" ]) : i.test(e[0]) ? [ "center" ].concat(e) : [ "center", "center" ];
                }
                e[0] = s.test(e[0]) ? e[0] : "center";
                e[1] = i.test(e[1]) ? e[1] : "center";
                a = f.exec(e[0]);
                t = f.exec(e[1]);
                v[this] = [ a ? a[0] : 0, t ? t[0] : 0 ];
                h[this] = [ l.exec(e[0])[0], l.exec(e[1])[0] ];
            });
            if (w.length === 1) {
                w[1] = w[0];
            }
            if (h.at[0] === "right") {
                T.left += p;
            } else if (h.at[0] === "center") {
                T.left += p / 2;
            }
            if (h.at[1] === "bottom") {
                T.top += d;
            } else if (h.at[1] === "center") {
                T.top += d / 2;
            }
            m = q(v.at, p, d);
            T.left += m[0];
            T.top += m[1];
            return this.each(function() {
                var t, e, f = j(this), l = f.outerWidth(), c = f.outerHeight(), a = C(this, "marginLeft"), s = C(this, "marginTop"), r = l + a + C(this, "marginRight") + k.width, i = c + s + C(this, "marginBottom") + k.height, o = j.extend({}, T), n = q(v.my, f.outerWidth(), f.outerHeight());
                if (h.my[0] === "right") {
                    o.left -= l;
                } else if (h.my[0] === "center") {
                    o.left -= l / 2;
                }
                if (h.my[1] === "bottom") {
                    o.top -= c;
                } else if (h.my[1] === "center") {
                    o.top -= c / 2;
                }
                o.left += n[0];
                o.top += n[1];
                t = {
                    marginLeft: a,
                    marginTop: s
                };
                j.each([ "left", "top" ], function(e, a) {
                    if (j.ui.pos[w[e]]) {
                        j.ui.pos[w[e]][a](o, {
                            targetWidth: p,
                            targetHeight: d,
                            elemWidth: l,
                            elemHeight: c,
                            collisionPosition: t,
                            collisionWidth: r,
                            collisionHeight: i,
                            offset: [ m[0] + n[0], m[1] + n[1] ],
                            my: h.my,
                            at: h.at,
                            within: b,
                            elem: f
                        });
                    }
                });
                if (h.using) {
                    e = function(e) {
                        var a = u.left - o.left, t = a + p - l, s = u.top - o.top, r = s + d - c, i = {
                            target: {
                                element: g,
                                left: u.left,
                                top: u.top,
                                width: p,
                                height: d
                            },
                            element: {
                                element: f,
                                left: o.left,
                                top: o.top,
                                width: l,
                                height: c
                            },
                            horizontal: t < 0 ? "left" : a > 0 ? "right" : "center",
                            vertical: r < 0 ? "top" : s > 0 ? "bottom" : "middle"
                        };
                        if (p < l && x(a + t) < p) {
                            i.horizontal = "center";
                        }
                        if (d < c && x(s + r) < d) {
                            i.vertical = "middle";
                        }
                        if (y(x(a), x(t)) > y(x(s), x(r))) {
                            i.important = "horizontal";
                        } else {
                            i.important = "vertical";
                        }
                        h.using.call(this, e, i);
                    };
                }
                f.offset(j.extend(o, {
                    using: e
                }));
            });
        };
        j.ui.pos = {
            _trigger: function(e, a, t, s) {
                if (a.elem) {
                    a.elem.trigger({
                        type: t,
                        position: e,
                        positionData: a,
                        triggered: s
                    });
                }
            },
            fit: {
                left: function(e, a) {
                    j.ui.pos._trigger(e, a, "posCollide", "fitLeft");
                    var t = a.within, s = t.isWindow ? t.scrollLeft : t.offset.left, r = t.width, i = e.left - a.collisionPosition.marginLeft, f = s - i, l = i + a.collisionWidth - r - s, c;
                    if (a.collisionWidth > r) {
                        if (f > 0 && l <= 0) {
                            c = e.left + f + a.collisionWidth - r - s;
                            e.left += f - c;
                        } else if (l > 0 && f <= 0) {
                            e.left = s;
                        } else {
                            if (f > l) {
                                e.left = s + r - a.collisionWidth;
                            } else {
                                e.left = s;
                            }
                        }
                    } else if (f > 0) {
                        e.left += f;
                    } else if (l > 0) {
                        e.left -= l;
                    } else {
                        e.left = y(e.left - i, e.left);
                    }
                    j.ui.pos._trigger(e, a, "posCollided", "fitLeft");
                },
                top: function(e, a) {
                    j.ui.pos._trigger(e, a, "posCollide", "fitTop");
                    var t = a.within, s = t.isWindow ? t.scrollTop : t.offset.top, r = a.within.height, i = e.top - a.collisionPosition.marginTop, f = s - i, l = i + a.collisionHeight - r - s, c;
                    if (a.collisionHeight > r) {
                        if (f > 0 && l <= 0) {
                            c = e.top + f + a.collisionHeight - r - s;
                            e.top += f - c;
                        } else if (l > 0 && f <= 0) {
                            e.top = s;
                        } else {
                            if (f > l) {
                                e.top = s + r - a.collisionHeight;
                            } else {
                                e.top = s;
                            }
                        }
                    } else if (f > 0) {
                        e.top += f;
                    } else if (l > 0) {
                        e.top -= l;
                    } else {
                        e.top = y(e.top - i, e.top);
                    }
                    j.ui.pos._trigger(e, a, "posCollided", "fitTop");
                }
            },
            flip: {
                left: function(e, a) {
                    j.ui.pos._trigger(e, a, "posCollide", "flipLeft");
                    var t = a.within, s = t.offset.left + t.scrollLeft, r = t.width, i = t.isWindow ? t.scrollLeft : t.offset.left, f = e.left - a.collisionPosition.marginLeft, l = f - i, c = f + a.collisionWidth - r - i, o = a.my[0] === "left" ? -a.elemWidth : a.my[0] === "right" ? a.elemWidth : 0, n = a.at[0] === "left" ? a.targetWidth : a.at[0] === "right" ? -a.targetWidth : 0, h = -2 * a.offset[0], m, p;
                    if (l < 0) {
                        m = e.left + o + n + h + a.collisionWidth - r - s;
                        if (m < 0 || m < x(l)) {
                            e.left += o + n + h;
                        }
                    } else if (c > 0) {
                        p = e.left - a.collisionPosition.marginLeft + o + n + h - i;
                        if (p > 0 || x(p) < c) {
                            e.left += o + n + h;
                        }
                    }
                    j.ui.pos._trigger(e, a, "posCollided", "flipLeft");
                },
                top: function(e, a) {
                    j.ui.pos._trigger(e, a, "posCollide", "flipTop");
                    var t = a.within, s = t.offset.top + t.scrollTop, r = t.height, i = t.isWindow ? t.scrollTop : t.offset.top, f = e.top - a.collisionPosition.marginTop, l = f - i, c = f + a.collisionHeight - r - i, o = a.my[1] === "top", n = o ? -a.elemHeight : a.my[1] === "bottom" ? a.elemHeight : 0, h = a.at[1] === "top" ? a.targetHeight : a.at[1] === "bottom" ? -a.targetHeight : 0, m = -2 * a.offset[1], p, d;
                    if (l < 0) {
                        d = e.top + n + h + m + a.collisionHeight - r - s;
                        if (d < 0 || d < x(l)) {
                            e.top += n + h + m;
                        }
                    } else if (c > 0) {
                        p = e.top - a.collisionPosition.marginTop + n + h + m - i;
                        if (p > 0 || x(p) < c) {
                            e.top += n + h + m;
                        }
                    }
                    j.ui.pos._trigger(e, a, "posCollided", "flipTop");
                }
            },
            flipfit: {
                left: function() {
                    j.ui.pos.flip.left.apply(this, arguments);
                    j.ui.pos.fit.left.apply(this, arguments);
                },
                top: function() {
                    j.ui.pos.flip.top.apply(this, arguments);
                    j.ui.pos.fit.top.apply(this, arguments);
                }
            }
        };
        (function() {
            var e, a, t, s, r, i = document.getElementsByTagName("body")[0], f = document.createElement("div");
            e = document.createElement(i ? "div" : "body");
            t = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            };
            if (i) {
                j.extend(t, {
                    position: "absolute",
                    left: "-1000px",
                    top: "-1000px"
                });
            }
            for (r in t) {
                e.style[r] = t[r];
            }
            e.appendChild(f);
            a = i || document.documentElement;
            a.insertBefore(e, a.firstChild);
            f.style.cssText = "position: absolute; left: 10.7432222px;";
            s = j(f).offset().left;
            j.support.offsetFractions = s > 10 && s < 11;
            e.innerHTML = "";
            a.removeChild(e);
        })();
    })();
    var a = j.ui.position;
});

(function(e) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], e);
    } else if (window.jQuery && !window.jQuery.fn.iconpicker) {
        e(window.jQuery);
    }
})(function(c) {
    "use strict";
    var f = {
        isEmpty: function(e) {
            return e === false || e === "" || e === null || e === undefined;
        },
        isEmptyObject: function(e) {
            return this.isEmpty(e) === true || e.length === 0;
        },
        isElement: function(e) {
            return c(e).length > 0;
        },
        isString: function(e) {
            return typeof e === "string" || e instanceof String;
        },
        isArray: function(e) {
            return c.isArray(e);
        },
        inArray: function(e, a) {
            return c.inArray(e, a) !== -1;
        },
        throwError: function(e) {
            throw "Font Awesome Icon Picker Exception: " + e;
        }
    };
    var t = function(e, a) {
        this._id = t._idCounter++;
        this.element = c(e).addClass("iconpicker-element");
        this._trigger("iconpickerCreate", {
            iconpickerValue: this.iconpickerValue
        });
        this.options = c.extend({}, t.defaultOptions, this.element.data(), a);
        this.options.templates = c.extend({}, t.defaultOptions.templates, this.options.templates);
        this.options.originalPlacement = this.options.placement;
        this.container = f.isElement(this.options.container) ? c(this.options.container) : false;
        if (this.container === false) {
            if (this.element.is(".dropdown-toggle")) {
                this.container = c("~ .dropdown-menu:first", this.element);
            } else {
                this.container = this.element.is("input,textarea,button,.btn") ? this.element.parent() : this.element;
            }
        }
        this.container.addClass("iconpicker-container");
        if (this.isDropdownMenu()) {
            this.options.placement = "inline";
        }
        this.input = this.element.is("input,textarea") ? this.element.addClass("iconpicker-input") : false;
        if (this.input === false) {
            this.input = this.container.find(this.options.input);
            if (!this.input.is("input,textarea")) {
                this.input = false;
            }
        }
        this.component = this.isDropdownMenu() ? this.container.parent().find(this.options.component) : this.container.find(this.options.component);
        if (this.component.length === 0) {
            this.component = false;
        } else {
            this.component.find("i").addClass("iconpicker-component");
        }
        this._createPopover();
        this._createIconpicker();
        if (this.getAcceptButton().length === 0) {
            this.options.mustAccept = false;
        }
        if (this.isInputGroup()) {
            // this.container.parent().append(this.popover);
            $("body").append(this.popover);
        } else {
            this.container.append(this.popover);
        }
        this._bindElementEvents();
        this._bindWindowEvents();
        this.update(this.options.selected);
        if (this.isInline()) {
            this.show();
        }
        this._trigger("iconpickerCreated", {
            iconpickerValue: this.iconpickerValue
        });
    };
    t._idCounter = 0;
    t.defaultOptions = {
        title: false,
        selected: false,
        defaultValue: false,
        placement: "bottom",
        collision: "none",
        animation: true,
        hideOnSelect: false,
        showFooter: false,
        searchInFooter: false,
        mustAccept: false,
        selectedCustomClass: "bg-primary",
        icons: [],
        fullClassFormatter: function(e) {
            return e;
        },
        input: "input,.iconpicker-input",
        inputSearch: false,
        container: false,
        component: ".input-group-addon,.iconpicker-component",
        templates: {
            popover: '<div class="iconpicker-popover popover"><div class="arrow"></div>' + '<div class="popover-title"></div><div class="popover-content"></div></div>',
            footer: '<div class="popover-footer"></div>',
            buttons: '<button class="i-btn-lg  k-grid-add iconpicker-btn iconpicker-btn-cancel btn-default btn-sm"><span>取消</span></button>' + ' <button class="i-btn-lg k-grid-save-changes iconpicker-btn iconpicker-btn-accept btn-primary btn-sm"><span>确认</span></button>',
            search: '<input type="search" class="form-control iconpicker-search" placeholder="关键词查询" />',
            iconpicker: '<div class="iconpicker"><div class="iconpicker-items"></div></div>',
            iconpickerItem: '<a role="button" href="javascript:;" class="iconpicker-item"><i></i></a>'
        }
    };
    t.batch = function(e, a) {
        var t = Array.prototype.slice.call(arguments, 2);
        return c(e).each(function() {
            var e = c(this).data("iconpicker");
            if (!!e) {
                e[a].apply(e, t);
            }
        });
    };
    t.prototype = {
        constructor: t,
        options: {},
        _id: 0,
        _trigger: function(e, a) {
            a = a || {};
            this.element.trigger(c.extend({
                type: e,
                iconpickerInstance: this
            }, a));
        },
        _createPopover: function() {
            this.popover = c(this.options.templates.popover);
            var e = this.popover.find(".popover-title");
            if (!!this.options.title) {
                e.append(c('<div class="popover-title-text">' + this.options.title + "</div>"));
            }
            if (this.hasSeparatedSearchInput() && !this.options.searchInFooter) {
                e.append(this.options.templates.search);
            } else if (!this.options.title) {
                e.remove();
            }
            if (this.options.showFooter && !f.isEmpty(this.options.templates.footer)) {
                var a = c(this.options.templates.footer);
                if (this.hasSeparatedSearchInput() && this.options.searchInFooter) {
                    a.append(c(this.options.templates.search));
                }
                if (!f.isEmpty(this.options.templates.buttons)) {
                    a.append(c(this.options.templates.buttons));
                }
                this.popover.append(a);
            }
            if (this.options.animation === true) {
                this.popover.addClass("fade");
            }
            return this.popover;
        },
        _createIconpicker: function() {
            var t = this;
            this.iconpicker = c(this.options.templates.iconpicker);
            var e = function(e) {
                var a = c(this);
                if (a.is("i")) {
                    a = a.parent();
                }
                t._trigger("iconpickerSelect", {
                    iconpickerItem: a,
                    iconpickerValue: t.iconpickerValue
                });
                if (t.options.mustAccept === false) {
                    t.update(a.data("iconpickerValue"));
                    t._trigger("iconpickerSelected", {
                        iconpickerItem: this,
                        iconpickerValue: t.iconpickerValue
                    });
                } else {
                    t.update(a.data("iconpickerValue"), true);
                }
                if (t.options.hideOnSelect && t.options.mustAccept === false) {
                    t.hide();
                }
            };
            var a = c(this.options.templates.iconpickerItem);
            var s = [];
            for (var r in this.options.icons) {
                if (typeof this.options.icons[r].title === "string") {
                    var i = a.clone();
                    i.find("i").addClass(this.options.fullClassFormatter(this.options.icons[r].title));
                    i.data("iconpickerValue", this.options.icons[r].title).on("click.iconpicker", e);
                    i.attr("title", "." + this.options.icons[r].title);
                    if (this.options.icons[r].searchTerms.length > 0) {
                        var f = "";
                        for (var l = 0; l < this.options.icons[r].searchTerms.length; l++) {
                            f = f + this.options.icons[r].searchTerms[l] + " ";
                        }
                        i.attr("data-search-terms", f);
                    }
                    s.push(i);
                }
            }
            this.iconpicker.find(".iconpicker-items").append(s);
            this.popover.find(".popover-content").append(this.iconpicker);
            return this.iconpicker;
        },
        _isEventInsideIconpicker: function(e) {
            var a = c(e.target);
            if ((!a.hasClass("iconpicker-element") || a.hasClass("iconpicker-element") && !a.is(this.element)) && a.parents(".iconpicker-popover").length === 0) {
                return false;
            }
            return true;
        },
        _bindElementEvents: function() {
            var a = this;
            this.getSearchInput().on("keyup.iconpicker", function() {
                a.filter(c(this).val().toLowerCase());
            });
            this.getAcceptButton().on("click.iconpicker", function() {
                var e = a.iconpicker.find(".iconpicker-selected").get(0);
                a.update(a.iconpickerValue);
                a._trigger("iconpickerSelected", {
                    iconpickerItem: e,
                    iconpickerValue: a.iconpickerValue
                });
                if (!a.isInline()) {
                    a.hide();
                }
            });
            this.getCancelButton().on("click.iconpicker", function() {
                if (!a.isInline()) {
                    a.hide();
                }
            });
            this.element.on("focus.iconpicker", function(e) {
                if(a.options.readonly != true){
                    a.show();
                }
                // a.show();
                e.stopPropagation();
            });
            if (this.hasComponent()) {
                this.component.on("click.iconpicker", function() {
                    a.toggle();
                });
            }
            if (this.hasInput()) {
                this.input.on("keyup.iconpicker", function(e) {
                    if (!f.inArray(e.keyCode, [ 38, 40, 37, 39, 16, 17, 18, 9, 8, 91, 93, 20, 46, 186, 190, 46, 78, 188, 44, 86 ])) {
                        a.update();
                    } else {
                        a._updateFormGroupStatus(a.getValid(this.value) !== false);
                    }
                    if (a.options.inputSearch === true) {
                        a.filter(c(this).val().toLowerCase());
                    }
                });
            }
        },
        _bindWindowEvents: function() {
            var e = c(window.document);
            var a = this;
            var t = ".iconpicker.inst" + this._id;
            c(window).on("resize.iconpicker" + t + " orientationchange.iconpicker" + t, function(e) {
                if (a.popover.hasClass("in")) {
                    a.updatePlacement();
                }
            });
            if (!a.isInline()) {
                e.on("mouseup" + t, function(e) {
                    if (!a._isEventInsideIconpicker(e) && !a.isInline()) {
                        a.hide();
                    }
                });
            }
        },
        _unbindElementEvents: function() {
            this.popover.off(".iconpicker");
            this.element.off(".iconpicker");
            if (this.hasInput()) {
                this.input.off(".iconpicker");
            }
            if (this.hasComponent()) {
                this.component.off(".iconpicker");
            }
            if (this.hasContainer()) {
                this.container.off(".iconpicker");
            }
        },
        _unbindWindowEvents: function() {
            c(window).off(".iconpicker.inst" + this._id);
            c(window.document).off(".iconpicker.inst" + this._id);
        },
        updatePlacement: function(e, a) {
            e = e || this.options.placement;
            this.options.placement = e;
            a = a || this.options.collision;
            a = a === true ? "flip" : a;
            var t = {
                at: "right bottom",
                my: "right top",
                of: this.hasInput() && !this.isInputGroup() ? this.input : this.container,
                collision: a === true ? "flip" : a,
                within: window
            };
            this.popover.removeClass("inline topLeftCorner topLeft top topRight topRightCorner " + "rightTop right rightBottom bottomRight bottomRightCorner " + "bottom bottomLeft bottomLeftCorner leftBottom left leftTop");
            if (typeof e === "object") {
                return this.popover.pos(c.extend({}, t, e));
            }
            switch (e) {
                case "inline":
                {
                    t = false;
                }
                    break;

                case "topLeftCorner":
                {
                    t.my = "right bottom";
                    t.at = "left top";
                }
                    break;

                case "topLeft":
                {
                    t.my = "left bottom";
                    t.at = "left top";
                }
                    break;

                case "top":
                {
                    t.my = "center bottom";
                    t.at = "center top";
                }
                    break;

                case "topRight":
                {
                    t.my = "right bottom";
                    t.at = "right top";
                }
                    break;

                case "topRightCorner":
                {
                    t.my = "left bottom";
                    t.at = "right top";
                }
                    break;

                case "rightTop":
                {
                    t.my = "left bottom";
                    t.at = "right center";
                }
                    break;

                case "right":
                {
                    t.my = "left center";
                    t.at = "right center";
                }
                    break;

                case "rightBottom":
                {
                    t.my = "left top";
                    t.at = "right center";
                }
                    break;

                case "bottomRightCorner":
                {
                    t.my = "left top";
                    t.at = "right bottom";
                }
                    break;

                case "bottomRight":
                {
                    t.my = "right top";
                    t.at = "right bottom";
                }
                    break;

                case "bottom":
                {
                    t.my = "center top";
                    t.at = "center bottom";
                }
                    break;

                case "bottomLeft":
                {
                    t.my = "left top";
                    t.at = "left bottom";
                }
                    break;

                case "bottomLeftCorner":
                {
                    t.my = "right top";
                    t.at = "left bottom";
                }
                    break;

                case "leftBottom":
                {
                    t.my = "right top";
                    t.at = "left center";
                }
                    break;

                case "left":
                {
                    t.my = "right center";
                    t.at = "left center";
                }
                    break;

                case "leftTop":
                {
                    t.my = "right bottom";
                    t.at = "left center";
                }
                    break;

                default:
                {
                    return false;
                }
                    break;
            }
            this.popover.css({
                display: this.options.placement === "inline" ? "" : "block"
            });
            if (t !== false) {
                this.popover.pos(t).css("maxWidth", c(window).width() - this.container.offset().left - 5);
            } else {
                this.popover.css({
                    top: "auto",
                    right: "auto",
                    bottom: "auto",
                    left: "auto",
                    maxWidth: "none"
                });
            }
            this.popover.addClass(this.options.placement);
            return true;
        },
        _updateComponents: function() {
            this.iconpicker.find(".iconpicker-item.iconpicker-selected").removeClass("iconpicker-selected " + this.options.selectedCustomClass);
            if (this.iconpickerValue) {
                this.iconpicker.find("." + this.options.fullClassFormatter(this.iconpickerValue).replace(/ /g, ".")).parent().addClass("iconpicker-selected " + this.options.selectedCustomClass);
            }
            if (this.hasComponent()) {
                var e = this.component.find("i");
                if (e.length > 0) {
                    e.attr("class", this.options.fullClassFormatter(this.iconpickerValue));
                } else {
                    this.component.html(this.getHtml());
                }
            }
        },
        _updateFormGroupStatus: function(e) {
            if (this.hasInput()) {
                if (e !== false) {
                    this.input.parents(".form-group:first").removeClass("has-error");
                } else {
                    this.input.parents(".form-group:first").addClass("has-error");
                }
                return true;
            }
            return false;
        },
        getValid: function(e) {
            if (!f.isString(e)) {
                e = "";
            }
            var a = e === "";
            e = c.trim(e);
            var t = false;
            for (var s = 0; s < this.options.icons.length; s++) {
                if (this.options.icons[s].title === e) {
                    t = true;
                    break;
                }
            }
            if (t || a) {
                return e;
            }
            return false;
        },
        setValue: function(e) {
            var a = this.getValid(e);
            if (a !== false) {
                this.iconpickerValue = a;
                this._trigger("iconpickerSetValue", {
                    iconpickerValue: a
                });
                return this.iconpickerValue;
            } else {
                this._trigger("iconpickerInvalid", {
                    iconpickerValue: e
                });
                return false;
            }
        },
        getHtml: function() {
            return '<i class="' + this.options.fullClassFormatter(this.iconpickerValue) + '"></i>';
        },
        setSourceValue: function(e) {
            e = this.setValue(e);
            if (e !== false && e !== "") {
                if (this.hasInput()) {
                    this.input.val(this.iconpickerValue);
                } else {
                    this.element.data("iconpickerValue", this.iconpickerValue);
                }
                this._trigger("iconpickerSetSourceValue", {
                    iconpickerValue: e
                });
            }
            return e;
        },
        getSourceValue: function(e) {
            e = e || this.options.defaultValue;
            var a = e;
            if (this.hasInput()) {
                a = this.input.val();
            } else {
                a = this.element.data("iconpickerValue");
            }
            if (a === undefined || a === "" || a === null || a === false) {
                a = e;
            }
            return a;
        },
        hasInput: function() {
            return this.input !== false;
        },
        isInputSearch: function() {
            return this.hasInput() && this.options.inputSearch === true;
        },
        isInputGroup: function() {
            return this.container.is(".input-group");
        },
        isDropdownMenu: function() {
            return this.container.is(".dropdown-menu");
        },
        hasSeparatedSearchInput: function() {
            return this.options.templates.search !== false && !this.isInputSearch();
        },
        hasComponent: function() {
            return this.component !== false;
        },
        hasContainer: function() {
            return this.container !== false;
        },
        getAcceptButton: function() {
            return this.popover.find(".iconpicker-btn-accept");
        },
        getCancelButton: function() {
            return this.popover.find(".iconpicker-btn-cancel");
        },
        getSearchInput: function() {
            return this.popover.find(".iconpicker-search");
        },
        filter: function(r) {
            if (f.isEmpty(r)) {
                this.iconpicker.find(".iconpicker-item").show();
                return c(false);
            } else {
                var i = [];
                this.iconpicker.find(".iconpicker-item").each(function() {
                    var e = c(this);
                    var a = e.attr("title").toLowerCase();
                    var t = e.attr("data-search-terms") ? e.attr("data-search-terms").toLowerCase() : "";
                    a = a + " " + t;
                    var s = false;
                    try {
                        s = new RegExp("(^|\\W)" + r, "g");
                    } catch (e) {
                        s = false;
                    }
                    if (s !== false && a.match(s)) {
                        i.push(e);
                        e.show();
                    } else {
                        e.hide();
                    }
                });
                return i;
            }
        },
        show: function() {
            if (this.popover.hasClass("in")) {
                return false;
            }
            c.iconpicker.batch(c(".iconpicker-popover.in:not(.inline)").not(this.popover), "hide");
            this._trigger("iconpickerShow", {
                iconpickerValue: this.iconpickerValue
            });
            this.updatePlacement();
            this.popover.addClass("in");
            setTimeout(c.proxy(function() {
                this.popover.css("display", this.isInline() ? "" : "block");
                this._trigger("iconpickerShown", {
                    iconpickerValue: this.iconpickerValue
                });
            }, this), this.options.animation ? 300 : 1);
        },
        hide: function() {
            if (!this.popover.hasClass("in")) {
                return false;
            }
            this._trigger("iconpickerHide", {
                iconpickerValue: this.iconpickerValue
            });
            this.popover.removeClass("in");
            setTimeout(c.proxy(function() {
                this.popover.css("display", "none");
                this.getSearchInput().val("");
                this.filter("");
                this._trigger("iconpickerHidden", {
                    iconpickerValue: this.iconpickerValue
                });
            }, this), this.options.animation ? 300 : 1);
        },
        toggle: function() {
            if (this.popover.is(":visible")) {
                this.hide();
            } else {
                this.show(true);
            }
        },
        update: function(e, a) {
            e = e ? e : this.getSourceValue(this.iconpickerValue);
            this._trigger("iconpickerUpdate", {
                iconpickerValue: this.iconpickerValue
            });
            if (a === true) {
                e = this.setValue(e);
            } else {
                e = this.setSourceValue(e);
                this._updateFormGroupStatus(e !== false);
            }
            if (e !== false) {
                this._updateComponents();
            }
            this._trigger("iconpickerUpdated", {
                iconpickerValue: this.iconpickerValue
            });
            return e;
        },
        destroy: function() {
            this._trigger("iconpickerDestroy", {
                iconpickerValue: this.iconpickerValue
            });
            this.element.removeData("iconpicker").removeData("iconpickerValue").removeClass("iconpicker-element");
            this._unbindElementEvents();
            this._unbindWindowEvents();
            c(this.popover).remove();
            this._trigger("iconpickerDestroyed", {
                iconpickerValue: this.iconpickerValue
            });
        },
        disable: function() {
            if (this.hasInput()) {
                this.input.prop("disabled", true);
                return true;
            }
            return false;
        },
        enable: function() {
            if (this.hasInput()) {
                this.input.prop("disabled", false);
                return true;
            }
            return false;
        },
        isDisabled: function() {
            if (this.hasInput()) {
                return this.input.prop("disabled") === true;
            }
            return false;
        },
        isInline: function() {
            return this.options.placement === "inline" || this.popover.hasClass("inline");
        }
    };
    c.iconpicker = t;
    c.fn.iconpicker = function(a) {
        return this.each(function() {
            var e = c(this);
            if (!e.data("iconpicker")) {
                e.data("iconpicker", new t(this, typeof a === "object" ? a : {}));
            }
        });
    };
    t.defaultOptions = c.extend(t.defaultOptions, {
        icons: [ {
            title: "fa fa-500px",
            searchTerms: []
        }, {
            title: "fa fa-adjust",
            searchTerms: [ "contrast" ]
        }, {
            title: "fa fa-adn",
            searchTerms: []
        }, {
            title: "fa fa-align-center",
            searchTerms: [ "middle", "text" ]
        }, {
            title: "fa fa-align-justify",
            searchTerms: [ "text" ]
        }, {
            title: "fa fa-align-left",
            searchTerms: [ "text" ]
        }, {
            title: "fa fa-align-right",
            searchTerms: [ "text" ]
        }, {
            title: "fa fa-amazon",
            searchTerms: []
        }, {
            title: "fa fa-ambulance",
            searchTerms: [ "help", "machine", "support", "vehicle" ]
        }, {
            title: "fa fa-american-sign-language-interpreting",
            searchTerms: []
        }, {
            title: "fa fa-anchor",
            searchTerms: [ "link" ]
        }, {
            title: "fa fa-android",
            searchTerms: [ "robot" ]
        }, {
            title: "fa fa-angellist",
            searchTerms: []
        }, {
            title: "fa fa-angle-double-down",
            searchTerms: [ "arrows" ]
        }, {
            title: "fa fa-angle-double-left",
            searchTerms: [ "arrows", "back", "laquo", "previous", "quote" ]
        }, {
            title: "fa fa-angle-double-right",
            searchTerms: [ "arrows", "forward", "next", "quote", "raquo" ]
        }, {
            title: "fa fa-angle-double-up",
            searchTerms: [ "arrows" ]
        }, {
            title: "fa fa-angle-down",
            searchTerms: [ "arrow" ]
        }, {
            title: "fa fa-angle-left",
            searchTerms: [ "arrow", "back", "previous" ]
        }, {
            title: "fa fa-angle-right",
            searchTerms: [ "arrow", "forward", "next" ]
        }, {
            title: "fa fa-angle-up",
            searchTerms: [ "arrow" ]
        }, {
            title: "fa fa-apple",
            searchTerms: [ "food", "fruit", "mac", "osx" ]
        }, {
            title: "fa fa-archive",
            searchTerms: [ "box", "package", "storage" ]
        }, {
            title: "fa fa-arrow-circle-down",
            searchTerms: [ "download" ]
        }, {
            title: "fa fa-arrow-circle-left",
            searchTerms: [ "back", "previous" ]
        }, {
            title: "fa fa-arrow-circle-right",
            searchTerms: [ "forward", "next" ]
        }, {
            title: "fa fa-arrow-circle-up",
            searchTerms: []
        }, {
            title: "fa fa-arrow-down",
            searchTerms: [ "download" ]
        }, {
            title: "fa fa-arrow-left",
            searchTerms: [ "back", "previous" ]
        }, {
            title: "fa fa-arrow-right",
            searchTerms: [ "forward", "next" ]
        }, {
            title: "fa fa-arrow-up",
            searchTerms: []
        }, {
            title: "fa fa-arrows-alt",
            searchTerms: [ "arrow", "arrows", "bigger", "enlarge", "expand", "fullscreen", "move", "position", "reorder", "resize" ]
        },{
            title: "fa fa-assistive-listening-systems",
            searchTerms: []
        }, {
            title: "fa fa-asterisk",
            searchTerms: [ "details" ]
        }, {
            title: "fa fa-at",
            searchTerms: [ "e-mail", "email" ]
        }, {
            title: "fa fa-audio-description",
            searchTerms: []
        }, {
            title: "fa fa-backward",
            searchTerms: [ "previous", "rewind" ]
        }, {
            title: "fa fa-balance-scale",
            searchTerms: [ "balanced", "justice", "legal", "measure", "weight" ]
        }, {
            title: "fa fa-ban",
            searchTerms: [ "abort", "ban", "block", "cancel", "delete", "hide", "prohibit", "remove", "stop", "trash" ]
        }, {
            title: "fa fa-barcode",
            searchTerms: [ "scan" ]
        }, {
            title: "fa fa-bars",
            searchTerms: [ "checklist", "drag", "hamburger", "list", "menu", "nav", "navigation", "ol", "reorder", "settings", "todo", "ul" ]
        }, {
            title: "fa fa-battery-empty",
            searchTerms: [ "power", "status" ]
        }, {
            title: "fa fa-battery-full",
            searchTerms: [ "power", "status" ]
        }, {
            title: "fa fa-battery-half",
            searchTerms: [ "power", "status" ]
        }, {
            title: "fa fa-battery-quarter",
            searchTerms: [ "power", "status" ]
        }, {
            title: "fa fa-battery-three-quarters",
            searchTerms: [ "power", "status" ]
        }, {
            title: "fa fa-bed",
            searchTerms: [ "lodging", "sleep", "travel" ]
        }, {
            title: "fa fa-beer",
            searchTerms: [ "alcohol", "bar", "beverage", "drink", "liquor", "mug", "stein" ]
        }, {
            title: "fa fa-behance",
            searchTerms: []
        }, {
            title: "fa fa-behance-square",
            searchTerms: []
        }, {
            title: "fa fa-bell",
            searchTerms: [ "alert", "notification", "reminder" ]
        }, {
            title: "fa fa-bell",
            searchTerms: [ "alert", "notification", "reminder" ]
        }, {
            title: "fa fa-bell-slash",
            searchTerms: []
        }, {
            title: "fa fa-bell-slash",
            searchTerms: []
        }, {
            title: "fa fa-bicycle",
            searchTerms: [ "bike", "gears", "transportation", "vehicle" ]
        }, {
            title: "fa fa-binoculars",
            searchTerms: []
        }, {
            title: "fa fa-birthday-cake",
            searchTerms: []
        }, {
            title: "fa fa-bitbucket",
            searchTerms: [ "bitbucket-square", "git" ]
        }, {
            title: "fa fa-bitcoin",
            searchTerms: []
        }, {
            title: "fa fa-black-tie",
            searchTerms: []
        }, {
            title: "fa fa-blind",
            searchTerms: []
        }, {
            title: "fa fa-bluetooth",
            searchTerms: []
        }, {
            title: "fa fa-bluetooth-b",
            searchTerms: []
        }, {
            title: "fa fa-bold",
            searchTerms: []
        }, {
            title: "fa fa-bolt",
            searchTerms: [ "electricity", "lightning", "weather", "zap" ]
        }, {
            title: "fa fa-bomb",
            searchTerms: []
        }, {
            title: "fa fa-book",
            searchTerms: [ "documentation", "read" ]
        }, {
            title: "fa fa-bookmark",
            searchTerms: [ "save" ]
        }, {
            title: "fa fa-bookmark",
            searchTerms: [ "save" ]
        }, {
            title: "fa fa-braille",
            searchTerms: []
        }, {
            title: "fa fa-briefcase",
            searchTerms: [ "bag", "business", "luggage", "office", "work" ]
        }, {
            title: "fa fa-btc",
            searchTerms: []
        }, {
            title: "fa fa-bug",
            searchTerms: [ "insect", "report" ]
        }, {
            title: "fa fa-building",
            searchTerms: [ "apartment", "business", "company", "office", "work" ]
        }, {
            title: "fa fa-building",
            searchTerms: [ "apartment", "business", "company", "office", "work" ]
        }, {
            title: "fa fa-bullhorn",
            searchTerms: [ "announcement", "broadcast", "louder", "megaphone", "share" ]
        }, {
            title: "fa fa-bullseye",
            searchTerms: [ "target" ]
        }, {
            title: "fa fa-bus",
            searchTerms: [ "machine", "public transportation", "transportation", "vehicle" ]
        }, {
            title: "fa fa-buysellads",
            searchTerms: []
        }, {
            title: "fa fa-calculator",
            searchTerms: []
        }, {
            title: "fa fa-calendar",
            searchTerms: [ "calendar-o", "date", "event", "schedule", "time", "when" ]
        }, {
            title: "fa fa-calendar",
            searchTerms: [ "calendar-o", "date", "event", "schedule", "time", "when" ]
        }, {
            title: "fa fa-camera",
            searchTerms: [ "photo", "picture", "record" ]
        }, {
            title: "fa fa-camera-retro",
            searchTerms: [ "photo", "picture", "record" ]
        }, {
            title: "fa fa-car",
            searchTerms: [ "machine", "transportation", "vehicle" ]
        }, {
            title: "fa fa-caret-down",
            searchTerms: [ "arrow", "dropdown", "menu", "more", "triangle down" ]
        }, {
            title: "fa fa-caret-left",
            searchTerms: [ "arrow", "back", "previous", "triangle left" ]
        }, {
            title: "fa fa-caret-right",
            searchTerms: [ "arrow", "forward", "next", "triangle right" ]
        }, {
            title: "fa fa-caret-up",
            searchTerms: [ "arrow", "triangle up" ]
        }, {
            title: "fa fa-cart-arrow-down",
            searchTerms: [ "shopping" ]
        }, {
            title: "fa fa-cart-plus",
            searchTerms: [ "add", "create", "new", "positive", "shopping" ]
        }, {
            title: "fa fa-cc-amex",
            searchTerms: [ "amex" ]
        }, {
            title: "fa fa-cc-diners-club",
            searchTerms: []
        }, {
            title: "fa fa-cc-discover",
            searchTerms: []
        }, {
            title: "fa fa-cc-jcb",
            searchTerms: []
        }, {
            title: "fa fa-cc-mastercard",
            searchTerms: []
        }, {
            title: "fa fa-cc-paypal",
            searchTerms: []
        }, {
            title: "fa fa-cc-stripe",
            searchTerms: []
        }, {
            title: "fa fa-cc-visa",
            searchTerms: []
        }, {
            title: "fa fa-certificate",
            searchTerms: [ "badge", "star" ]
        },  {
            title: "fa fa-check",
            searchTerms: [ "accept", "agree", "checkmark", "confirm", "correct", "done", "notice", "notification", "notify", "ok", "select", "success", "tick", "todo", "yes" ]
        }, {
            title: "fa fa-check-circle",
            searchTerms: [ "accept", "agree", "confirm", "correct", "done", "ok", "select", "success", "todo", "yes" ]
        }, {
            title: "fa fa-check-circle",
            searchTerms: [ "accept", "agree", "confirm", "correct", "done", "ok", "select", "success", "todo", "yes" ]
        }, {
            title: "fa fa-check-square",
            searchTerms: [ "accept", "agree", "checkmark", "confirm", "correct", "done", "ok", "select", "success", "todo", "yes" ]
        }, {
            title: "fa fa-check-square",
            searchTerms: [ "accept", "agree", "checkmark", "confirm", "correct", "done", "ok", "select", "success", "todo", "yes" ]
        }, {
            title: "fa fa-chevron-circle-down",
            searchTerms: [ "arrow", "dropdown", "menu", "more" ]
        }, {
            title: "fa fa-chevron-circle-left",
            searchTerms: [ "arrow", "back", "previous" ]
        }, {
            title: "fa fa-chevron-circle-right",
            searchTerms: [ "arrow", "forward", "next" ]
        }, {
            title: "fa fa-chevron-circle-up",
            searchTerms: [ "arrow" ]
        }, {
            title: "fa fa-chevron-down",
            searchTerms: []
        }, {
            title: "fa fa-chevron-left",
            searchTerms: [ "back", "bracket", "previous" ]
        }, {
            title: "fa fa-chevron-right",
            searchTerms: [ "bracket", "forward", "next" ]
        }, {
            title: "fa fa-chevron-up",
            searchTerms: []
        }, {
            title: "fa fa-child",
            searchTerms: []
        }, {
            title: "fa fa-chrome",
            searchTerms: [ "browser" ]
        }, {
            title: "fa fa-circle",
            searchTerms: [ "circle-thin", "dot", "notification" ]
        }, {
            title: "fa fa-circle",
            searchTerms: [ "circle-thin", "dot", "notification" ]
        }, {
            title: "fa fa-clipboard",
            searchTerms: [ "paste" ]
        }, {
            title: "fa fa-clipboard",
            searchTerms: [ "paste" ]
        },{
            title: "fa fa-clone",
            searchTerms: [ "copy", "duplicate" ]
        }, {
            title: "fa fa-clone",
            searchTerms: [ "copy", "duplicate" ]
        }, {
            title: "fa fa-cloud",
            searchTerms: [ "save" ]
        }, {
            title: "fa fa-code",
            searchTerms: [ "brackets", "html" ]
        }, {
            title: "fa fa-codepen",
            searchTerms: []
        }, {
            title: "fa fa-codiepie",
            searchTerms: []
        }, {
            title: "fa fa-coffee",
            searchTerms: [ "beverage", "breakfat", "cafe", "drink", "fall", "morning", "mug", "seasonal", "tea" ]
        }, {
            title: "fa fa-cog",
            searchTerms: [ "settings" ]
        }, {
            title: "fa fa-cogs",
            searchTerms: [ "gears", "settings" ]
        }, {
            title: "fa fa-columns",
            searchTerms: [ "dashboard", "panes", "split" ]
        }, {
            title: "fa fa-comment",
            searchTerms: [ "bubble", "chat", "conversation", "feedback", "message", "note", "notification", "sms", "speech", "texting" ]
        }, {
            title: "fa fa-comments",
            searchTerms: [ "bubble", "chat", "conversation", "feedback", "message", "note", "notification", "sms", "speech", "texting" ]
        }, {
            title: "fa fa-compass",
            searchTerms: [ "directory", "location", "menu", "safai" ]
        }, {
            title: "fa fa-compress",
            searchTerms: [ "collapse", "combine", "contract", "merge", "smaller" ]
        }, {
            title: "fa fa-connectdevelop",
            searchTerms: []
        }, {
            title: "fa fa-contao",
            searchTerms: []
        }, {
            title: "fa fa-copy",
            searchTerms: [ "clone", "duplicate", "file", "files-o" ]
        }, {
            title: "fa fa-copyright",
            searchTerms: []
        }, {
            title: "fa fa-creative-commons",
            searchTerms: []
        }, {
            title: "fa fa-credit-card",
            searchTerms: [ "buy", "checkout", "credit-card-alt", "debit", "money", "payment", "purchase" ]
        }, {
            title: "fa fa-crop",
            searchTerms: [ "design" ]
        }, {
            title: "fa fa-crosshairs",
            searchTerms: [ "gpd", "picker", "position" ]
        }, {
            title: "fa fa-css3",
            searchTerms: [ "code" ]
        }, {
            title: "fa fa-cube",
            searchTerms: [ "package" ]
        }, {
            title: "fa fa-cubes",
            searchTerms: [ "packages" ]
        }, {
            title: "fa fa-cut",
            searchTerms: [ "scissors" ]
        }, {
            title: "fa fa-dashcube",
            searchTerms: []
        }, {
            title: "fa fa-database",
            searchTerms: []
        }, {
            title: "fa fa-deaf",
            searchTerms: []
        }, {
            title: "fa fa-delicious",
            searchTerms: []
        }, {
            title: "fa fa-desktop",
            searchTerms: [ "computer", "cpu", "demo", "desktop", "device", "machine", "monitor", "pc", "screen" ]
        }, {
            title: "fa fa-deviantart",
            searchTerms: []
        }, {
            title: "fa fa-digg",
            searchTerms: []
        }, {
            title: "fa fa-download",
            searchTerms: [ "import" ]
        }, {
            title: "fa fa-dribbble",
            searchTerms: []
        }, {
            title: "fa fa-dropbox",
            searchTerms: []
        }, {
            title: "fa fa-drupal",
            searchTerms: []
        }, {
            title: "fa fa-edge",
            searchTerms: [ "browser", "ie" ]
        }, {
            title: "fa fa-edit",
            searchTerms: [ "edit", "pen", "pencil", "update", "write" ]
        }, {
            title: "fa fa-eject",
            searchTerms: []
        }, {
            title: "fa fa-ellipsis-h",
            searchTerms: [ "dots", "drag", "kebab", "list", "menu", "nav", "navigation", "ol", "reorder", "settings", "ul" ]
        }, {
            title: "fa fa-ellipsis-v",
            searchTerms: [ "dots", "drag", "kebab", "list", "menu", "nav", "navigation", "ol", "reorder", "settings", "ul" ]
        }, {
            title: "fa fa-empire",
            searchTerms: []
        }, {
            title: "fa fa-envelope",
            searchTerms: [ "e-mail", "email", "letter", "mail", "message", "notification", "support" ]
        }, {
            title: "fa fa-envelope-square",
            searchTerms: [ "e-mail", "email", "letter", "mail", "message", "notification", "support" ]
        }, {
            title: "fa fa-envira",
            searchTerms: [ "leaf" ]
        }, {
            title: "fa fa-eraser",
            searchTerms: [ "delete", "remove" ]
        }, {
            title: "fa fa-exclamation",
            searchTerms: [ "alert", "danger", "error", "important", "notice", "notification", "notify", "problem", "warning" ]
        }, {
            title: "fa fa-exclamation-circle",
            searchTerms: [ "alert", "danger", "error", "important", "notice", "notification", "notify", "problem", "warning" ]
        }, {
            title: "fa fa-exclamation-triangle",
            searchTerms: [ "alert", "danger", "error", "important", "notice", "notification", "notify", "problem", "warning" ]
        }, {
            title: "fa fa-expand",
            searchTerms: [ "bigger", "enlarge", "resize" ]
        }, {
            title: "fa fa-expeditedssl",
            searchTerms: []
        }, {
            title: "fa fa-eye",
            searchTerms: [ "optic", "see", "seen", "show", "sight", "views", "visible" ]
        }, {
            title: "fa fa-eye-slash",
            searchTerms: [ "blind", "hide", "show", "toggle", "unseen", "views", "visible", "visiblity" ]
        }, {
            title: "fa fa-facebook",
            searchTerms: [ "facebook-official", "social network" ]
        }, {
            title: "fa fa-facebook-f",
            searchTerms: [ "facebook" ]
        },{
            title: "fa fa-facebook-square",
            searchTerms: [ "social network" ]
        }, {
            title: "fa fa-fat-backward",
            searchTerms: [ "beginning", "first", "previous", "rewind", "start" ]
        }, {
            title: "fa fa-fat-forward",
            searchTerms: [ "end", "last", "next" ]
        }, {
            title: "fa fa-fax",
            searchTerms: []
        }, {
            title: "fa fa-female",
            searchTerms: [ "human", "person", "profile", "user", "woman" ]
        }, {
            title: "fa fa-fighter-jet",
            searchTerms: [ "airplane", "fat", "fly", "goose", "maverick", "plane", "quick", "top gun", "transportation", "travel" ]
        }, {
            title: "fa fa-file",
            searchTerms: [ "document", "new", "page", "pdf", "resume" ]
        }, {
            title: "fa fa-film",
            searchTerms: [ "movie" ]
        }, {
            title: "fa fa-filter",
            searchTerms: [ "funnel", "options" ]
        }, {
            title: "fa fa-fire",
            searchTerms: [ "caliente", "flame", "heat", "hot", "popular" ]
        }, {
            title: "fa fa-fire-extinguisher",
            searchTerms: []
        }, {
            title: "fa fa-firefox",
            searchTerms: [ "browser" ]
        }, {
            title: "fa fa-first-order",
            searchTerms: []
        }, {
            title: "fa fa-flag",
            searchTerms: [ "country", "notice", "notification", "notify", "pole", "report", "symbol" ]
        }, {
            title: "fa fa-flag-checkered",
            searchTerms: [ "notice", "notification", "notify", "pole", "racing", "report", "symbol" ]
        }, {
            title: "fa fa-flask",
            searchTerms: [ "beaker", "experimental", "labs", "science" ]
        }, {
            title: "fa fa-flickr",
            searchTerms: []
        }, {
            title: "fa fa-folder",
            searchTerms: []
        }, {
            title: "fa fa-folder-open",
            searchTerms: []
        }, {
            title: "fa fa-font",
            searchTerms: [ "text" ]
        }, {
            title: "fa fa-font-awesome",
            searchTerms: [ "meanpath" ]
        }, {
            title: "fa fa-fonticons",
            searchTerms: []
        }, {
            title: "fa fa-fort-awesome",
            searchTerms: [ "castle" ]
        }, {
            title: "fa fa-forumbee",
            searchTerms: []
        }, {
            title: "fa fa-forward",
            searchTerms: [ "forward", "next" ]
        }, {
            title: "fa fa-foursquare",
            searchTerms: []
        }, {
            title: "fa fa-gamepad",
            searchTerms: [ "controller" ]
        }, {
            title: "fa fa-gavel",
            searchTerms: [ "hammer", "judge", "lawyer", "opinion" ]
        }, {
            title: "fa fa-genderless",
            searchTerms: []
        }, {
            title: "fa fa-get-pocket",
            searchTerms: []
        }, {
            title: "fa fa-gg",
            searchTerms: []
        }, {
            title: "fa fa-gg-circle",
            searchTerms: []
        }, {
            title: "fa fa-gift",
            searchTerms: [ "generosity", "giving", "party", "present", "wrapped" ]
        }, {
            title: "fa fa-git",
            searchTerms: []
        }, {
            title: "fa fa-git-square",
            searchTerms: []
        }, {
            title: "fa fa-github",
            searchTerms: [ "octocat" ]
        }, {
            title: "fa fa-github-alt",
            searchTerms: [ "octocat" ]
        }, {
            title: "fa fa-github-square",
            searchTerms: [ "octocat" ]
        }, {
            title: "fa fa-gitlab",
            searchTerms: [ "Axosoft" ]
        }, {
            title: "fa fa-glide",
            searchTerms: []
        }, {
            title: "fa fa-glide-g",
            searchTerms: []
        }, {
            title: "fa fa-globe",
            searchTerms: [ "all", "coordinates", "country", "earth", "global", "gps", "language", "localize", "location", "map", "online", "place", "planet", "translate", "travel", "world" ]
        }, {
            title: "fa fa-google",
            searchTerms: []
        }, {
            title: "fa fa-google-plus",
            searchTerms: [ "google-plus-circle", "google-plus-official" ]
        }, {
            title: "fa fa-google-plus-square",
            searchTerms: [ "social network" ]
        }, {
            title: "fa fa-google-wallet",
            searchTerms: []
        }, {
            title: "fa fa-graduation-cap",
            searchTerms: [ "learning", "school", "student" ]
        }, {
            title: "fa fa-gratipay",
            searchTerms: [ "favorite", "heart", "like", "love" ]
        }, {
            title: "fa fa-h-square",
            searchTerms: [ "hospital", "hotel" ]
        }, {
            title: "fa fa-hacker-news",
            searchTerms: []
        }, {
            title: "fa fa-hashtag",
            searchTerms: []
        }, {
            title: "fa fa-headphones",
            searchTerms: [ "audio", "listen", "music", "sound", "speaker" ]
        }, {
            title: "fa fa-heart",
            searchTerms: [ "favorite", "like", "love" ]
        }, {
            title: "fa fa-heartbeat",
            searchTerms: [ "ekg", "lifeline", "vital signs" ]
        }, {
            title: "fa fa-history",
            searchTerms: []
        }, {
            title: "fa fa-home",
            searchTerms: [ "house", "main" ]
        }, {
            title: "fa fa-hotel",
            searchTerms: [ "building", "lodging" ]
        }, {
            title: "fa fa-hourglass",
            searchTerms: []
        }, {
            title: "fa fa-hourglass-end",
            searchTerms: []
        }, {
            title: "fa fa-hourglass-half",
            searchTerms: []
        }, {
            title: "fa fa-hourglass-start",
            searchTerms: []
        }, {
            title: "fa fa-houzz",
            searchTerms: []
        }, {
            title: "fa fa-html5",
            searchTerms: []
        }, {
            title: "fa fa-i-cursor",
            searchTerms: []
        }, {
            title: "fa fa-image",
            searchTerms: [ "album", "photo", "picture" ]
        }, {
            title: "fa fa-inbox",
            searchTerms: []
        }, {
            title: "fa fa-indent",
            searchTerms: []
        }, {
            title: "fa fa-industry",
            searchTerms: [ "factory", "manufacturing" ]
        }, {
            title: "fa fa-info",
            searchTerms: [ "details", "help", "information", "more" ]
        }, {
            title: "fa fa-info-circle",
            searchTerms: [ "details", "help", "information", "more" ]
        }, {
            title: "fa fa-instagram",
            searchTerms: []
        }, {
            title: "fa fa-internet-explorer",
            searchTerms: [ "browser", "ie" ]
        }, {
            title: "fa fa-ioxhost",
            searchTerms: []
        }, {
            title: "fa fa-italic",
            searchTerms: [ "italics" ]
        }, {
            title: "fa fa-joomla",
            searchTerms: []
        }, {
            title: "fa fa-jsfiddle",
            searchTerms: []
        }, {
            title: "fa fa-key",
            searchTerms: [ "password", "unlock" ]
        }, {
            title: "fa fa-language",
            searchTerms: [ "dialect", "idiom", "localize", "speech", "translate", "vernacular" ]
        }, {
            title: "fa fa-laptop",
            searchTerms: [ "computer", "cpu", "dell", "demo", "device", "dude you're getting", "mac", "macbook", "machine", "pc" ]
        }, {
            title: "fa fa-lastfm",
            searchTerms: []
        }, {
            title: "fa fa-lastfm-square",
            searchTerms: []
        }, {
            title: "fa fa-leaf",
            searchTerms: [ "eco", "flora", "nature", "plant" ]
        }, {
            title: "fa fa-leanpub",
            searchTerms: []
        }, {
            title: "fa fa-life-ring",
            searchTerms: [ "support" ]
        }, {
            title: "fa fa-link",
            searchTerms: [ "chain" ]
        }, {
            title: "fa fa-linkedin",
            searchTerms: [ "linkedin-square" ]
        }, {
            title: "fa fa-linux",
            searchTerms: [ "tux" ]
        }, {
            title: "fa fa-list",
            searchTerms: [ "checklist", "completed", "done", "finished", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-list-alt",
            searchTerms: [ "checklist", "completed", "done", "finished", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-list-alt",
            searchTerms: [ "checklist", "completed", "done", "finished", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-list-ol",
            searchTerms: [ "checklist", "list", "numbers", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-list-ul",
            searchTerms: [ "checklist", "list", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-location-arrow",
            searchTerms: [ "address", "coordinates", "gps", "location", "map", "place", "where" ]
        }, {
            title: "fa fa-lock",
            searchTerms: [ "admin", "protect", "security" ]
        }, {
            title: "fa fa-low-vision",
            searchTerms: []
        }, {
            title: "fa fa-magic",
            searchTerms: [ "autocomplete", "automatic", "mage", "magic", "spell", "witch", "wizard" ]
        }, {
            title: "fa fa-magnet",
            searchTerms: []
        }, {
            title: "fa fa-male",
            searchTerms: [ "human", "man", "person", "profile", "user" ]
        }, {
            title: "fa fa-map",
            searchTerms: [ "coordinates", "location", "paper", "place", "travel" ]
        }, {
            title: "fa fa-map-marker",
            searchTerms: [ "address", "coordinates", "gps", "localize", "location", "map", "pin", "place", "position", "travel", "where" ]
        }, {
            title: "fa fa-map-pin",
            searchTerms: [ "address", "coordinates", "gps", "localize", "location", "map", "marker", "place", "position", "travel", "where" ]
        }, {
            title: "fa fa-map-signs",
            searchTerms: []
        }, {
            title: "fa fa-mars",
            searchTerms: [ "male" ]
        }, {
            title: "fa fa-mars-double",
            searchTerms: []
        }, {
            title: "fa fa-mars-stroke",
            searchTerms: []
        }, {
            title: "fa fa-mars-stroke-h",
            searchTerms: []
        }, {
            title: "fa fa-mars-stroke-v",
            searchTerms: []
        }, {
            title: "fa fa-maxcdn",
            searchTerms: []
        }, {
            title: "fa fa-medium",
            searchTerms: []
        }, {
            title: "fa fa-medkit",
            searchTerms: [ "first aid", "firstaid", "health", "help", "support" ]
        }, {
            title: "fa fa-mercury",
            searchTerms: [ "transgender" ]
        }, {
            title: "fa fa-microphone",
            searchTerms: [ "record", "sound", "voice" ]
        }, {
            title: "fa fa-microphone-slash",
            searchTerms: [ "disable", "mute", "record", "sound", "voice" ]
        }, {
            title: "fa fa-minus",
            searchTerms: [ "collapse", "delete", "hide", "minify", "negative", "remove", "trash" ]
        }, {
            title: "fa fa-minus-circle",
            searchTerms: [ "delete", "hide", "negative", "remove", "trash" ]
        }, {
            title: "fa fa-minus-square",
            searchTerms: [ "collapse", "delete", "hide", "minify", "negative", "remove", "trash" ]
        }, {
            title: "fa fa-mixcloud",
            searchTerms: []
        }, {
            title: "fa fa-mobile",
            searchTerms: [ "apple", "call", "cell phone", "cellphone", "device", "iphone", "number", "screen", "telephone", "text" ]
        }, {
            title: "fa fa-modx",
            searchTerms: []
        }, {
            title: "fa fa-motorcycle",
            searchTerms: [ "bike", "machine", "transportation", "vehicle" ]
        }, {
            title: "fa fa-mouse-pointer",
            searchTerms: [ "select" ]
        }, {
            title: "fa fa-music",
            searchTerms: [ "note", "sound" ]
        }, {
            title: "fa fa-neuter",
            searchTerms: []
        }, {
            title: "fa fa-object-group",
            searchTerms: [ "design" ]
        }, {
            title: "fa fa-object-group",
            searchTerms: [ "design" ]
        }, {
            title: "fa fa-object-ungroup",
            searchTerms: [ "design" ]
        }, {
            title: "fa fa-odnoklassniki",
            searchTerms: []
        }, {
            title: "fa fa-odnoklassniki-square",
            searchTerms: []
        }, {
            title: "fa fa-opencart",
            searchTerms: []
        }, {
            title: "fa fa-openid",
            searchTerms: []
        }, {
            title: "fa fa-opera",
            searchTerms: []
        }, {
            title: "fa fa-optin-monster",
            searchTerms: []
        }, {
            title: "fa fa-outdent",
            searchTerms: []
        }, {
            title: "fa fa-pagelines",
            searchTerms: [ "eco", "flora", "leaf", "leaves", "nature", "plant", "tree" ]
        }, {
            title: "fa fa-paint-brush",
            searchTerms: []
        }, {
            title: "fa fa-paper-plane",
            searchTerms: []
        }, {
            title: "fa fa-paperclip",
            searchTerms: [ "attachment" ]
        }, {
            title: "fa fa-paragraph",
            searchTerms: []
        }, {
            title: "fa fa-paste",
            searchTerms: [ "clipboard", "copy" ]
        }, {
            title: "fa fa-pause",
            searchTerms: [ "wait" ]
        }, {
            title: "fa fa-pause-circle",
            searchTerms: []
        }, {
            title: "fa fa-paw",
            searchTerms: [ "animal", "pet" ]
        }, {
            title: "fa fa-paypal",
            searchTerms: []
        }, {
            title: "fa fa-percent",
            searchTerms: []
        }, {
            title: "fa fa-phone",
            searchTerms: [ "call", "earphone", "number", "support", "telephone", "voice" ]
        }, {
            title: "fa fa-phone-square",
            searchTerms: [ "call", "number", "support", "telephone", "voice" ]
        }, {
            title: "fa fa-pied-piper",
            searchTerms: []
        }, {
            title: "fa fa-pied-piper-alt",
            searchTerms: []
        }, {
            title: "fa fa-pied-piper-pp",
            searchTerms: []
        }, {
            title: "fa fa-pinterest",
            searchTerms: []
        }, {
            title: "fa fa-pinterest-p",
            searchTerms: []
        }, {
            title: "fa fa-pinterest-square",
            searchTerms: []
        }, {
            title: "fa fa-plane",
            searchTerms: [ "airplane", "destination", "fly", "location", "mode", "travel", "trip" ]
        }, {
            title: "fa fa-play",
            searchTerms: [ "music", "playing", "sound", "start" ]
        }, {
            title: "fa fa-play-circle",
            searchTerms: [ "playing", "start" ]
        }, {
            title: "fa fa-plug",
            searchTerms: [ "connect", "online", "power" ]
        }, {
            title: "fa fa-plus",
            searchTerms: [ "add", "create", "expand", "new", "positive" ]
        }, {
            title: "fa fa-plus-circle",
            searchTerms: [ "add", "create", "expand", "new", "positive" ]
        }, {
            title: "fa fa-plus-square",
            searchTerms: [ "add", "create", "expand", "new", "positive" ]
        }, {
            title: "fa fa-power-off",
            searchTerms: [ "on", "reboot", "restart" ]
        }, {
            title: "fa fa-print",
            searchTerms: []
        }, {
            title: "fa fa-product-hunt",
            searchTerms: []
        }, {
            title: "fa fa-puzzle-piece",
            searchTerms: [ "add-on", "addon", "section" ]
        }, {
            title: "fa fa-qq",
            searchTerms: []
        }, {
            title: "fa fa-qrcode",
            searchTerms: [ "scan" ]
        }, {
            title: "fa fa-question",
            searchTerms: [ "help", "information", "support", "unknown" ]
        }, {
            title: "fa fa-question-circle",
            searchTerms: [ "help", "information", "support", "unknown" ]
        }, {
            title: "fa fa-quote-left",
            searchTerms: []
        }, {
            title: "fa fa-quote-right",
            searchTerms: []
        }, {
            title: "fa fa-random",
            searchTerms: [ "shuffle", "sort" ]
        }, {
            title: "fa fa-rebel",
            searchTerms: []
        }, {
            title: "fa fa-recycle",
            searchTerms: []
        }, {
            title: "fa fa-reddit",
            searchTerms: []
        }, {
            title: "fa fa-reddit-alien",
            searchTerms: []
        }, {
            title: "fa fa-reddit-square",
            searchTerms: []
        }, {
            title: "fa fa-registered",
            searchTerms: []
        }, {
            title: "fa fa-renren",
            searchTerms: []
        }, {
            title: "fa fa-reply",
            searchTerms: []
        }, {
            title: "fa fa-reply-all",
            searchTerms: []
        }, {
            title: "fa fa-retweet",
            searchTerms: [ "refresh", "reload", "share", "swap" ]
        }, {
            title: "fa fa-road",
            searchTerms: [ "street" ]
        }, {
            title: "fa fa-rocket",
            searchTerms: [ "app" ]
        }, {
            title: "fa fa-rss",
            searchTerms: [ "blog" ]
        }, {
            title: "fa fa-rss-square",
            searchTerms: [ "blog", "feed" ]
        }, {
            title: "fa fa-safai",
            searchTerms: [ "browser" ]
        }, {
            title: "fa fa-save",
            searchTerms: [ "floppy", "floppy-o" ]
        }, {
            title: "fa fa-scribd",
            searchTerms: []
        }, {
            title: "fa fa-search",
            searchTerms: [ "bigger", "enlarge", "magnify", "preview", "zoom" ]
        }, {
            title: "fa fa-search-minus",
            searchTerms: [ "minify", "negative", "smaller", "zoom", "zoom out" ]
        }, {
            title: "fa fa-search-plus",
            searchTerms: [ "bigger", "enlarge", "magnify", "positive", "zoom", "zoom in" ]
        }, {
            title: "fa fa-sellsy",
            searchTerms: []
        }, {
            title: "fa fa-server",
            searchTerms: [ "cpu" ]
        }, {
            title: "fa fa-share",
            searchTerms: []
        }, {
            title: "fa fa-share-alt",
            searchTerms: []
        }, {
            title: "fa fa-share-alt-square",
            searchTerms: []
        }, {
            title: "fa fa-share-square",
            searchTerms: [ "send", "social" ]
        }, {
            title: "fa fa-ship",
            searchTerms: [ "boat", "sea" ]
        }, {
            title: "fa fa-shirtsinbulk",
            searchTerms: []
        }, {
            title: "fa fa-shopping-bag",
            searchTerms: []
        }, {
            title: "fa fa-shopping-basket",
            searchTerms: []
        }, {
            title: "fa fa-shopping-cart",
            searchTerms: [ "buy", "checkout", "payment", "purchase" ]
        }, {
            title: "fa fa-sign-language",
            searchTerms: []
        }, {
            title: "fa fa-signal",
            searchTerms: [ "bars", "graph", "online", "status" ]
        }, {
            title: "fa fa-simplybuilt",
            searchTerms: []
        }, {
            title: "fa fa-sitemap",
            searchTerms: [ "directory", "hierarchy", "ia", "information architecture", "organization" ]
        }, {
            title: "fa fa-skyatlas",
            searchTerms: []
        }, {
            title: "fa fa-skype",
            searchTerms: []
        }, {
            title: "fa fa-slack",
            searchTerms: [ "anchor", "hash", "hashtag" ]
        }, {
            title: "fa fa-slideshare",
            searchTerms: []
        }, {
            title: "fa fa-snapchat",
            searchTerms: []
        }, {
            title: "fa fa-snapchat-ghost",
            searchTerms: []
        }, {
            title: "fa fa-snapchat-square",
            searchTerms: []
        }, {
            title: "fa fa-sort",
            searchTerms: [ "order" ]
        }, {
            title: "fa fa-sort-down",
            searchTerms: [ "arrow", "descending", "sort-desc" ]
        }, {
            title: "fa fa-sort-up",
            searchTerms: [ "arrow", "ascending", "sort-asc" ]
        }, {
            title: "fa fa-soundcloud",
            searchTerms: []
        }, {
            title: "fa fa-space-shuttle",
            searchTerms: [ "astronaut", "machine", "nasa", "rocket", "transportation" ]
        }, {
            title: "fa fa-spinner",
            searchTerms: [ "loading", "progress" ]
        }, {
            title: "fa fa-spotify",
            searchTerms: []
        }, {
            title: "fa fa-square",
            searchTerms: [ "block", "box" ]
        }, {
            title: "fa fa-stack-exchange",
            searchTerms: []
        }, {
            title: "fa fa-stack-overflow",
            searchTerms: []
        }, {
            title: "fa fa-star",
            searchTerms: [ "achievement", "award", "favorite", "important", "night", "rating", "score" ]
        }, {
            title: "fa fa-star-half",
            searchTerms: [ "achievement", "award", "rating", "score", "star-half-empty", "star-half-full" ]
        }, {
            title: "fa fa-steam-square",
            searchTerms: []
        }, {
            title: "fa fa-step-backward",
            searchTerms: [ "beginning", "first", "previous", "rewind", "start" ]
        }, {
            title: "fa fa-step-forward",
            searchTerms: [ "end", "last", "next" ]
        }, {
            title: "fa fa-stethoscope",
            searchTerms: []
        }, {
            title: "fa fa-sticky-note",
            searchTerms: []
        }, {
            title: "fa fa-sticky-note",
            searchTerms: []
        }, {
            title: "fa fa-stop",
            searchTerms: [ "block", "box", "square" ]
        }, {
            title: "fa fa-stop-circle",
            searchTerms: []
        }, {
            title: "fa fa-street-view",
            searchTerms: [ "map" ]
        }, {
            title: "fa fa-strikethrough",
            searchTerms: []
        }, {
            title: "fa fa-stumbleupon",
            searchTerms: []
        }, {
            title: "fa fa-stumbleupon-circle",
            searchTerms: []
        }, {
            title: "fa fa-subscript",
            searchTerms: []
        }, {
            title: "fa fa-subway",
            searchTerms: [ "machine", "railway", "train", "transportation", "vehicle" ]
        }, {
            title: "fa fa-suitcase",
            searchTerms: [ "baggage", "luggage", "move", "suitcase", "travel", "trip" ]
        }, {
            title: "fa fa-superscript",
            searchTerms: [ "exponential" ]
        }, {
            title: "fa fa-table",
            searchTerms: [ "data", "excel", "spreadsheet" ]
        }, {
            title: "fa fa-tablet",
            searchTerms: [ "apple", "device", "ipad", "kindle", "screen" ]
        }, {
            title: "fa fa-tag",
            searchTerms: [ "label" ]
        }, {
            title: "fa fa-tags",
            searchTerms: [ "labels" ]
        }, {
            title: "fa fa-tasks",
            searchTerms: [ "downloading", "downloads", "loading", "progress", "settings" ]
        }, {
            title: "fa fa-taxi",
            searchTerms: [ "cab", "cabbie", "car", "car service", "lyft", "machine", "transportation", "uber", "vehicle" ]
        }, {
            title: "fa fa-tencent-weibo",
            searchTerms: []
        }, {
            title: "fa fa-terminal",
            searchTerms: [ "code", "command", "console", "prompt" ]
        }, {
            title: "fa fa-text-height",
            searchTerms: []
        }, {
            title: "fa fa-text-width",
            searchTerms: []
        }, {
            title: "fa fa-th",
            searchTerms: [ "blocks", "boxes", "grid", "squares" ]
        }, {
            title: "fa fa-th-large",
            searchTerms: [ "blocks", "boxes", "grid", "squares" ]
        }, {
            title: "fa fa-th-list",
            searchTerms: [ "checklist", "completed", "done", "finished", "ol", "todo", "ul" ]
        }, {
            title: "fa fa-themeisle",
            searchTerms: []
        }, {
            title: "fa fa-thumbs-down",
            searchTerms: [ "disagree", "disapprove", "dislike", "hand", "thumbs-o-down" ]
        }, {
            title: "fa fa-thumbs-up",
            searchTerms: [ "agree", "approve", "favorite", "hand", "like", "ok", "okay", "success", "thumbs-o-up", "yes", "you got it dude" ]
        }, {
            title: "fa fa-times",
            searchTerms: [ "close", "cross", "error", "exit", "incorrect", "notice", "notification", "notify", "problem", "wrong", "x" ]
        }, {
            title: "fa fa-times-circle",
            searchTerms: [ "close", "cross", "exit", "incorrect", "notice", "notification", "notify", "problem", "wrong", "x" ]
        }, {
            title: "fa fa-tint",
            searchTerms: [ "drop", "droplet", "raindrop", "waterdrop" ]
        }, {
            title: "fa fa-toggle-off",
            searchTerms: [ "switch" ]
        }, {
            title: "fa fa-toggle-on",
            searchTerms: [ "switch" ]
        }, {
            title: "fa fa-trademark",
            searchTerms: []
        }, {
            title: "fa fa-train",
            searchTerms: [ "bullet", "locomotive", "railway" ]
        }, {
            title: "fa fa-transgender",
            searchTerms: [ "intersex" ]
        }, {
            title: "fa fa-transgender-alt",
            searchTerms: []
        }, {
            title: "fa fa-trash",
            searchTerms: [ "delete", "garbage", "hide", "remove" ]
        }, {
            title: "fa fa-tree",
            searchTerms: [ "bark", "fall", "flora", "forest", "nature", "plant", "seasonal" ]
        }, {
            title: "fa fa-trello",
            searchTerms: []
        }, {
            title: "fa fa-tripadvisor",
            searchTerms: []
        }, {
            title: "fa fa-trophy",
            searchTerms: [ "achievement", "award", "cup", "game", "winner" ]
        }, {
            title: "fa fa-truck",
            searchTerms: [ "delivery", "shipping" ]
        }, {
            title: "fa fa-tty",
            searchTerms: []
        }, {
            title: "fa fa-tumblr",
            searchTerms: []
        }, {
            title: "fa fa-tumblr-square",
            searchTerms: []
        }, {
            title: "fa fa-tv",
            searchTerms: [ "computer", "display", "monitor", "television" ]
        }, {
            title: "fa fa-twitch",
            searchTerms: []
        }, {
            title: "fa fa-twitter",
            searchTerms: [ "social network", "tweet" ]
        }, {
            title: "fa fa-twitter-square",
            searchTerms: [ "social network", "tweet" ]
        }, {
            title: "fa fa-umbrella",
            searchTerms: [ "protection", "rain" ]
        }, {
            title: "fa fa-underline",
            searchTerms: []
        }, {
            title: "fa fa-undo",
            searchTerms: [ "back", "control z", "exchange", "oops", "return", "rotate", "swap" ]
        }, {
            title: "fa fa-universal-access",
            searchTerms: []
        }, {
            title: "fa fa-university",
            searchTerms: [ "bank", "institution" ]
        }, {
            title: "fa fa-unlink",
            searchTerms: [ "chain", "chain-broken", "remove" ]
        }, {
            title: "fa fa-unlock",
            searchTerms: [ "admin", "lock", "password", "protect" ]
        }, {
            title: "fa fa-unlock-alt",
            searchTerms: [ "admin", "lock", "password", "protect" ]
        }, {
            title: "fa fa-upload",
            searchTerms: [ "export", "publish" ]
        }, {
            title: "fa fa-usb",
            searchTerms: []
        }, {
            title: "fa fa-user",
            searchTerms: [ "account", "avatar", "head", "human", "man", "person", "profile" ]
        }, {
            title: "fa fa-user-md",
            searchTerms: [ "doctor", "job", "medical", "nurse", "occupation", "profile" ]
        }, {
            title: "fa fa-user-plus",
            searchTerms: [ "positive", "sign up", "signup" ]
        }, {
            title: "fa fa-user-secret",
            searchTerms: [ "clothing", "coat", "hat", "incognito", "privacy", "spy", "whisper" ]
        }, {
            title: "fa fa-user-times",
            searchTerms: [ "archive", "delete", "remove", "x" ]
        }, {
            title: "fa fa-users",
            searchTerms: [ "people", "persons", "profiles" ]
        }, {
            title: "fa fa-venus",
            searchTerms: [ "female" ]
        }, {
            title: "fa fa-venus-double",
            searchTerms: []
        }, {
            title: "fa fa-venus-mars",
            searchTerms: []
        }, {
            title: "fa fa-viacoin",
            searchTerms: []
        }, {
            title: "fa fa-viadeo",
            searchTerms: []
        }, {
            title: "fa fa-viadeo-square",
            searchTerms: []
        }, {
            title: "fa fa-vimeo",
            searchTerms: []
        }, {
            title: "fa fa-vimeo-square",
            searchTerms: []
        }, {
            title: "fa fa-vine",
            searchTerms: []
        }, {
            title: "fa fa-vk",
            searchTerms: []
        }, {
            title: "fa fa-volume-down",
            searchTerms: [ "audio", "lower", "music", "quieter", "sound", "speaker" ]
        }, {
            title: "fa fa-volume-off",
            searchTerms: [ "audio", "music", "mute", "sound" ]
        }, {
            title: "fa fa-volume-up",
            searchTerms: [ "audio", "higher", "louder", "music", "sound", "speaker" ]
        }, {
            title: "fa fa-weibo",
            searchTerms: []
        }, {
            title: "fa fa-weixin",
            searchTerms: []
        }, {
            title: "fa fa-whatsapp",
            searchTerms: []
        }, {
            title: "fa fa-wheelchair",
            searchTerms: [ "handicap", "person" ]
        }, {
            title: "fa fa-wifi",
            searchTerms: []
        }, {
            title: "fa fa-wikipedia-w",
            searchTerms: []
        }, {
            title: "fa fa-windows",
            searchTerms: [ "microsoft" ]
        },{
            title: "fa fa-wordpress",
            searchTerms: []
        },{
            title: "fa fa-wpbeginner",
            searchTerms: []
        }, {
            title: "fa fa-wpforms",
            searchTerms: []
        }, {
            title: "fa fa-wrench",
            searchTerms: [ "fix", "settings", "spanner", "tool", "update" ]
        }, {
            title: "fa fa-xing",
            searchTerms: []
        }, {
            title: "fa fa-xing-square",
            searchTerms: []
        }, {
            title: "fa fa-y-combinator",
            searchTerms: []
        }, {
            title: "fa fa-yahoo",
            searchTerms: []
        }, {
            title: "fa fa-yelp",
            searchTerms: []
        }, {
            title: "fa fa-yoast",
            searchTerms: []
        }, {
            title: "fa fa-youtube",
            searchTerms: [ "film", "video", "youtube-play", "youtube-square" ]
        }, {
            title: "fa fa-youtube-square",
            searchTerms: []
        }, {
            title: "fa fa-wheelchair-alt",
            searchTerms: []
        }, {
            title: "fa fa-google-plus-official",
            searchTerms: []
        }, {
            title: "fa fa-question-circle-o",
            searchTerms: []
        }, {
            title: "fa fa-volume-control-phone",
            searchTerms: []
        }]
    });
});
(function ($) {
    IPLAT.Menu = function(el, options) {

        var options = $.extend({}, IPLATUI.Config.EFMenu, IPLATUI.EFMenu, options);

        var $el = typeof el === 'object' ? el : $(el);
        var serviceName = options.serviceName, // 服务名
            methodName = options.methodName,  // 服务方法
            blockName = options.blockName, // 返回的数据块名称
            flat2Map = options.flat2Map || IPLAT.flat2MapNoItemsEmptyArray,// 转换方法
            initEiInfo;

            if (IPLAT.isEiInfo(options.eiInfo)) {
                initEiInfo = options.eiInfo;
            }

            if (_.isFunction(options.eiInfo)) {
                initEiInfo = options.eiInfo.call(null);
            }

            if (!initEiInfo) {
                initEiInfo = new EiInfo(); // 获取初始化的EiInfo
            }

        if (!options.dataSource) {
            // 发送请求获取数据
            EiCommunicator.send(serviceName, methodName, initEiInfo, {
                onSuccess: function (ei) {
                    var block = ei.getBlock(blockName),
                        dataSource, data;
                    if (block) {
                        data = block.getMappedRows() || [];
                        // 处理数据
                        dataSource = flat2Map.call(null, data, options['idField'], options['parentId'], options['rootLevel'], options['fieldName']);
                        options['dataSource'] =  dataSource;
                        $el.kendoMenu(options);
                    }
                },
                onFail: function (ei) {
                    // 错误处理
                }
            });
        } else {
            $el.kendoMenu(options);
        }


    }


})(jQuery);
;(function ($) {
    var Class = kendo.Class,
        Widget = kendo.ui.Widget,

        // EFPopupInput的事件
        NS = ".IPLAT",

        // 弹窗时，容器div，自定义的div渲染完成，Grid渲染前触发的事件
        INIT = "init",
        PREVENT_POPUP = "preventPopup",

        // Grid构造（查询）时，触发的事件
        QUERY = "query",

        // Grid渲染完成时触发的事件
        LOAD_COMPLETE = "loadComplete",

        BACK_FILL = "backFill",
        CLEAR_INPUT = "clearInput",

        STATIC_WINDOW = 'iplat_static_window',
        TOP_FIX = 2, // 2px 是Input框外的span的border 修正
        LEFT_FIX = 7, // 7px 是Input框外的span的padding 修正
        extend = $.extend,
        isFunction = $.isFunction,
        isString = _.isString,
        each = _.each,
        TransportFactory = IPLAT.Transport.TransportFactory,
        RestfulTransport = IPLAT.Transport.RestfulTransport,
        EiConstant = IPLAT.EiConstant,
        EiCommunicator = IPLAT.EiCommunicator,
        EiInfo = IPLAT.EiInfo,
        EiBlock = IPLAT.EiBlock,
        windowManager;

    var efSecurityToken = $("#efSecurityToken").val();

    /**
     * WindowManager用来管理弹出窗口，由于是控制多重窗口的显示
     * @constructor
     */
    var WindowManager = function () {
        var that = this;
        that.type = 0; // 0 为销毁，1为内部点击
        $(document).on("click", function () {
            that.destroy();
        });
    };

    WindowManager.prototype.destroy = function () {
        this.type -= 1;
        if (this.type < 0) {
            this.type = 0;
            if (this.window) {
                this.window.close();
                this.window = null;
            }
        }
    };

    /**
     * 将kendoWindow对象交由ManagerWindow管理
     * @param {kendo.ui.Window} window kendoWindow对象
     */
    WindowManager.prototype.inject = function (window) {
        this.window && this.window.close();
        this.window = window;
        this.type = 1;
    };

    /**
     * 在弹出窗口的内部点击，不关闭窗口（e.stopPropagation）
     */
    WindowManager.prototype.innerClick = function () {
        this.type = 1;
    };

    windowManager = new WindowManager();

    // 弹出框页面抖动判断是由于调用 _activate 引起的
    // 防止抖动引起的问题， 这里对 _activate 进行优化
    kendo.ui.Window.fn._activate = (function (_activate) {
        return function () {
            var that = this, options = that.options;
            if (options[STATIC_WINDOW] && options[STATIC_WINDOW] === true) {
                // 重绘子页面
                kendo.resize(this.element.children());
            } else {
                _activate.call(this);
            }
        }
    })(kendo.ui.Window.fn._activate);


    /**
     * 构造弹出Grid的columns数组
     * @param columnEnames 列的英文名数组
     * @param columnCnames 列的中文名数组
     * @return {Array}
     * @private
     */
    function _buildColumns(columnEnames, columnCnames) {
        var columns = [];
        var fields = columnEnames.split(','), titles = columnCnames.split(','),
            length = Math.min(fields.length, titles.length);
        for (var i = 0; i < length; i++) {
            var column = {};
            column['field'] = fields[i];
            column['title'] = titles[i];
            column['enable'] = false;
            column['width'] = 120;
            columns.push(column);
        }
        return columns;
    }

    /**
     * 获取或者创建弹出窗口div容器
     * @param id
     * @return {*|HTMLElement}
     */
    function getContainer(id) {
        var $container = $("#" + id);
        if ($container.length === 0) {
            return $("<div id='" + id + "' data-new='true' />").appendTo(document.body);
        }
        return $container;
    }

    /**
     * 创建KendoWindow窗口对象
     * @param options
     */
    function buildKendoWindow(options) {
        var container = options.container, // 弹出窗口容器元素jQuery对象
            inputElement = options.textElement, // 输入框元素jQuery对象
            dynamic = options.dynamic || {},
            resizable = options.resizable || false, // 调整形状大小
            title = options.title, // 弹出窗口的标题
            windowScrollTop = $(window).scrollTop(), // 页面纵向滚动条的滚动距离
            windowHeight = $(window).height(),
            halfWindowHeight = windowHeight / 2,
            draggable = !(dynamic.draggable === false), // 默认可以拖拽移动弹窗

            height = options.height || dynamic.height, // 弹出窗口初始高度
            width = options.width || dynamic.width, // 弹出窗口的初始宽度

            left = dynamic.left, // 弹出窗口到文档页面左侧的距离
            top = dynamic.top, // 弹出窗口到文档页面顶部的距离

            bottom;

        var resizableOptions = {
            'resizable': resizable,
            isMaximized: false,
            autoFocus: false,
            draggable: draggable,
            title: title,
            height: height,
            width: width
        };

        // 添加自定义属性，控制popup弹出框是否抖动
        resizableOptions[STATIC_WINDOW] = true;

        if (!container.data("kendoWindow")) {
            container.kendoWindow(resizableOptions);
        }

        var windowInstance = container.data("kendoWindow");

        // 窗口父容器
        var windowWrapper = windowInstance.element.parent();

        // 重置bottom和top
        windowWrapper.css({'bottom': '', 'top': ''});

        var elementPosition = IPLAT.Util.getElementScreenPosition(inputElement);

        // 定位弹出框
        if ($.isNumeric(top)) {
            // 使用配置top
            windowWrapper.css("top", top + "px");
        } else if (IPLAT.isString(top)) {
            windowWrapper.css("top", parseFloat(top) + "%");
        } else {
            // 当元素位于上半区，并且弹出框高度低于屏幕高度一半时候，弹出框往下
            // if ((elementPosition.top - halfWindowHeight > 0) && +(height || 0) < halfWindowHeight) {
            //     // 向上弹窗
            //     bottom = windowHeight - elementPosition.top - windowScrollTop;
            //     windowWrapper.css("bottom", bottom + "px");
            // } else {
            //     // 向下弹窗
            //     top = elementPosition.top + elementPosition.height + windowScrollTop;
            //     windowWrapper.css("top", top + "px");
            // }

            // 统一向下弹窗
            top = elementPosition.top + elementPosition.height + windowScrollTop + TOP_FIX;
            windowWrapper.css("top", top + "px");
        }


        if ($.isNumeric(left)) {
            windowWrapper.css("left", left + "px");
        } else if (IPLAT.isString(left)) {
            windowWrapper.css("left", parseFloat(left) + "%");
        } else {
            left = inputElement.offset().left - LEFT_FIX;
            if (left + windowWrapper.width() > document.body.clientWidth) {
                left = document.body.clientWidth - windowWrapper.width() - 30;
            }
            windowWrapper.css("left", left + "px"); // left + width
        }

        // 处理kendoWindow外点击关闭情形
        windowManager.inject(windowInstance);

        windowWrapper.unbind("click.iplat");
        windowWrapper.on("click.iplat", function () {
            windowManager.innerClick();
        });

        // filter弹出框
        $(document).on("click", ".k-animation-container", function (e) {
            windowManager.innerClick();
        });

        // 处理Grid里面存在滚动时，防止Grid滚动
        var $grid = inputElement.closest('.k-grid');
        var kendoGrid = $grid.data('kendoGrid');
        if (kendoGrid && kendoGrid instanceof kendo.ui.Grid) {
            // 禁止此Grid进行滚动
            IPLAT.Util.forbidKendoGridScroll(kendoGrid);
            // 防止弹出框造成的屏幕窗口抖动
            IPLAT.Util.preventWindowShake();


            windowInstance.bind('close', function (e) {
                // 关闭弹出框后，让Grid重新进行滚动
                IPLAT.Util.restartKendoGridScroll(kendoGrid);
                // 还原屏幕窗口
                IPLAT.Util.restoreWindow();
            });
        }

        return windowInstance;
    }


    /**
     * 创建自定义弹出列
     * @param options
     */
    function buildCustomColumn(options) {
        var that = this,
            gridBlockId = options.gridBlockId,
            ename = options.ename,
            cname = options.cname,
            copy = options.copy,
            $container,
            initFunction,
            kendoWindow;

        IPLAT.EFGrid[gridBlockId].columns.push({// TODO: 丢失了EFColumn中的属性
            field: ename,
            title: cname,
            enable: true,
            readonly: options.readonly, // TODO: 丢失了EFColumn中的属性，Popup的列属性通过JS配置
            hidden: false,
            locked: false,
            copy: copy,
            iplatSort: options.iplatSort || false,
            editType: "popup",
            // format: "",
            // column中存储弹出框options信息
            popupOptions: options,
            // column中动态属性配置
            attributes: options.dynamic,
            editor: function (container, params) {

                var cusOptions = options,
                    grid = container.closest(".k-grid").data("kendoGrid"),
                    column = grid.columns[grid.cellIndex(container)],
                    attributes = column.attributes || {};
                // 添加验证功能，TODO验证后的提示信息样式需调整
                var input = $('<span class="k-widget k-dropdown i-popup-input k-header">' +
                    '<span class="k-dropdown-wrap">' +
                    '<input type="text" name="' + params.field + '" id="' + params.field + '" class="popupColumn" ' +
                    'value="" ' + (attributes.required === true ? "required" : "") + ' >' +
                    '<span class="k-select">' +
                    '<span id="icon_' + params.field + '" class="i-icon i-popup-grid"></span></span></span></span>');

                if (attributes.required === true) {
                    container.addClass("i-invalid-cell");
                }

                input.appendTo(container);

                initFunction = column[INIT];

                if (!IPLAT.Util.hasEvent(that, INIT + NS)) {
                    that.bind(INIT + NS, initFunction);
                }

                cusOptions.textElement = container; // td
                $container = cusOptions.container;

                $("#icon_" + params.field).mousedown(function () {
                    if (!that.trigger(INIT + NS, {container: $container})) {
                        buildKendoWindow(cusOptions);

                        kendoWindow = cusOptions['container'].data('kendoWindow');

                        kendoWindow.open();
                    }
                });
            }
        });

    }

    /**
     * 弹出式的Grid都采用REST的方式提交数据
     */
    var AbstractPopupGridTransport = RestfulTransport.extend({
        _buildModels: function (params, operation) {
            var that = this,
                options = that.options,
                blockId = options.resultId,
                gridId = options.gridId;

            var eiBlock = that.postEiInfo.getBlock(blockId);

            if (!IPLAT.isEiBlock(eiBlock)) {
                // 初始化时无resultBlock的场景
                eiBlock = new EiBlock(blockId);
                that.postEiInfo.addBlock(eiBlock);
            }

            var kendoGrid = $("#" + gridId).data('kendoGrid'),
                showCount = IPLAT.isKendoGrid(kendoGrid) ? kendoGrid.options.showCount : options.showCount;


            if (params.pageSize >= 0 && params.skip >= 0) {
                eiBlock.set(EiConstant.LIMIT, params.pageSize);
                eiBlock.set(EiConstant.OFFSET, params.skip);
            }

            if (!!showCount) {
                eiBlock.set(EiConstant.SHOW_COUNT, "true");
            }
        }
    });

    /**
     * 根据小代码中的SQL，生成动态的表（DynamicGrid）
     */
    var DynamicGridTransport = AbstractPopupGridTransport.extend({
        _buildURL: function () {
            var that = this,
                url = that.options.url,
                serviceId = that.serviceName;

            return {
                read: {
                    type: 'POST',
                    dataType: "json",
                    contentType: IPLAT.AJAX.ContentType.JSON,
                    url: url + "/" + serviceId
                }
            };
        },

        _buildFilter: function (params) {
            var that = this, // http://knexjs.org  dynamic query
                blockId = that.options.resultId, // codeName
                condition = that.options.condition, // 小代码的查询条件
                postEiInfo,
                queryInfo = that.options.queryInfo;

            if (!that._postQuery()) {

                if (!IPLAT.isUndefined(queryInfo)) {
                    // 调用JS中配置的查询条件（方法或者EiInfo)
                    if (isFunction(queryInfo)) {
                        postEiInfo = queryInfo();
                    } else {
                        postEiInfo = queryInfo;
                    }

                    //  非EiInfo都默认重置
                    if (IPLAT.isEiInfo(postEiInfo)) {
                        that.postEiInfo = postEiInfo;
                    } else {
                        that.postEiInfo = new EiInfo();
                    }


                } else {
                    that.postEiInfo.set("condition", condition); // condition为小代码的查询条件

                }

                that.postEiInfo.set("codesetCode", blockId); // blockId小代码类别名
                IPLAT.Util.filterAdapter(params.filter, that.postEiInfo);

                // S_ED_CM_00文档
                // http://platform.baosight.com:8090/pages/viewpage.action?pageId=12551998

                // that.postEiInfo.set("codesetCode", blockId); // blockId小代码类别名


            }
        }
    });

    /**
     * 根据服务名，方法名(目前仅支持本地服务调用)，获取表格信息
     */
    var ServiceGridTransport = AbstractPopupGridTransport.extend({
        _buildURL: function () {
            var that = this,
                url = that.options.url,
                serviceName = that.serviceName,
                methodName = that.methodName;

            return {
                read: {
                    type: 'POST',
                    dataType: "json",
                    contentType: IPLAT.AJAX.ContentType.JSON,
                    url: url + "/" + serviceName + "/" + methodName
                }
            };
        },

        _buildFilter: function (params) {
            var that = this,
                options = that.options,
                postEiInfo,
                queryInfo = options.queryInfo;

            if (!that._postQuery()) {
                // 重新调用配置的查询（方法或者EiInfo）
                if (isFunction(queryInfo)) {
                    postEiInfo = queryInfo();
                } else {
                    postEiInfo = queryInfo;
                }

                //  非EiInfo都默认重置
                if (IPLAT.isEiInfo(postEiInfo)) {
                    that.postEiInfo = postEiInfo;
                } else {
                    that.postEiInfo = new EiInfo();
                }

                IPLAT.Util.filterAdapter(params.filter, that.postEiInfo);
            }
        }
    });

    TransportFactory.registerTransport("DYNAMIC_GRID_TRANSPORT", DynamicGridTransport);
    TransportFactory.registerTransport("SERVICE_GRID_TRANSPORT", ServiceGridTransport);


    /**
     * 使用IPLAT封装的js，构造弹出式Grid
     */
    var AbstractPopupGrid = Class.extend({
        init: function (options) {
            var that = this;
            that.options = options;

            that.resultId = options.resultId; // resultId
            that.textField = options.textField;
            that.valueField = options.valueField;
            that.textElement = options.textElement;
            that.valueElement = options.valueElement;
            that.title = options.title;
            that.columnEnames = options.columnEnames.replace(" ", "");
            that.backFillColumnIds = options.backFillColumnIds.replace(" ", "");
            that.backFillFieldIds = options.backFillFieldIds.replace(" ", "");
        },

        /**
         * 第一次打开PopupGrid，查询，准备好元数据信息
         *
         * @param options
         * @private
         */
        _prepareEiInfo: function (options) {
            var that = this,
                transport = that._buildTransport(options);

            // 会调用transport中的 queryInfo
            var jsonString = transport.parameterMap({
                pageSize: 10,
                skip: 0,
                filters: {filters: [], logic: "and"}
            }, "read");


            return EiCommunicator.send("", "", new EiInfo(""), null, {
                url: transport.read.url,
                data: jsonString
            });
        },

        _buildGridOptions: function () {
            var that = this,
                options = that.options,
                field = options.field, // 字段的英文名 ename
                blockId = options.resultId,
                tagId = field + "-" + blockId, //  保证唯一性 ename,field-blockId
                url = options.url,
                columnEnames = options.columnEnames.replace(" ", ""),
                columnCnames = options.columnCnames.replace(" ", "");

            // 模拟成autoDraw为no，扩展场景 mixed yes
            IPLAT.EFGrid[tagId] = {
                columns: _buildColumns(columnEnames, columnCnames),
                readonlyColumns: []
            };

            options.blockId = blockId;
            var eiBlock = EiBlock.buildByNames(blockId, columnEnames, columnCnames);

            // 判断弹出的Grid的列是否显示过滤条件
            var filterPopupGrid = IPLAT.Util.boolConfigHelper((options.dynamic && options.dynamic.filterPopupGrid),
                IPLATUI.Config.EFPopup.filterPopupGrid);

            // 判断弹出的Grid是否查询总数
            var showCount = IPLAT.Util.boolConfigHelper((options.dynamic && options.dynamic.showCount),
                IPLATUI.Config.EFPopup.showCount);
            options.showCount = showCount;

            var gridOptions = {
                blockId: blockId,
                tagId: tagId,
                checkMode: "single, row", // 单击勾选行
                configId: tagId, // IPLATUI.EFGrid 防止弹出的Grid 页面上的Grid的block相同
                autoDraw: "no",
                gridId: options.gridId, // 小代码grid div id
                url: url,  // "/service/S_ED_CM_00"
                eiInfo: options.eiInfo,
                eiBlock: eiBlock,
                enable: false,
                showCount: showCount,
                pagerPosition: "top",
                toolbarConfig: {hidden: true},
                exportGrid: false
            };

            if (filterPopupGrid) {
                gridOptions = extend(gridOptions, {
                    filterable: {
                        extra: false // 只显示一个查询条件
                    }
                });
            }

            return gridOptions;
        },

        buildPopupGrid: function () {
            var that = this,
                options = that.options,
                transport,
                gridOptions;

            transport = that._buildTransport(options);
            gridOptions = that._buildGridOptions(options);

            gridOptions = extend(true, gridOptions, {
                dataSource: {
                    transport: transport
                }
            });

            if (IPLAT.isEiInfo(options.eiInfo)) {
                return IPLAT.Grid(gridOptions);

            } else {
                return {
                    gridOptions: gridOptions, // 缺少EiInfo
                    eiPromise: that._prepareEiInfo(options)
                }
            }
        }
    });

    /**
     * 根据小代码动态生成的Grid
     */
    var DynamicGrid = AbstractPopupGrid.extend({
        _buildTransport: function (options) {
            return TransportFactory.getTransport("DYNAMIC_GRID_TRANSPORT", options);
        }
    });

    /**
     * 根据服务名，方法名生成的Grid
     */
    var ServiceGrid = AbstractPopupGrid.extend({
        _buildTransport: function (options) {
            return TransportFactory.getTransport("SERVICE_GRID_TRANSPORT", options);
        }
    });

    var PopupGridFactory = (function () {
        var popupType = {
            DYNAMICGRID: DynamicGrid,
            SERVICEGRID: ServiceGrid
        };

        return {
            getPopupGrid: function (type, options) {
                var popupGrid = popupType[type],
                    builder = new popupGrid(options);

                return builder.buildPopupGrid();
            },

            registerPopupGrid: function (type, builder) {
                if (builder instanceof AbstractPopupGrid) {
                    popupType[type] = builder;
                }
                return PopupGridFactory;
            }
        }
    })();

    /**
     * 弹出窗口的创建过程封装，包含内容Grid的创建，自定义的div内容混入(mixin)封装
     */
    var AbstractPopupWindow = Widget.extend({
        init: function (options) {
            var that = this;

            that.options = options;
            that._events = {};

            that.field = options.field;
            that.resultId = options.resultId; // resultId
            that.textField = options.textField;
            that.valueField = options.valueField;
            that.textElement = options.textElement;
            that.valueElement = options.valueElement;
            that.title = options.title;
            that.columnEnames = options.columnEnames.replace(" ", "");
            that.backFillColumnIds = options.backFillColumnIds.replace(" ", "");
            that.backFillFieldIds = options.backFillFieldIds.replace(" ", "");

            that._prepare();
        },

        _prepare: function () {
            // 分析弹窗控件的使用场景
            var that = this,
                gridType,
                targetType,
                popupType = that.options.popupType || "";

            var typeInfo = popupType.split("_");
            gridType = typeInfo[0];
            targetType = typeInfo[1];

            that.options.gridType = gridType;
            that.options.targetType = targetType;
        },

        /**
         * 构造弹窗容器DOM结点div, 还没有使用KendoWindow进行实例化
         * @private
         */
        _buildContainer: function () {
            var that = this,
                resultId = that.resultId, // popupInput  dynamic grid
                field = that.field;

            // 要确保不同弹出字段的容器的唯一性
            var containerId = "ef_popup_" + field + "_" +
                resultId.replace(/\./g, '_');

            that.options.gridId = containerId.replace('ef_popup', 'ef_grid');
            that.options.container = getContainer(containerId);
            return that.options.container;
        },

        /**
         * 构建弹出式的Grid
         *
         * @param options
         * @return {*} 返回kendoGrid组件或者 初始的Promise对象
         * @private
         */
        _buildGrid: function (options) {
            // 和弹出Grid的种类进行桥接 (Bridge Pattern)
            return PopupGridFactory.getPopupGrid(options.gridType, options);
        },

        /**
         * 构建确定按钮
         *
         * @param container
         * @private
         */
        _buildSaveButton: function (container) {
            var that = this,
                popGrid = that.popupGrid,
                $container = $(container),
                $saveBtnDiv;

            $saveBtnDiv = $("<div class='k-window-save k-popup-save'><button class='i-btn-lg i-btn-wide'>" +
                IPLAT.CONSTANTS.BACKFILL_BUTTON_NAME + "</button></div>").on("click", "button", function () {
                that._backFillFields(popGrid);
            });
            return $container.append($saveBtnDiv);
        },

        /**
         * 数据回填逻辑封装
         *
         * @param codeGrid
         * @private
         */
        _backFillFields: function (codeGrid) {
            var that = this,
                backFillFieldIds = that.backFillFieldIds,
                backFillColumnIds = that.backFillColumnIds,
                textElement = that.textElement,
                valueElement = that.valueElement,
                backFillGrid = that.options.backFillGrid,
                textField = that.textField,
                valueField = that.valueField,

                fields,  // 其他的Input字段数据回填
                columns,  // 其他Column列数据回填
                i = 0,
                length = 0,
                copy = that.options.copy,
                // 处理select()接口再cell情况下获取不到model信息
                model = codeGrid.getSelectedRows()[0];

            // 通过copy属性来判断是否批量复制中弹出Grid还是通常column中弹出Grid
            // 批量复制中弹出Popup
            if (!!copy) {
                // 触发回填方法backFill
                if (that.trigger(BACK_FILL + NS, {
                        grid: codeGrid,
                        model: model,
                        copy: true
                    })) {
                    // 自定义回填, 不使用默认的回填逻辑
                    windowManager.destroy();
                    return;
                }

                // if (isFunction(that.options.backFill)) {
                //     that.options.backFill.call(backFillGrid, {
                //         grid: codeGrid,
                //         model: model,
                //         copy: true
                //     });
                //     windowManager.destroy();
                //     return;
                // }

                if (!!model) {
                    fields = backFillFieldIds.split(',');
                    columns = backFillColumnIds.split(',');

                    // 把数据回填到backFillGrid中
                    var checkRows = backFillGrid.getCheckedRows();

                    for (i = 0, length = columns.length; i < length; i++) {
                        // 给父Grid回填数据
                        // 通过gridBlockId来定位回填的Grid
                        each(checkRows, function (row) {
                            backFillGrid.setCellValue(row, fields[i], model[columns[i]])
                        });
                    }
                }
            } else {
                // 普通的EFPopupInput弹出Popup回填
                if (that.trigger(BACK_FILL + NS, {
                        grid: codeGrid,
                        model: model
                    })) {
                    // 自定义回填, 不使用默认的回填逻辑
                    windowManager.destroy();
                    return;
                }
                if (!!model) {
                    // 其他Input回填框数据注入
                    fields = backFillFieldIds.split(',');
                    columns = backFillColumnIds.split(',');
                    for (i = 0, length = columns.length; i < length; i++) {
                        $("#" + fields[i]).val(model[columns[i]]).blur();
                    }
                    // Input 自身数据注入
                    textElement.val(model[textField]).blur();
                    valueElement.val(model[valueField]).blur();
                }
            }
            windowManager.destroy();
        },

        /**
         * 自定义回填时，关闭窗口
         */
        closeWindow: function () {
            windowManager.destroy();
        },

        /**
         * 使用KendoWindow组件，定位弹出窗口的位置，和点击关闭事件等
         *
         * @private
         */
        _buildKendoWindow: function () {
            var that = this;
            return buildKendoWindow(that.options);
        },

        /**
         * 弹出前的逻辑组装，达到在input和column中复用的目的
         *
         *
         * @private
         */
        _preCreate: function () {
            var that = this,
                options = that.options,
                columnEnames = options.columnEnames,

                // 弹窗中混入自定义的div的id，通常是查询条件
                containerId = options.containerId,
                gridId,
                $container;

            that._buildContainer();

            options.queryInfo = arguments[0];
            gridId = that.options.gridId;
            $container = that.options.container;

            if (isAvailable(containerId)) {
                // 弹窗中混入自定义的div的id，通常是查询条件
                var $containerId = $("#" + containerId);
                $container.prepend($containerId);
                $containerId.css("display", "");
            }

            // 判断弹窗时，Window中的内容是否清除掉，重新渲染
            if ($container.data("new") || options.queryRefresh || options.refresh) {
                if (isAvailable(containerId)) {
                    // 清空除自定义内容之外的所有子元素
                    $container.children().each(function () {
                        var $element = $(this);
                        if ($element.attr("id") !== containerId) {
                            $element.remove();
                        }
                    });

                    // Region和Grid之间的分隔线
                    $container.append('<div class="i-region-divider"></div>');

                } else {
                    // 清空所有的子元素
                    $container.empty();
                }

                // 触发Grid查询前的事件
                if (that.trigger(INIT + NS, {container: $container})) {
                    return PREVENT_POPUP;
                }

                // 创建Grid的div
                var $grid = $("<div id='" + gridId + "' class='i-popup-grid'/>").appendTo($container);

                // 进行Grid的创建，初始化查询
                var popupGrid = that._buildGrid(options);

                // 处理弹出框宽度
                options.width = options.width ? options.width : columnEnames.length * 150;

                if ($.isPlainObject(popupGrid)) {
                    // options中无EiInfo信息 返回初始的Promise对象
                    var gridOptions = popupGrid.gridOptions;

                    popupGrid.eiPromise.then(function (eiJSON) {
                        var ajaxEi = EiInfo.parseJSONObject(eiJSON);
                        gridOptions.eiInfo = ajaxEi;
                        gridOptions.autoBind = false;

                        options.eiInfo = ajaxEi; // options赋值，应该只执行一次

                        var grid = IPLAT.Grid(gridOptions);
                        that._afterGridBuild(grid, $grid, $container);

                    }, function () {
                        NotificationUtil("获取表格[" + options.resultId + "]数据失败", "error");
                    });
                } else {
                    that._afterGridBuild(popupGrid, $grid, $container);
                }

                $container.data("new", false);
            } else {
                // div中的内容已经存在 不重新渲染
                if (that.trigger(INIT + NS, {container: $container})) {
                    return PREVENT_POPUP;
                }
            }
        },

        /**
         * Grid初始化完成后的回填逻辑和事件处理
         *
         * @param popupGrid
         * @param $grid
         * @param $container
         * @private
         */
        _afterGridBuild: function (popupGrid, $grid, $container) {
            var that = this,
                options = that.options;

            that.popupGrid = popupGrid;

            // 双击回填数据
            $grid.on("dblclick", "tr", function () {
                var $tr = $(this);
                $grid.find("tr").removeClass("i-state-selected k-state-selected");
                $tr.addClass("k-state-selected");

                that._backFillFields(popupGrid);

                windowManager.destroy();
            });


            var closeList = function () {
                return false;
            };

            //处理页面展示数后外面点击不能关闭此window的bug
            if (popupGrid.element) {
                popupGrid.element.find(".k-list-container").off("click", closeList).on("click", closeList);
            }

            // $(".k-list-container").off("click", closeList).on("click", closeList);

            if (options.save) {
                that._buildSaveButton($container)
            }

            that.trigger(LOAD_COMPLETE + NS, {grid: popupGrid});
        },

        buildPopupWindow: function () {
            var that = this,
                kendoWindow;

            if (that._preCreate() !== PREVENT_POPUP) {

                kendoWindow = that._buildKendoWindow();

                // kendoWindow.open();
                if (!options.center) {
                    kendoWindow.open();
                } else {
                    kendoWindow.open().center();
                }
            }
        }
    });

    var PopupInputWindow = AbstractPopupWindow.extend({
        buildPopupWindow: function () {
            var that = this,
                options = that.options || {},
                field = options.field,


                initFunction,  // 用作于页面初始化加载时候
                queryInfo,
                loadComplete,
                backFillFunction,
                kendoWindow;

            var customOptions = IPLATUI.EFPopupInput[field];

            if ($.isPlainObject(customOptions)) {
                // 页面初始化函数
                initFunction = customOptions[INIT];

                // 获取JS配置中的query, 初始查询函数
                queryInfo = customOptions[QUERY];

                // 弹窗内的Grid加载完成后的回调函数
                loadComplete = customOptions[LOAD_COMPLETE];

                // 回填回调函数
                backFillFunction = customOptions[BACK_FILL];
            } else {
                // FIXME EFPopupInput的copy场景？？ 而且是js中无EFPopupInput的逻辑
                if (options['copy'] === true) {
                    queryInfo = options[QUERY]; // 初始查询函数
                    backFillFunction = options[BACK_FILL]; // 回填回调函数
                    initFunction = options[INIT]; // 页面初始化函数
                }
            }

            if (queryInfo) {
                if ($.isPlainObject(customOptions) && IPLAT.isBoolean(customOptions.queryRefresh)) {
                    options.queryRefresh = customOptions.queryRefresh;
                } else if ($.isPlainObject(options.dynamic) && IPLAT.isBoolean(options.dynamic.queryRefresh)) {
                    options.queryRefresh = options.dynamic.queryRefresh;
                } else {
                    options.queryRefresh = true;
                }
            } else {
                options.queryRefresh = false;
            }


            // 最外层container构建时触发
            if (!IPLAT.Util.hasEvent(that, INIT + NS)) {
                that.bind(INIT + NS, initFunction);
            }

            // Grid渲染结束
            if (!IPLAT.Util.hasEvent(that, LOAD_COMPLETE + NS)) {
                that.bind(LOAD_COMPLETE + NS, loadComplete);
            }

            if (!IPLAT.Util.hasEvent(that, BACK_FILL + NS)) {
                that.bind(BACK_FILL + NS, backFillFunction);
            }


            // 根据init事件的结果 判断是否弹窗
            if (that._preCreate(queryInfo) !== PREVENT_POPUP) {
                that._buildKendoWindow();
                kendoWindow = options['container'].data('kendoWindow');
                if (!options.center) {
                    kendoWindow.open();
                } else {
                    kendoWindow.open().center();
                }
            }
        }
    });

    var AbstractTreeWindow = Widget.extend({
        init: function (options) {
            var that = this;
            that.options = options;
            that._events = {};
            that.textField = options.textField;
            that.valueField = options.valueField;
            that.textElement = options.textElement;
            that.valueElement = options.valueElement;
            that.title = options.title;
        },

        /**
         * 构造弹窗容器DOM结点div, 还没有使用KendoWindow进行实例化
         *
         * @private
         */
        _buildContainer: function () {
            var that = this,
                options = that.options,
                containerId = options.containerId;

            options.container = getContainer(containerId);
            return options.container;
        },

        _buildTree: function (options) {
            var treeId = options.treeId,
                treeWidth = options.treeWidth,
                treeHeight = options.treeHeight,
                checkedBackFill = options.checkedBackFill,
                $container = options.container;

            var $tree = $("<div id='" + treeId + "' />").appendTo($container);
            $tree.width(treeWidth);
            $tree.height(treeHeight);

            if (checkedBackFill) {  // checkbox回填
                options.checkboxes = {checkChildren: true};
            }
            IPLAT.TreeView(options);
            return $tree.data("kendoTreeView");
        },

        _afterTreeBuild: function (treeView) {
            var that = this,
                options = that.options,
                checkedBackFill = options.checkedBackFill;

            that.popupTree = treeView;

            if (checkedBackFill === true) {
                that._buildSaveButton(treeView);

            } else {
                treeView.bind("select", function (e) {
                    var data = this.dataItem(e.node);
                    if (that.trigger(BACK_FILL + NS, {
                            tree: treeView,
                            node: data
                        })) {
                        // 自定义回填, 不使用默认的回填逻辑
                        windowManager.destroy();
                        return;
                    }
                    if (options.copy === true) {
                        that._selectBackFill(data, "copy");
                    } else {
                        that._selectBackFill(data);
                    }

                    windowManager.type = 0;
                    windowManager.destroy();
                });
            }

            // 触发loadComplete事件
            that.trigger(LOAD_COMPLETE + NS, {tree: treeView});
        },

        /**
         * 构建确定按钮
         *
         * @param treeView
         * @returns {*}
         * @private
         */
        _buildSaveButton: function (treeView) {
            var that = this,
                $container = that.options.container,
                $saveBtnDiv;

            $saveBtnDiv = $("<div class='k-window-save k-popup-save'><button class='i-btn-lg i-btn-wide'>" +
                IPLAT.CONSTANTS.BACKFILL_BUTTON_NAME + "</button></div>").on("click", "button", function () {
                that._backFillFields(treeView);
            });
            return $container.append($saveBtnDiv);
        },

        _backFillFields: function (treeView) {
            var that = this,
                options = that.options,
                copy = options.copy,
                checkedNodes = treeView.getCheckedNodes(),
                selectedNode = treeView.dataItem(treeView.select());

            if (!!copy) {
                // 触发回填方法backFill
                if (that.trigger(BACK_FILL + NS, {
                        tree: treeView,
                        node: options.checkedBackFill ? checkedNodes : selectedNode,
                        copy: true
                    })) {
                    // 自定义回填, 不使用默认的回填逻辑
                    windowManager.destroy();
                    return;
                }

                if (options.checkedBackFill) {
                    if (checkedNodes.length > 0) {
                        that._checkedBackFill(checkedNodes, "copy");
                    }
                } else {
                    if (treeView.select().length > 0) {
                        that._selectBackFill(selectedNode, "copy");
                    }
                }

            } else {
                if (that.trigger(BACK_FILL + NS, {
                        tree: treeView,
                        node: options.checkedBackFill ? checkedNodes : selectedNode
                    })) {
                    windowManager.destroy();
                    return;
                }

                if (options.checkedBackFill) {
                    if (checkedNodes.length > 0) {
                        that._checkedBackFill(checkedNodes);
                    }
                } else {
                    if (treeView.select().length > 0) {
                        that._selectBackFill(selectedNode);
                    }
                }
            }

            windowManager.destroy();
        },

        /**
         * 通过checkboxes勾选回填
         *
         * @param checkedNodes
         * @private
         */
        _checkedBackFill: function (checkedNodes) {
            var that = this,
                options = that.options,
                field = options.field,
                popupType = options.popupType,
                textElement = options.textElement,
                backFillGrid = options.backFillGrid,
                popupTree = that.popupTree;

            if (options["onlyLeaf"]) {  // 过滤出勾选的叶子结点
                checkedNodes = _.filter(checkedNodes, function (node) {
                    return !node[options["hasChildren"]];
                });
            }

            if (checkedNodes.length > 0) {
                var checkedNodesText = _.pluck(checkedNodes, options["textField"]).toString();
                var checkedNodesValue = _.pluck(checkedNodes, options["valueField"]).toString();

                if (popupType === "TREE_INPUT") {
                    if (arguments[1] === "copy") {
                        each(backFillGrid.getCheckedRows(), function (row) {
                            backFillGrid.setCellValue(row, field, checkedNodesText);
                            row[field] = checkedNodesValue;
                        });
                    } else {
                        $("#" + options["popupId"]).val(checkedNodesText);
                        $("#" + options["cellId"]).val(checkedNodesValue);
                    }

                } else if (popupType === "TREE_COLUMN") {
                    textElement.data("text", checkedNodesText);
                    textElement.html(checkedNodesText);

                    var efGrid = textElement.closest("div.k-grid").data("kendoGrid");
                    var efModel = efGrid.dataItem(textElement.parent());

                    if (efModel[field] !== checkedNodesValue) {
                        textElement.addClass("k-dirty-cell").prepend("<span class='k-dirty'>");
                        efModel.dirty = true;
                    }
                    efModel[field] = checkedNodesValue;
                }
                popupTree.reload(options.root[options.valueField]);
            }
        },

        /**
         * 树结点选中回填
         * @param node
         * @private
         */
        _selectBackFill: function (node) {
            var that = this,
                options = that.options,
                field = options.field,
                popupType = options.popupType,
                textElement = options.textElement,
                backFillGrid = options.backFillGrid;

            var onlyLeaf = options.onlyLeaf,
                isLeaf = !node[options["hasChildren"]],
                selectedNodeText = node[options["textField"]],
                selectedNodeValue = node[options["valueField"]];

            if (popupType === "TREE_INPUT") {
                if ((onlyLeaf && isLeaf) || !onlyLeaf) {
                    if (arguments[1] === "copy") {
                        each(backFillGrid.getCheckedRows(), function (row) {
                            backFillGrid.setCellValue(row, field, selectedNodeText);
                            row[field] = selectedNodeValue;
                        });
                    } else {
                        $("#" + options["popupId"]).val(selectedNodeText);
                        $("#" + options["cellId"]).val(selectedNodeValue);
                    }
                }

            } else if (popupType === "TREE_COLUMN") {
                if ((onlyLeaf && isLeaf) || !onlyLeaf) {
                    textElement.data("text", selectedNodeText);
                    textElement.html(selectedNodeText);

                    var efGrid = textElement.closest("div.k-grid").data("kendoGrid");
                    var efModel = efGrid.dataItem(textElement.parent());

                    if (efModel[field] !== selectedNodeValue) {
                        textElement.addClass("k-dirty-cell").prepend("<span class='k-dirty'>");
                        efModel.dirty = true;
                    }
                    efModel[field] = selectedNodeValue;
                }
            }
        },

        /**
         * 自定义回填时，关闭窗口
         */
        closeWindow: function () {
            windowManager.destroy();
        },

        /**
         * 使用KendoWindow组件，定位弹出窗口的位置，和点击关闭事件等
         *
         * @private
         */
        _buildKendoWindow: function () {
            var that = this;
            return buildKendoWindow(that.options);
        },

        /**
         * 弹出前的逻辑组装，达到在input和column中复用的目的
         *
         *
         * @private
         */
        _preCreate: function () {
            var that = this,
                options = that.options,
                $container;
            that._buildContainer();
            $container = that.options.container;
            options.query = arguments[0];

            // 判断弹窗时，Window中的内容是否清除掉，重新渲染
            if ($container.data("new")) {
                // 触发init事件
                if (that.trigger(INIT + NS, {container: $container})) {
                    return PREVENT_POPUP;
                }

                var treeView = that._buildTree(options);
                that._afterTreeBuild(treeView, $container);

                $container.data("new", false);
            }
        }
    });

    var TreeInputWindow = AbstractTreeWindow.extend({
        buildPopupWindow: function () {
            var that = this,
                options = that.options || {},
                cellId = options.cellId,

                initFunction,  // 用作于页面初始化加载时候
                queryInfo,
                loadComplete,
                backFillFunction,
                kendoWindow;

            var customOptions = IPLATUI.EFTreeInput[cellId];

            if ($.isPlainObject(customOptions)) {
                // 页面初始化函数
                initFunction = customOptions[INIT];

                queryInfo = customOptions[QUERY];

                // 弹窗内的Grid加载完成后的回调函数
                loadComplete = customOptions[LOAD_COMPLETE];

                // 回填回调函数
                backFillFunction = customOptions[BACK_FILL];

                // options带上IPLATUI.EFTreeInput中配置
                extend(true, options, customOptions);
            } else {
                if (options['copy'] === true) {
                    queryInfo = options[QUERY]; // 初始查询函数
                    backFillFunction = options[BACK_FILL]; // 回填回调函数
                    initFunction = options[INIT]; // 页面初始化函数
                }
            }

            if (queryInfo) {
                if ($.isPlainObject(customOptions) && IPLAT.isBoolean(customOptions.queryRefresh)) {
                    options.queryRefresh = customOptions.queryRefresh;
                } else if ($.isPlainObject(options.dynamic) && IPLAT.isBoolean(options.dynamic.queryRefresh)) {
                    options.queryRefresh = options.dynamic.queryRefresh;
                } else {
                    options.queryRefresh = true;
                }
            } else {
                options.queryRefresh = false;
            }

            // 最外层container构建时触发
            if (!IPLAT.Util.hasEvent(that, INIT + NS)) {
                that.bind(INIT + NS, initFunction);
            }

            // Tree渲染结束
            if (!IPLAT.Util.hasEvent(that, LOAD_COMPLETE + NS)) {
                that.bind(LOAD_COMPLETE + NS, loadComplete);
            }

            if (!IPLAT.Util.hasEvent(that, BACK_FILL + NS)) {
                that.bind(BACK_FILL + NS, backFillFunction);
            }

            // 根据init事件的结果 判断是否弹窗
            if (that._preCreate(queryInfo) !== PREVENT_POPUP) {
                kendoWindow = that._buildKendoWindow();
                kendoWindow.open();
            }
        }
    });

    var TreeColumnWindow = AbstractTreeWindow.extend({
        _buildContainer: function () {
            var that = this,
                options = that.options,
                field = options.field,
                resultId = options.resultId,
                containerId = "ef_tree_column_" + field + "_" + resultId;

            that.options.container = getContainer(containerId);
            return that.options.container;
        },

        _backFillFields: function (treeView) {
            var that = this,
                options = that.options,
                checkedNodes = treeView.getCheckedNodes(),
                selectedNode = treeView.dataItem(treeView.select());

            if (that.trigger(BACK_FILL + NS, {
                    tree: treeView,
                    node: options.checkedBackFill ? checkedNodes : selectedNode
                })) {
                windowManager.destroy();
                return;
            }

            if (options.checkedBackFill) {
                if (checkedNodes.length > 0) {
                    that._checkedBackFill(checkedNodes);
                }
            } else {
                if (treeView.select().length > 0) {
                    that._selectBackFill(selectedNode);
                }
            }

            windowManager.destroy();
        },

        buildPopupWindow: function () {
            var that = this,
                options = that.options,
                gridBlockId = that.options.gridBlockId,
                ename = options.ename,
                cname = options.cname,
                copy = options.copy,
                readonly = options.readonly,
                attributes = options.dynamic,

                $container,
                kendoWindow,
                initFunction,
                backFillFunction;

            IPLAT.EFGrid[gridBlockId].columns.push({
                field: ename,
                title: cname,
                copy: copy,
                readonly: readonly,
                required: attributes.required || false,
                enable: !attributes.disabled,
                hidden: attributes.hidden || false,
                locked: attributes.locked || false,
                iplatSort: options.iplatSort || false,
                editType: "tree",
                // format: "",
                treeOptions: options,
                attributes: attributes,
                editor: function (container, params) {
                    var options = that.options,
                        grid = container.closest(".k-grid").data("kendoGrid"),
                        column = grid.columns[grid.cellIndex(container)],
                        queryInfo,
                        attributes = column.attributes || {};

                    var input = $('<span class="k-widget k-dropdown i-popup-input k-header">' +
                        '<span class="k-dropdown-wrap i-state-readonly">' +
                        '<input type="text" readonly="readonly" name="' + params.field + '" id="' + params.field +
                        '" class="popupColumn" ' +
                        'value="" ' + (attributes.required === true ? "required" : "") + ' >' +
                        '<span class="k-select">' +
                        '<span id="icon_' + params.field + '" class="i-icon i-popup-tree"></span></span></span></span>');

                    if (attributes.required === true) {
                        container.addClass("i-invalid-cell");
                    }
                    input.appendTo(container);

                    queryInfo = column["query"];

                    if (queryInfo) {
                        if (IPLAT.isBoolean(column.queryRefresh)) {
                            options.queryRefresh = column.queryRefresh;
                        } else if ($.isPlainObject(options.dynamic) && IPLAT.isBoolean(options.dynamic.queryRefresh)) {
                            options.queryRefresh = options.dynamic.queryRefresh;
                        } else {
                            options.queryRefresh = true;
                        }
                    } else {
                        options.queryRefresh = false;
                    }

                    initFunction = column[INIT];
                    backFillFunction = column[BACK_FILL];

                    if (!IPLAT.Util.hasEvent(that, INIT + NS)) {
                        that.bind(INIT + NS, initFunction);
                    }
                    if (!IPLAT.Util.hasEvent(that, BACK_FILL + NS)) {
                        that.bind(BACK_FILL + NS, backFillFunction);
                    }

                    that.options.textElement = container; // td
                    $container = that.options.container;

                    $("#icon_" + params.field).mousedown(function () {
                        if (that._preCreate(queryInfo) !== PREVENT_POPUP) {
                            kendoWindow = that._buildKendoWindow();
                            kendoWindow.open();
                        }
                    });
                }
            });
        }

    });


    var PopupColumnWindow = AbstractPopupWindow.extend({
        _buildContainer: function () {
            var that = this,
                resultId = that.resultId, // popupInput  dynamic grid
                field = that.field;

            // 要确保不同弹出字段的容器的唯一性
            var containerId = "ef_popup_column_" + field + "_" +
                resultId.replace(/\./g, '_');

            that.options.gridId = containerId.replace('ef_popup', 'ef_grid');

            that.options.container = getContainer(containerId);
            return that.options.container;
        },

        _backFillFields: function (codeGrid) {
            var that = this,
                backFillFieldIds = that.backFillFieldIds,
                backFillColumnIds = that.backFillColumnIds,
                textElement = that.options.textElement,
                valueElement = that.valueElement,
                textField = that.textField,
                valueField = that.valueField,
                // 处理select()接口再cell情况下获取不到model信息
                model = codeGrid.getSelectedRows()[0];
            // model = codeGrid.dataItem(codeGrid.select());  // TODO: select的隐患

            if (that.trigger(BACK_FILL + NS, {
                    grid: codeGrid,
                    model: model
                })) {
                // 自定义回填, 不使用默认的回填逻辑
                windowManager.destroy();
                return;
            }

            if (!!model) {
                // 其他Input回填框数据注入
                var fields = backFillFieldIds.split(',');
                var columns = backFillColumnIds.split(',');

                // 弹出Pop的Grid
                var efGrid = textElement.closest("div.k-grid").data("kendoGrid"); //.dataItem(textElement.parent())

                var rowIndex = textElement.parent().index();

                var efModel = efGrid.dataItem(textElement.parent());

                for (var i = 0, length = columns.length; i < length; i++) {
                    efGrid.setCellValue(rowIndex, fields[i], model[columns[i]]);
                }

                textElement.data("text", model[textField]);
                textElement.html(model[textField]); // Td.html

                // efGrid.setCellValue(rowIndex, that.options.ename, model[valueField]); 不能触发新的edit
                if (efModel[that.options.ename] !== model[valueField]) {
                    textElement.addClass("k-dirty-cell").prepend("<span class='k-dirty'>");
                    efModel.dirty = true;
                }
                efModel[that.options.ename] = model[valueField];
            }

            windowManager.destroy();
        },


        buildPopupWindow: function () {
            var that = this,
                gridBlockId = that.options.gridBlockId,
                ename = that.options.ename,
                cname = that.options.cname,
                copy = that.options.copy,
                $container,
                kendoWindow,
                initFunction,
                backFillFunction;

            IPLAT.EFGrid[gridBlockId].columns.push({// TODO: 丢失了EFColumn中的属性
                field: ename,
                title: cname,
                enable: true,
                readonly: that.options.readonly, // TODO: 丢失了EFColumn中的属性，Popup的列属性通过JS配置
                hidden: false,
                locked: false,
                copy: copy,
                iplatSort: that.options.iplatSort || false,
                editType: "popup",
                // format: "",
                // column中存储弹出框options信息
                popupOptions: that.options,
                // column中动态属性配置
                attributes: that.options.dynamic,
                editor: function (container, params) {
                    var options = that.options,
                        popupGrid;

                    var grid = container.closest(".k-grid").data("kendoGrid"),
                        column = grid.columns[grid.cellIndex(container)],
                        queryInfo,
                        attributes = column.attributes || {};
                    // 添加验证功能，TODO验证后的提示信息样式需调整
                    var input = $('<span class="k-widget k-dropdown i-popup-input k-header">' +
                        '<span class="k-dropdown-wrap">' +
                        '<input type="text" name="' + params.field + '" id="' + params.field + '" class="popupColumn" ' +
                        'value="" ' + (attributes.required === true ? "required" : "") + ' >' +
                        '<span class="k-select">' +
                        '<span id="icon_' + params.field + '" class="i-icon i-popup-grid"></span></span></span></span>');

                    if (attributes.required === true) {
                        container.addClass("i-invalid-cell");
                    }

                    input.appendTo(container);

                    queryInfo = column["query"];

                    if (isFunction(queryInfo)) {
                        queryInfo = $.proxy(queryInfo, grid, container, params);
                    }

                    // 判断存在query回调时，打开窗口是否进行查询刷新
                    if (queryInfo) {
                        if (IPLAT.isBoolean(column.queryRefresh)) {
                            options.queryRefresh = column.queryRefresh;
                        } else if ($.isPlainObject(options.dynamic) && IPLAT.isBoolean(options.dynamic.queryRefresh)) {
                            options.queryRefresh = options.dynamic.queryRefresh;
                        } else {
                            options.queryRefresh = true;
                        }
                    } else {
                        options.queryRefresh = false;
                    }

                    backFillFunction = column[BACK_FILL];

                    that.unbind(BACK_FILL + NS);
                    that.bind(BACK_FILL + NS, backFillFunction);

                    var rowIndex = container[0]['parentElement']['rowIndex'];


                    that.options.textElement = container; // td
                    $container = that.options.container;

                    $("#icon_" + params.field).mousedown(function () {
                        that._preCreate(queryInfo);
                        that._buildKendoWindow();

                        kendoWindow = options['container'].data('kendoWindow');

                        // 调用init初始化
                        initFunction = column['init'];

                        if (isFunction(initFunction)) {
                            initFunction.call(kendoWindow, that.options, column);
                        }

                        kendoWindow.open();
                    });
                }
            });
        }

    });

    /**
     * 弹出窗口，统一管理的工厂
     * @type {{getPopupWindow, registerPopupWindow}}
     */
    var PopupWindowFactory = (function () {
        var popupType = {
            POPUP_INPUT: PopupInputWindow,
            TREE_INPUT: TreeInputWindow,
            POPUP_COLUMN: PopupColumnWindow,
            TREE_COLUMN: TreeColumnWindow
        };

        return {
            getPopupWindow: function (type, options) {
                var popupWindow = popupType[type],
                    builder = new popupWindow(options);

                return builder.buildPopupWindow();
            },

            registerPopupWindow: function (type, builder) {
                if (builder instanceof AbstractPopupWindow) {
                    popupType[type] = builder;
                }
                return PopupWindowFactory;
            }
        }
    })();

    // 判断当前输入框是否为disabled的
    var isDisabled = function (textElement) {
        var $textElement = $(textElement),
            disabled = $textElement.prop("disabled");

        return disabled === true;
    };

    var popupContainerWindow = Widget.extend({
        init: function (options) {
            if (!isDisabled(options.textElement)) {
                var $container = getContainer(options.containerId),
                    that = this,
                    popupType = options.popupType;

                that.options = options;
                that._events = {};

                if (IPLAT.isUndefined(popupType)) {

                    var field = options.field,
                        customOptions = IPLATUI.EFPopupInput[field],
                        initFunction;


                    if ($.isPlainObject(customOptions)) {
                        initFunction = customOptions[INIT];
                    }

                    if (!IPLAT.Util.hasEvent(that, INIT + NS)) {
                        that.bind(INIT + NS, initFunction);
                    }

                    if (!that.trigger(INIT + NS, {container: $container})) {
                        if (!(options.center)) {
                            buildKendoWindow(extend({container: $container}, options)).open();
                        } else {
                            buildKendoWindow(extend({container: $container}, options)).open().center();
                        }
                    }
                } else {
                    buildCustomColumn.call(that, extend({container: $container}, options));
                }
            }
        }
    });

    var Popup = (function () {
        return {
            // 弹出div内容
            popupContainer: function (options) {
                new popupContainerWindow(options);
            },

            // Grid中弹窗TextArea编辑
            popupTextArea: function (options) {
                var title = options['title'] || '',
                    content = options['content'] || '',
                    pele = options['pele'],
                    textareaId = "textarea_" + new Date().getTime(),
                    callback = options['callback'],
                    $textarea,
                    textarea = '<div class="textarea" >' +
                        '<textarea class="k-textarea" cols="36" rows="6" style="resize: none; width: 245px;">' +
                        (content || '') + '</textarea>' +
                        '<div class="footer"><span class="i-btn-lg i-btn-wide backFill btn-align-right">' +
                        IPLAT.CONSTANTS.BACKFILL_BUTTON_NAME + '</span></div></div>';

                if (!pele) {
                    return;
                }

                this.popupContainer({
                    containerId: textareaId,
                    textElement: pele,
                    title: title,
                    height: 147,
                    width: 300,
                    resizable: true,
                    resize: function (e) {
                        // textareaResize(e);
                        textareaResizeThrottle(e);
                    }

                });

                var textareaResize = function (args) {
                    var textarea = args.sender.element.find("textarea");
                    var _height = args.height;
                    var _width = args.width;
                    textarea.css("height", _height - 50);
                    textarea.css("width", _width - 55);
                };

                var textareaResizeThrottle = kendo.throttle(textareaResize, 200);


                $textarea = $("#" + textareaId);

                $textarea.html(textarea);

                $textarea.on('click', '.backFill', function (e) {
                    var val = $(this).closest('.textarea').find('textarea').val() || '';
                    if ($.isFunction(callback)) {
                        callback.call($textarea, val);
                    }
                });
            },

            // EFPopupInput Grid中弹出表格
            popupGrid: function (options) {
                if (!isDisabled(options.textElement)) {
                    var popupType = options.popupType.toUpperCase();
                    popupType = "POPUP_" + popupType.split("_")[1];
                    PopupWindowFactory.getPopupWindow(popupType, options);
                }
            },

            // 弹出TreeView
            popupTree: function (options) {
                if (!isDisabled(options.textElement)) {
                    var popupType = options.popupType.toUpperCase();
                    PopupWindowFactory.getPopupWindow(popupType, options);
                }
            }
        }
    })();

    var ColumnCopy = (function () {
        return {
            _init: function (options) {
                // 获取点击父结点
                var pele = options['pele'];
                //  展示的html页面
                var html = options['html'] || '';
                // 页面加载完成后的回调方法
                var loaded = options['loaded'];
                // 生成弹窗ID
                var copyId = "copy_" + new Date().getTime();
                var $copy = getContainer(copyId);

                $copy.html(html);

                buildKendoWindow({
                    container: $copy,
                    textElement: pele,
                    title: "批量复制"
                });

                if ($.isFunction(loaded)) {
                    loaded.call($copy);
                }
            },
            input: function (grid, th, pele, options) {
                // 构建好
                var html = "<div><input type='text' class='k-textbox' />" +
                    "<span class='i-btn-lg-no-ripple copy'>复制</span></div>",
                    $th = $(th);

                this._init({
                    pele: pele,
                    html: html,
                    loaded: function () {
                        var $this = this, window = $this.data("kendoWindow");
                        $this.on("click", ".copy", function (e) {
                            var val = $this.find("input").val() || '';

                            if (isFunction(options.backFill)) {
                                options.backFill.call(grid, {
                                    value: val,
                                    window: window,
                                    copy: true
                                });
                                return;
                            }

                            var field = $th.data("field");
                            var rows = grid.getCheckedRows(); // EFGrid列的批量赋值功能
                            $.each(rows, function (index, item) {
                                grid.setCellValue(item, field, val);
                            });

                            window.close();
                        });
                    }
                });
            },
            date: function (grid, th, pele, options) {
                var dateId = "date_" + new Date().getTime();
                var html = "<div ><input type='text' id='" + dateId + "' />" +
                    "<span class='i-btn-lg-no-ripple copy'>复制</span></div>",
                    $th = $(th);

                this._init({
                    pele: pele,
                    html: html,
                    loaded: function () {
                        var $this = this, window = $this.data("kendoWindow");
                        options = $.extend({
                            dateId: dateId,
                            change: function (e) {
                                windowManager.innerClick();
                            }
                        }, options);
                        IPLAT.Date(options);
                        $this.on("click", ".copy", function (e) {
                            var val = $("#" + dateId).val() || '';

                            if (isFunction(options.backFill)) {
                                options.backFill.call(grid, {
                                    value: val,
                                    window: window,
                                    copy: true
                                });
                                return;
                            }

                            var field = $th.data("field");
                            var rows = grid.getCheckedRows(); // EFGrid列的批量赋值功能
                            $.each(rows, function (index, item) {
                                grid.setCellValue(item, field, val);
                            });
                            window.close();
                        });
                    }
                });
            },
            select: function (grid, th, pele, options) {
                var html = "<div ><input type='text' /><span class='i-btn-lg-no-ripple copy'>复制</span></div>",
                    $th = $(th);

                this._init({
                    pele: pele,
                    html: html,
                    loaded: function () {
                        var $this = this, window = $this.data("kendoWindow"), $input = $this.find("input");

                        // 防止弹出框被选中后直接消失
                        options = $.extend({
                            change: function (e) {
                                windowManager.innerClick();
                            }
                        }, options);

                        $input.kendoDropDownList(
                            options
                        );

                        //处理 copy 事件
                        $this.on("click", ".copy", function (e) {
                            var val = $this.find("input").val() || '';

                            if (isFunction(options.backFill)) {
                                options.backFill.call(grid, {
                                    value: val,
                                    window: window,
                                    copy: true
                                });
                                return;
                            }

                            var field = $th.data("field");
                            var rows = grid.getCheckedRows(); // EFGrid列的批量赋值功能
                            $.each(rows, function (index, item) {
                                grid.setCellValue(item, field, val);
                            });

                            window.close();
                        });
                    }
                });
            },
            multiSelect: function (grid, th, pele, options) {
                var html = "<div ><select></select><span class='i-btn-lg-no-ripple copy' style='vertical-align: top;top: 3px'>复制</span></div>",
                    $th = $(th);

                this._init({
                    pele: pele,
                    html: html,
                    loaded: function (e) {
                        var $this = this, window = $this.data("kendoWindow"), $select = $this.find("select");
                        options = $.extend({
                            change: function (e) {
                                windowManager.innerClick();
                            }
                        }, options);

                        $select.kendoMultiSelect(
                            options
                        );

                        $this.on("click", ".copy", function (e) {
                            var val = ($this.find("select").val() || []).join(',');

                            if (isFunction(options.backFill)) {
                                options.backFill.call(grid, {
                                    value: val,
                                    window: window,
                                    copy: true
                                });
                                return;
                            }

                            var field = $th.data("field");
                            var rows = grid.getCheckedRows(); // EFGrid列的批量赋值功能
                            $.each(rows, function (index, item) {
                                grid.setCellValue(item, field, val);
                            });

                            window.close();
                        });

                    }
                });
            }
        }
    })();

    $.extend(IPLAT, {
        Popup: Popup,
        ColumnCopy: ColumnCopy
    });

    $.extend(window, {
        Popup: Popup,
        ColumnCopy: ColumnCopy
    });

    // 清除指定输入框数据
    $.fn.clearInput = function () {
        var $this = $(this),
            action = $this.data("action"),
            forIds = $this.data("for");
        if (action === "clear") {
            if (isString(forIds)) {
                var forIdList = forIds.split(",");
                each(forIdList, function (id) {
                    $("#" + $.trim(id)).val("");
                });
            }
        }
    };

    // 绑定清除按钮
    $(window.document.body).on("click", ".k-i-close", function () {
        var $this = $(this),
            target = $this.data('target') || '',
            forIds = $this.data("for"),
            popupRole = $this.parent().prev("input").data("role"),
            targetPopupInput = {};
        if (popupRole === "popupInput") {
            targetPopupInput = IPLATUI.EFPopupInput[target] || {};
        }
        if (popupRole === "treeInput") {
            targetPopupInput = IPLATUI.EFTreeInput[target] || {};
        }

        if ($.isFunction(targetPopupInput['clearInput'])) {
            targetPopupInput['clearInput'].call($this, forIds)
        } else {
            $this.clearInput();
        }

    });

})(window.jQuery);
(function ($) {
    var EiInfo = IPLAT.EiInfo,
        ajaxEi = IPLAT.ajaxEi,
        selectDefaults,

        DataSource = kendo.data.DataSource,
        each = $.each,
        extend = $.extend;

    selectDefaults = extend({}, IPLATUI.Config.EFSelect);

    kendo.ui.DropDownList.fn.options.noDataTemplate = "没有数据";

    function _beforeInit(options) {
        var dataSource = new DataSource({
            serverFiltering: true,
            transport: {
                read: {
                    url: options.url + "/service/" + options.serviceName + "/" + options.methodName,
                    dataType: "json",
                    contentType: "application/json",
                    type: 'POST'
                },
                parameterMap: function (params, operations) {
                    var info = new EiInfo();
                    if (options.cascadeFrom) {
                        info = EiInfo.build($("#" + options.cascadeFrom).parent());
                    }
                    return info.toJSONString();
                }
            },
            schema: {
                data: function (response) {
                    ajaxEi = EiInfo.parseJSONObject(response);
                    return options.EFOptions.concat(ajaxEi.getBlock(options.resultId).getMappedRows());
                }
            }

        });
        return dataSource;

    }

    /**
     * EFSelect.Tag 对应的JS组件逻辑
     * @param options
     * @constructor
     */
    IPLAT.Select = function (options) {
        if (options.serviceName && options.methodName && options.resultId) { // 动态的下拉选项
            EiCommunicator.send(options.serviceName, options.methodName, new EiInfo(), {
                onSuccess: function (eiInfo) {
                    var rows = eiInfo.getBlock(options.resultId).getMappedRows();
                    _buildSelect(options, IPLAT.EFOptions.concat(rows));
                }, onFail: function (data) {
                    _buildSelect(options, IPLAT.EFOptions);
                }
            });
        } else { // 静态的下拉选项
            _buildSelect(options, IPLAT.EFOptions);
        }

        function _buildSelect(options, dataSource) {
            var defaults = {
                    dataTextField: "textField",
                    dataValueField: "valueField",
                    value: options.defaultValue
                },
                // 页面JS中的原生配置
                selectConfig = extend({}, IPLATUI.EFSelect[options.selectId]);

            // dataSource基本上就是IPLAT.EFOptions, 复制一份数据源，清空IPLAT.EFOptions
            dataSource = dataSource.concat(options.dataSource || []);

            delete options.dataSource;

            IPLAT.EFOptions = [];

            if (options.textField && options.valueField) {
                // EFSelect经常和EFCodeOption EFOptions 组合使用，把options.textField的列名映射成为固定的"textField"
                dataSource = $.map(dataSource, function (item) {
                    return {

                        // TODO:  item[options.textField] 0, null false
                        textField: item[options.textField] || item["textField"],
                        valueField: item[options.valueField] || item["valueField"]
                    };
                });
            }

            // 处理options中需要设置到 $("#" + options.selectId) 元素中的属性
            var $element = $("#" + options.selectId);
            $element.attr(IPLAT.Util.pickDOMAttributes(options));

            var selectInstance = $element.kendoDropDownList(
                extend({}, selectDefaults, options, defaults, selectConfig, {dataSource: dataSource})).data("kendoDropDownList");

            // 处理下拉框readonly情形
            if (options.readonly === true) {
                selectInstance.readonly();
                $element.prev("span.k-dropdown-wrap").removeClass("k-state-default").addClass("i-state-readonly");
            }

            return selectInstance;
        }
    };


    IPLAT.MultiSelect = function (options) {
        var dataSource = IPLAT.EFOptions.concat([]),
            defaults = {
                dataTextField: "textField",
                dataValueField: "valueField",
                value: options.defaultValue.split(","), // 多选项以","分隔
                autoClose: options.autoClose
            };
        IPLAT.EFOptions = [];

        // 页面JS中的原生配置
        var selectConfig = extend({}, IPLATUI.EFMultiSelect[options.selectId]);

        // 处理options中需要设置到 $("#" + options.selectId) 元素中的属性
        var $element = $("#" + options.selectId);
        $element.attr(IPLAT.Util.pickDOMAttributes(options));

        return $element.kendoMultiSelect(
            extend({}, selectDefaults, options, defaults, selectConfig, { dataSource: dataSource })).data("kendoMultiSelect");
    };


    IPLAT.CascadeSelect = function (options) {
        var textField = options.textField,
            valueField = options.valueField,
            dataSource = IPLAT.EFOptions.concat([]);
        IPLAT.EFOptions = [];

        // 页面JS中的原生配置
        var selectConfig = extend({}, IPLATUI.EFCascadeSelect[options.selectId]);
        each(dataSource, function (index, option) {
            option[textField] = option["textField"];
            option[valueField] = option["valueField"];
            delete option.textField;
            delete option.valueField;
        });

        options.EFOptions = dataSource;   // 将自定义EFOption放入options

    var defaults = {
        // optionLabel: "请选择",
        dataTextField: textField, // todo 和EFSelect不统一
        dataValueField: valueField,
        dataSource: _beforeInit(options)
    };

     // 页面JS中的原生配置
     selectConfig = extend({}, IPLATUI.EFCascadeSelect[options.selectId]);

    // 处理options中需要设置到 $("#" + options.selectId) 元素中的属性
    var $element = $("#" + options.selectId);
    $element.attr(IPLAT.Util.pickDOMAttributes(options));

    return $element.kendoDropDownList(
        extend({}, selectDefaults, options, defaults, selectConfig)).data("kendoDropDownList");
};

})(jQuery);

;(function ($) {
    var IPLAT = window.IPLAT || {};

    // 兼容原生的kendoTreeView options即kendoTreeView 配置的options参数,options即是kendo原生的配置参数
    var EFTree = function ($ele, dataSource) {
        $ele.kendoTreeView({
            dataSource: dataSource
        });
        return $ele.data("kendoTreeView");
    };

    var trees = [];
    // 挂载到IPLAT上 树已经被封装
    IPLAT.TreeViews = function (options) {
        // 可以设置一些初始化属性进行处理
        var $ele1 = $("#" + options.leftId);
        var $ele2 = $("#" + options.rightId);
        var tree1 = new EFTree($ele1, options.leftDataSource);
        var tree2 = new EFTree($ele2, options.rightDataSource);
        var nodePath;
        var accessAll = options.accessAll;

        trees.push(tree1, tree2);

        $(document).on("dblclick", "#" + options.leftId + " span.k-in", function () {
            if (accessAll === false) { // 仅移动当前结点及其子结点
                nodePath = _getPath(tree1, this);
                nodeSwap(tree2, nodePath);
            } else { // 移动当前结点&&与各子结点id相同的结点
                _.each(map2FlatX([tree1.dataItem(this)]), function (node) {
                    nodeMove(tree1, tree2, node.id);
                });
            }
        });

        $(document).on("dblclick", "#" + options.rightId + " span.k-in", function () {
            if (accessAll === false) {
                nodePath = _getPath(tree2, this);
                nodeSwap(tree1, nodePath);
            } else {
                _.each(map2FlatX([tree2.dataItem(this)]), function (node) {
                    nodeMove(tree2, tree1, node.id);
                });
            }
        });

        // 左右按键
        $("#btnR").on("click", function () {
            if (tree1.select().length > 0) {
                if (accessAll === false) {
                    nodePath = _getPath(tree1, tree1.select());
                    nodeSwap(tree2, nodePath);
                } else {
                    _.each(map2FlatX([tree1.dataItem(tree1.select())]), function(node){
                        nodeMove(tree1, tree2, node.id);
                    });
                }
            } else {
                IPLAT.alert({
                    message: '<h4>请先选择一个结点！</h4>',
                    okFn: function (e) {},
                    title: '提示'
                });
            }
        });
        $("#btnL").on("click", function () {
            if (tree2.select().length > 0) {
                if (accessAll === false) {
                    nodePath = _getPath(tree2, tree2.select());
                    nodeSwap(tree1, nodePath);
                } else {
                    _.each(map2FlatX([tree2.dataItem(tree2.select())]), function(node){
                        nodeMove(tree2, tree1, node.id);
                    });
                }
            } else {
                IPLAT.alert({
                    message: '<h4>请先选择一个结点！</h4>',
                    okFn: function (e) {},
                    title: '提示'
                });
            }
        });
    };

    // 挂载到IPLAT上,开发人员可以拿到这个树list
    IPLAT.Trees = trees;

})(jQuery);

function nodeSwap(treeview, path) {
    $.each(path, function (i, item) {
        var itemById = treeview.dataSource.get(item.id);
        if (itemById && treeview.parent(treeview.findByUid(itemById.uid)).length === 0) {
            var traversal = function (nodes) {
                for (var i = 0; i < nodes.items.length; i++) {
                    var childs = nodes.items[i];
                    if (!treeview.dataSource.get(childs.id)) {
                        $.each(treeview.findByUid(treeview.dataSource.get(nodes.id).uid), function (j, node) {
                            treeview.append({id: childs.id, text: childs.text}, $(node));
                        });
                    }
                    if (childs.items) {
                        traversal(childs);
                    }
                }
            };
            traversal(item);
        } else {
            treeview.append([item]);
        }
    });
    treeview.select($());
}

// 获取结点路径
function _getPath(treeview, node) {
    var removeNode = treeview.dataItem(node);
    var appendNodes = [];
    $.each(treeview.findByUid(treeview.dataSource.get(removeNode.id).uid), function (i, item) {
        var parentNode = treeview.parent($(item));
        appendNodes[i] = {id: treeview.dataItem($(item)).id, text: treeview.dataItem($(item)).text, items: treeview.dataItem($(item)).items || []};
        while (parentNode.length != 0) {
            appendNodes[i] = {id: treeview.dataItem(parentNode).id, text: treeview.dataItem(parentNode).text, items: [appendNodes[i]]};
            if (treeview.parent(parentNode).length === 0) {
                break;
            }
            parentNode = treeview.parent(parentNode);
        }
        treeview.remove($(item));
        if (parentNode.length > 0 && treeview.dataItem(parentNode).items.length === 0) {
            treeview.remove(parentNode);
        }
    });

    return appendNodes;
}

// 通过uid获取结点路径
function _getPathByUid(treeview, uid) {
    var appendNodes = [];
        var item = treeview.findByUid(uid);
        var parentNode = treeview.parent($(item));
        appendNodes.push({id: treeview.dataItem($(item)).id, text: treeview.dataItem($(item)).text, items: treeview.dataItem($(item)).items || []});
        while (parentNode.length != 0) {
            appendNodes.push({id: treeview.dataItem(parentNode).id, text: treeview.dataItem(parentNode).text, items: [appendNodes.pop()]});
            if (treeview.parent(parentNode).length === 0) {
                break;
            }
            parentNode = treeview.parent(parentNode);
        }
        treeview.remove($(item));
        if (parentNode.length > 0 && (treeview.dataItem(parentNode).children._data.length === 0)) {
            treeview.remove(parentNode);
        }

    return appendNodes;
}

function map2FlatX(data, itemsName) {
    // var map = data.toJSON(),
    var map = data,
        ITEMS_NAME = itemsName || 'items';
    var list = [];
    var _map2Array = function (arrayList) {
        $.each(arrayList, function (i, array) {
            if (array[ITEMS_NAME] && array[ITEMS_NAME].length > 0) {
                _map2Array(array[ITEMS_NAME]);
            }
            list.push(array);
            // delete array[ITEMS_NAME];
        })
    };
    _map2Array(map);
    return list;
}

// 移动结点
function nodeMove(tree1, tree2, nodeId){
    // var nodeId = tree1.dataItem(this).id,   // "treeEname_nodeEname"
    var nodeEname = nodeId.split("_")[1];   // nodeEname值
    var dsFlat = map2FlatX(tree1.dataSource.data());
    _.each(dsFlat, function (item) {
        if (item.id.split("_")[1] == nodeEname) {   // nodeEname值相同
            var nodePath = _getPathByUid(tree1, item.uid);
            nodeSwap(tree2, nodePath);
        }
    });
}




;(function ($) {
    var IPLAT = window.IPLAT || {};
    var extend = $.extend;
    var DEFAULT_INTERVAL_HEIGHT = 160;

    // 初始化tab
    function initTab(option) {
        var tab = $("#" + option.tabId);
        var tabContent = tab.children();
        var data = [];
        var options = extend({}, {tabPosition: option.tabPosition,scrollable: {distance: 200}}, IPLATUI.EFTab[option.tabId]);
        for (var i = 0; i < tabContent.length; i++) {
            data[i] = {
                title: tabContent.eq(i).attr("title"),
                contentUrl: tabContent.eq(i).attr("data-src")
            }
        }
        if ("src" != option.content) {
            var holder = "<li></li>";
            var title = "<ul>";
            for (var j = 0; j < tabContent.length; j++) {
                title += "<li>" + data[j].title + "</li>";
            }
            title = title + holder + "</ul>";
            tab.prepend(title);
            tab.kendoTabStrip(options).data("kendoTabStrip");
        } else {
            tab.html("");
            data[data.length] = {title: "", contentUrl: ""};
            options = extend({
                dataTextField: "title",
                dataContentUrlField: "contentUrl"
            }, options, {dataSource: data});
            tab.kendoTabStrip(options).data("kendoTabStrip");
        }
    }

    // 动态加载
    function sload(tabId) {
        var tabDiv = $("#" + tabId),
            tabReload = tabDiv.find("ul>li>span:nth-child(1)"),
            tabstrip = tabDiv.data("kendoTabStrip");
        tabReload.on("click", function () {
            var onShow = $.inArray(tabDiv.find("ul>li.k-state-active>span.k-link")[0], tabReload);
            var index = $.inArray(this, tabReload);
            if (onShow != index) {
                tabstrip.reload(tabstrip.tabGroup.children().eq(index));
            }
        })
    }

    // 添加按钮remove tabstrip items
    function deleteTab(tabId) {
        var tabsElements = $('#' + tabId + '>ul>li[role="tab"]'),
            tabAddDeleteButton = $("#" + tabId).data("kendoTabStrip");
        tabsElements.append('<span data-type="remove" class="k-link"><span class="k-icon k-i-close"></span></span>');
        tabAddDeleteButton.tabGroup.on("click", "[data-type='remove']", function (e) {
            e.preventDefault();
            e.stopPropagation();
            var item = $(e.target).closest(".k-item");
            tabAddDeleteButton.remove(item.index());
            if (tabAddDeleteButton.items().length > 0 && item.hasClass('k-state-active')) {
                tabAddDeleteButton.select(0);
            }
        });
    }

    //去除占位
    function removeHolder(ID) {
        var tabStrip = $('#' + ID).data("kendoTabStrip");
        var tabLi = $('#' + ID + '>ul>li[role="tab"]');
        tabStrip.remove(tabLi.length - 1);
    }

    IPLAT.Tab = function (options) {
        initTab(options);
        var active = options.active || 0;
        if ("true" == options.state) {
            sload(options.tabId)
        }
        if ("true" == options.showClose) {
            deleteTab(options.tabId);
            removeHolder(options.tabId);
        } else {
            removeHolder(options.tabId);
        }
        $("#" + options.tabId).data("kendoTabStrip").select(active);
    };

    // 延迟加载Tab，主要是针对iframe
    IPLAT.lazyTab = function(options) {
        var tabSelector = options.tabId,
            active = options.active || 0,
            customOptions = IPLATUI.EFTab[tabSelector],
            selectFunction;
        if (!IPLAT.isUndefined(customOptions)) {
            selectFunction = customOptions["select"];
        }
        var tabStrip = $("#" + tabSelector).kendoTabStrip({
            select: function (e) {
                if (!IPLAT.isUndefined(selectFunction)) {
                    selectFunction(e);
                }
                var contentElement = e.contentElement;
                var src = $(contentElement).data('src');
                if (!!src) {
                    var $iframe = $('<iframe>');
                    $(contentElement).removeData('src');
                    $(contentElement).removeAttr('data-src');
                    $iframe.appendTo($(contentElement));
                    $iframe.attr('width', '100%');
                    $iframe.attr('height', $(window).height() - DEFAULT_INTERVAL_HEIGHT);
                    $iframe.attr('frameborder', '0');
                    $iframe.attr('src', src);
                }
            }
        }).data("kendoTabStrip");
        setTimeout(function() {
            tabStrip.select(active);
        }, 0);

        if ("true" == options.showClose) {
            deleteTab(options.tabId);
        }

    };

    /**
     * 根据tab标签索引隐藏某个tab，TabStrip此索引仍然被占用（区别于remove方法）
     * @param tabIndex tab标签的索引
     */
    kendo.ui.TabStrip.fn.hide = function (tabIndex) {
        var that = this,
            tab = that.tabGroup.children().eq(tabIndex);

        if (IPLAT.isNumber(tabIndex) && tabIndex < tab.prevObject.length && tab.css("display") !== "none") {
            tab.hide();
        }
    };

    /**
     * 根据tab标签索引显示某个被隐藏的tab
     * @param tabIndex tab标签的索引
     */
    kendo.ui.TabStrip.fn.show = function (tabIndex) {
        var that = this,
            tab = that.tabGroup.children().eq(tabIndex);

        if (IPLAT.isNumber(tabIndex) && tabIndex < tab.prevObject.length && tab.css("display") === "none") {
            tab.show();
        }
    };

    /**
     * 获取/修改某个tab的标题
     * @param tabIndex tab标签的索引
     */
    kendo.ui.TabStrip.fn.title = function (tabIndex) {
        var that = this,
            tab = that.tabGroup.children().eq(tabIndex);

        if (IPLAT.isNumber(tabIndex) && tabIndex < tab.prevObject.length) {
            if (arguments.length === 1) {
                return tab.text();
            }
            if (arguments.length === 2) {
                tab.find(".k-link:first").text(arguments[1]);
            }
        }
    };

})(jQuery);

;(function ($) {
    var HierarchicalDataSource = kendo.data.HierarchicalDataSource,
        isFunction = $.isFunction,
        isArray = $.isArray,
        each = $.each,
        extend = $.extend,
        isString = _.isString,

        EiInfo = IPLAT.EiInfo,
        EiCommunicator = IPLAT.EiCommunicator,
        NotificationUtil = IPLAT.NotificationUtil,
        Notification = IPLAT.Notification,

        showVirtualRoot = true,
        ON_SUCCESS = "onSuccess",
        ON_FAIL = "onFail",
        CLICK = "click",
        NS = ".IPLAT",
        PID = IPLATUI.Config.EFTree.PID, // "inqu_status-0-node",
        EXPAND_LEVEL = IPLATUI.Config.EFTree.EXPAND_LEVEL, // "inqu_status-0-expandLevel",
        __ROOT__ = IPLATUI.Config.EFTree.ROOT_ID, // "$" 默认表示根结点的id

        VIRTUAL_ROOT = "root", // 虚拟的根结点配置项
        LOAD_COMPLETE = "loadComplete"; // 定义树加载完成后事件

    /**
     * flatData --> hierarchical map
     * 把flatData数组转换为map结构的对象 [id:,pid] ==> {id:,children:[{id:, children:[]}]}
     * @param {Array} data id,pid格式的数组数据
     * @param idField 结点的字段名
     * @param parentId 父结点的字段名
     * @param rootLevel 指定结点Id，用户获取该结点下的items
     * @return {*}
     */
    function flat2Map(data, idField, parentId, rootLevel) {
        var map = {};

        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var id = item[idField];
            var pid = item[parentId];

            map[id] = map[id] || [];
            map[pid] = map[pid] || [];

            item.items = map[id]; // schema model中的children: "items"
            map[pid].push(item);
        }

        return map[rootLevel];
    }


    /**
     * 把EiBlock中的原始数据，转换成kendoTree需要的数据格式
     * @param options 树的配置项
     * @param data EiBlock中的mappedRows JSON数据
     */
    var transformTreeData = function (options, data) {
        var idField = options['valueField'],
            textField = options['dataTextField'] || idField,
            hasChildren = options['hasChildren'];

        return _.map(data, function (item) {
            item['id'] = item[idField];
            item['text'] = item[textField] || "";

            if (!_.isBoolean(item[hasChildren])) {
                item[hasChildren] = !(parseInt(item[hasChildren]) === 1);
            }

            return item;
        });
    };


    /**
     * 一次性加载全部的树结点，数据请求的函数
     *
     * @param widget 封装的EFTree组件对象
     * @param rootId 初始查询的根结点
     * @param callback 回调处理
     * @return {*}
     * @constructor
     */
    var TreeCommunicator = function (widget, rootId, callback) {
        var postEiInfo = new EiInfo(),
            options = widget.options,
            serviceName = options.serviceName,
            methodName = options.methodName;

        postEiInfo.set(PID, rootId);

        return EiCommunicator.send(serviceName, methodName, postEiInfo, {
            onSuccess: function (ajaxEi) {
                try {
                    var allNodes = ajaxEi.getBlock(rootId).getMappedRows();

                    if (isFunction(callback)) {
                        callback.call(null, transformTreeData(options, allNodes));
                    }
                }
                catch (e) {
                    widget.trigger(ON_FAIL + NS, {errorMsg: "缺少数据块[" + rootId + "]", xhr: null});
                }


            }, onFail: function (error) {
                widget.trigger(ON_FAIL + NS, {errorMsg: error, xhr: null});
            }
        });
    };

    /**
     * 根据父结点的id, 从Map结构中查找其子结点数组
     *
     * @param data
     * @param nodeId
     * @param valueField
     * @return {null}
     */
    var getChildren = function (data, nodeId, valueField) {
        if (!nodeId) {
            return null;
        } else {
            for (var i = 0; i < data.length; i++) {
                if (data[i][valueField] == nodeId) {
                    return data[i].items;
                } else if (data[i].items) {
                    // 递归查找
                    var result = getChildren(data[i].items, nodeId, valueField);

                    if (result) {
                        return result;
                    }
                }
            }
        }
    };

    /**
     * 使用kendo.ui.Widget,
     * 探索抽象  应对应用的功能扩展定制需求
     */
    var Widget = kendo.ui.Widget,
        EFTree;

    EFTree = Widget.extend({
        init: function (element, options) {
            var that = this,
                virtualRoot,
                proxyVirtualRoot = {},

                // JS中配置的options
                treeOptions = IPLATUI.EFTree[options.treeId];

            that._events = {};

            // 兼容ROOT的配置，但应该将ROOT属性改为root
            // Tag中配置的options
            if (options && options[VIRTUAL_ROOT.toUpperCase()]) {
                options[VIRTUAL_ROOT] = options[VIRTUAL_ROOT.toUpperCase()];
                delete options[VIRTUAL_ROOT.toUpperCase()];
            }

            // js中配置的options
            if (treeOptions && treeOptions[VIRTUAL_ROOT.toUpperCase()]) {
                treeOptions[VIRTUAL_ROOT] = treeOptions[VIRTUAL_ROOT.toUpperCase()];
                delete treeOptions[VIRTUAL_ROOT.toUpperCase()];
            }

            that.element = element;

            // options是来自Tag中的属性
            var initOptions = that.options = extend({}, options, treeOptions);

            var valueField = initOptions['valueField'];
            var textField = initOptions['textField'];

            var hasChildren = initOptions['hasChildren'];

            // 手动设置根结点
            virtualRoot = that.options[VIRTUAL_ROOT];

            // 显示手动设置的虚拟根结点
            showVirtualRoot = true;

            // root属性没有配置，默认使用__ROOT__（$, root）作为根结点Id查询
            if (_.isEmpty(virtualRoot)) {
                proxyVirtualRoot[valueField] = __ROOT__;
                virtualRoot = proxyVirtualRoot;
                showVirtualRoot = false;
            } else if (isString(virtualRoot)) {
                // root属性配置了非空的字符串
                var rootArray = virtualRoot.split(":");

                if (rootArray.length === 2) {
                    // 简洁配置 根结点Id和显示值的字符串 "id:textField"
                    // 显示根结点
                    proxyVirtualRoot[valueField] = rootArray[0].trim();
                    proxyVirtualRoot[textField] = rootArray[1].trim();
                    virtualRoot = proxyVirtualRoot;

                } else {
                    // 指定初始查询的根结点的Id，区别于__ROOT__, 但仍不显示虚拟的根结点
                    proxyVirtualRoot[valueField] = virtualRoot;
                    virtualRoot = proxyVirtualRoot;
                    showVirtualRoot = false;
                }

            } else if (!_.isObject(virtualRoot)) {
                // root属性没有配置成合理的{} 按照未配置处理
                proxyVirtualRoot[valueField] = __ROOT__;
                virtualRoot = proxyVirtualRoot;
                showVirtualRoot = false;
            }

            that.showVirtualRoot = showVirtualRoot;

            // virtualRoot已经是个JSON Object
            virtualRoot['id'] = virtualRoot[valueField];
            that.virtualRoot = virtualRoot;

            if (!IPLAT.isBoolean(that.virtualRoot[hasChildren])) {
                that.virtualRoot[hasChildren] = true;
            }

            that._init();

            var timer = null;

            element.on("click", ".k-in", function (e) {
                // fixed 阻止事件冒泡，防止主从表中事件都触发
                IPLAT.Util.stopPropagation();

                timer && clearTimeout(timer);

                // 双击 兼容 Gecko 的浏览器
                if (e.detail === 2)
                    return;

                if (isFunction(initOptions[CLICK])) {
                    timer = setTimeout(function () {
                        var node = $(e.target).closest("li"),
                            treeView = element.data("kendoTreeView"),
                            model = treeView.dataItem(node);

                        initOptions[CLICK].call(that, model, node[0]);

                    }, IPLATUI.Config.Timer.dblclick);
                }
            });
        },

        _init: function () {
            var that = this,
                loadOnDemand,
                options = that.options;

            // 绑定成功和失败事件
            that.bind(ON_FAIL + NS, options[ON_FAIL]);
            that.bind(ON_SUCCESS + NS, options[ON_SUCCESS]);

            // 在JS中配置了dataSource
            var originalDataSource = options.dataSource;

            if (!originalDataSource) {
                loadOnDemand = !(options.once || false);

                if (loadOnDemand) {
                    // 分层按需加载树结点
                    that._loadOnDemand();

                } else {
                    // 一次加载所有的结点
                    that._loadStatic();
                }
            }
            // FIXME 存在DataSource的Tree
        },

        // FIXME 查询出所有的节点并渲染所有节点，效率非常低
        _loadStatic: function () {
            var that = this,
                valueField, // id
                parentId,
                rootId,
                kendoTreeInstance,
                virtualRoot = that.virtualRoot,
                options = that.options;

            valueField = options['valueField'];
            parentId = options['pid'];
            rootId = virtualRoot[valueField];

            if (!options['dataTextField']) {
                options['dataTextField'] = options['textField'];
            }

            TreeCommunicator(that, rootId, function (data) {
                var allNodes = flat2Map(data, valueField, parentId, rootId);
                var dataSource = [];

                if (!!virtualRoot[options['textField']]) {
                    // showVirtualRoot显示手动设置的虚拟结点
                    virtualRoot['items'] = allNodes;
                    virtualRoot['id'] = virtualRoot[valueField];
                    dataSource = [virtualRoot];
                } else {
                    dataSource = allNodes;
                }

                // dataSource是静态的数组， schema自动生成 id, text, items
                options.dataSource = {data: dataSource};
                options.loadOnDemand = false;

                kendoTreeInstance = that.element.kendoTreeView(options).data("kendoTreeView");

                if (isFunction(options[LOAD_COMPLETE])) {
                    options[LOAD_COMPLETE].call(kendoTreeInstance, options);
                }
            });
        },

        _loadOnDemand: function () {
            var that = this,
                options = that.options,
                expandLevel = options.expandLevel,
                valueField = options['valueField'],
                virtualRoot = that.virtualRoot;

            var rootId = virtualRoot[valueField];


            var postEiInfo = new EiInfo(),
                serviceName = options.serviceName,
                methodName = options.methodName;

            postEiInfo.set(PID, rootId);
            postEiInfo.set(EXPAND_LEVEL, options.expandLevel);

            if (IPLAT.isNumber(expandLevel) && expandLevel > 0) {
                // 混合加载，先加载前几层的节点，查询出的节点，不会全部渲染，效率较高
                EiCommunicator.send(serviceName, methodName, postEiInfo, {
                    onSuccess: function (ajaxEi) {
                        try {
                            var allNodes = ajaxEi.getBlock(rootId).getMappedRows();
                            that._loadMixed(allNodes);

                        }
                        catch (e) {
                            that.trigger(ON_FAIL + NS, {errorMsg: "缺少数据块[" + rootId + "]", xhr: null});
                        }


                    }, onFail: function (error) {
                        that.trigger(ON_FAIL + NS, {errorMsg: error, xhr: null});
                    }
                });

            } else {
                that._loadMixed();
            }
        },

        // 混合加载的实现
        _loadMixed: function (nodes) {
            var that = this,
                options = that.options,
                ajaxEi,
                parentId,
                valueField = options['valueField'],
                virtualRoot = that.virtualRoot,
                resultBlock,
                kendoTreeInstance,
                topNodes = arguments[0] || [];

            var rootId = virtualRoot[valueField];

            var parentIdField = options.pid;

            // Tag中设置了有效的pid，混合加载
            if (isAvailable(parentIdField)) {
                virtualRoot["items"] = flat2Map(topNodes, valueField, parentIdField, rootId);
            }

            dataSource = new HierarchicalDataSource({
                transport: {
                    read: function (params) {
                        var pid = params.data[valueField];

                        var data = getChildren([virtualRoot], pid, valueField);

                        if (isArray(data) && data.length > 0) {
                            params.success(data);
                        } else {
                            var postData = this.parameterMap(params, "read");
                            $.ajax({
                                url: options.url + "/service/" + options.serviceName + "/" + options.methodName,
                                dataType: "json",
                                contentType: "application/json",
                                type: 'POST',
                                data: postData,
                                success: function (result) {
                                    params.success(result);
                                },
                                error: function (result) {
                                    params.error(result);
                                }
                            });
                        }
                    },
                    parameterMap: function (params, operation) {
                        var postEiInfo = new EiInfo();

                        // virtualRoot["id"] 查询条件 子结点的parentId
                        parentId = params[valueField] || virtualRoot[valueField];

                        if (operation === "read") {
                            that.parentId = parentId;
                            postEiInfo.set(PID, parentId);

                            // 查询前的回调函数，可以自定义传入除了Id以外的条件
                            if (isFunction(options["query"])) {
                                var model = that.options.dataSource.get(parentId);
                                options["query"].call(that, postEiInfo, model);
                            }
                        }

                        return postEiInfo.toJSONString();
                    }
                },

                schema: {
                    model: {
                        id: options.valueField,
                        hasChildren: options.hasChildren
                    },

                    // response的数据处理顺序: requestEnd--> parse--> errors--> total--> data
                    data: function (response) {
                        var hasChildren = options["hasChildren"];

                        if (isArray(response)) {
                            return response;
                        } else {
                            parentId = that.parentId;

                            try {
                                ajaxEi = EiInfo.parseJSONObject(response);

                                // 返回的数据必须包含 blockId = 父结点的Id 的EiBlock
                                var treeNodes = ajaxEi.getBlock(parentId).getMappedRows();

                                each(treeNodes, function (index, treeNode) {
                                    // TODO
                                    if (!_.isBoolean(treeNode[hasChildren])) {
                                        treeNode[hasChildren] = !(parseInt(treeNode[hasChildren]) === 1);
                                    }
                                });
                            } catch (e) {
                                that.trigger(ON_FAIL + NS, {errorMsg: "缺少数据块[" + parentId + "]", xhr: null});
                            }

                            return treeNodes;
                        }
                    }
                },

                error: function (e) {
                    // 两种错误: 1.数据请求异常（ajax e.xhr）
                    //          2.业务异常(e.errors)
                    var errors;

                    if (!e.errors) {
                        // 格式化平台的异常信息 获得msgObj
                        errors = IPLAT.Util.formatErrorMessage((e.xhr && e.xhr.responseText) || "");
                        e.errors = errors;
                    }

                    if (!that.trigger(ON_FAIL + NS, {errorMsg: e.errors, xhr: e.xhr})) {
                        NotificationUtil(errors, Notification.ERROR);
                    }
                },

                requestEnd: function (e) {
                    // e => sender(DataSource) response(JSON) type("read", "create" ...)

                    var blockId = that.parentId,
                        response = e.response;

                    // response的格式有两种：
                    // 1. 按需加载，每次请求返回的EiInfo JSON；
                    // 2. 一次加载多层数据，通过dataSource.success，加载已有的 Array；

                    ajaxEi = null;

                    // 解析EiInfo JSON
                    if (!isArray(response)) {
                        try {
                            ajaxEi = EiInfo.parseJSONObject(response);
                            resultBlock = ajaxEi.getBlock(blockId);
                            var status = ajaxEi.getStatus();


                            if (status === 0) {
                                if (!that.trigger(ON_SUCCESS + NS, {eiInfo: ajaxEi})) {
                                    // NotificationUtil(msgHtml, Notification.SUCCESS);
                                }
                            } else if (status > 0) {
                                // 修改，删除的场景返回的status > 0
                                if (!that.trigger(ON_SUCCESS + NS, {eiInfo: ajaxEi})) {
                                    // NotificationUtil(msgHtml, Notification.WARNING);
                                }
                            } else {
                                // 注意：trigger error 将导致操作复原
                                that.trigger("error", e);
                            }
                        } catch (error) {
                            // 数据提交失败，会自动触发error事件
                        }
                    } // endif
                }
            });


            extend(options, {autoBind: !showVirtualRoot, dataSource: dataSource});

            if (!options['dataTextField']) {
                options['dataTextField'] = options['textField'];
            }

            kendoTreeInstance = that.element.kendoTreeView(options).data("kendoTreeView");

            if (showVirtualRoot) {
                kendoTreeInstance.dataSource.success([virtualRoot]);
                if (!options['expandLevel']){
                    kendoTreeInstance.expandPath([rootId]);
                }
            }

            if (isFunction(options[LOAD_COMPLETE])) {
                options[LOAD_COMPLETE].call(kendoTreeInstance, options);
            }

        }
    });


    // 挂载到IPLAT上 树已经被封装
    IPLAT.TreeView = function (options) {
        new EFTree($("#" + options.treeId), options);
    };


    /**
     * 重新加载树
     * @param {Array} nodeName  valueField的映射值，一般为树结点id
     */
    kendo.ui.TreeView.fn.reload = function (nodeName) {
        //  找到父亲结点
        var node = this.dataSource.get(nodeName);

        if (node) {
            // 重新设置flag , 这样才能重新使其到服务器获取数据
            node.loaded(false);
            // 重新加载
            node.load();
        }
    };

    /**
     * 递归获取树上所有勾选的结点，返回kendo.data.Node数组
     *
     * @param {Array} nodes
     * @param {Array} checkedNodes
     * @private
     */
    function _getCheckedNodes(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i]);
            }

            if (nodes[i].hasChildren) {
                _getCheckedNodes(nodes[i].children.view(), checkedNodes);
            }
        }
    }

    /**
     * 默认获取树上所有勾选的结点对象数据[Node ...]
     * 如果传入字符串参数 获取相应属性字段值的数组 [Node.label ...]
     */
    kendo.ui.TreeView.fn.getCheckedNodes = function () {
        // https://docs.telerik.com/kendo-ui/controls/navigation/treeview/overview#gather-checked-nodes-from-treeview

        var nodes = [];
        _getCheckedNodes(this.dataSource.view(), nodes);

        if (IPLAT.isString(arguments[0])) {
            nodes = _.pluck(nodes, arguments[0]);
        }
        return nodes;
    };

    /**
     * 展开多层树结点
     * @param {String} treeId
     * @param {Number} level
     * @private
     */
    function _expandLevel(treeId, level){
        var unExpandedIds = [],
            treeView = $("#" + treeId).data("kendoTreeView");

        _.each(treeView.element.find("span.k-i-expand"), function (expandIcon) {
            var item = treeView.dataItem(expandIcon.closest("li.k-item"));
            unExpandedIds.push(item.id);
        });

        level--;

        treeView.expandPath(unExpandedIds, function () {
            if (level > 0) {
                _expandLevel(treeId, level);
            }
        });
    }

    /**
     * 展开多层树结点
     * @param {String} treeId
     * @param {Number} level
     */
    kendo.ui.TreeView.fn.expandLevel = function (treeId, level) {
        if (showVirtualRoot){
            _expandLevel(treeId, level);
        }else{
            _expandLevel(treeId, level - 1);
        }
    }

})(jQuery);

(function ($) {
    var treeDefaults,
        transportDefaults,
        TreeListDataSource = kendo.data.TreeListDataSource,
        isArray = $.isArray,
        isFunction = $.isFunction,
        isPlainObject = $.isPlainObject,
        Widget = kendo.ui.Widget,
        each = $.each,
        extend = $.extend;


    var EiInfo = IPLAT.EiInfo,
        EiCommunicator = IPLAT.EiCommunicator,
        PARENT_ID = IPLAT.EFCommon.PARENT_ID,
        VALUE_FIELD = IPLAT.EFCommon.VALUE_FIELD,
        TEXT_FIELD = IPLAT.EFCommon.TEXT_FIELD,
        VIRTUAL_ROOT = IPLAT.EFCommon.VIRTUAL_ROOT,

        // "inqu_status-0-node"
        PID = IPLATUI.Config.EFTree.PID,

        // "inqu_status-0-expandLevel"
        EXPAND_LEVEL = IPLATUI.Config.EFTree.EXPAND_LEVEL,

        _extendColumns = IPLAT.EFCommon._extendColumns,

        NS = IPLAT.EFCommon.NS,
        ON_SUCCESS = IPLAT.EFCommon.ON_SUCCESS,
        ON_FAIL = IPLAT.EFCommon.ON_FAIL,

        // 定义树加载完成后事件
        LOAD_COMPLETE = "loadComplete",

        EFTreeList;

        var Class = kendo.Class,
        TD_ERROR_MSG = 'errorMsg',
        INVALID_COLOR = IPLAT.ColorBox.INVALID_COLOR,
        DEFAULT_TOOLTIP_WIDTH = 450,
        DEFAULT_ERROR_TOOLTIP_WIDTH = 100,
        ON_CELLCLICK = "onCellClick",
        ON_ROWCLICK = "onRowClick"

    /**
     * 根据父结点的id, 从Map结构中查找其子结点数组
     *
     * @param data          行数据数组
     * @param parentId      父结点的值
     * @param parentIdField 父结点的列名
     */
    var getChildren = function (data, parentId, parentIdField) {
        // 查询不到, 返回 []
        return _.filter(data, function (e) {
            return e[parentIdField] === parentId;
        });
    };

    var fixTreeListData = function (data, rootId, parentIdField, hasChildren) {
        $.map(data, function (e, i) {
            if (e[parentIdField] === rootId) {
                e[parentIdField] = null;
            }

            if (!IPLAT.isBoolean(e[hasChildren])) {
                e["hasChildren"] = !(parseInt(e[hasChildren]) === 1);
            }

            return e;
        });

        return data;
    };

    EFTreeList = Widget.extend({
        init: function (element, options) {
            var that = this,
                virtualRoot,

                // JS中配置的options
                treeListOptions = IPLATUI.EFTreeList[options.treeListId];

            that._events = {};

            that.element = element;

            // options是来自Tag中的属性
            var initOptions = that.options = extend({}, options, treeListOptions);

            var valueField = initOptions['valueField'];
            var textField = initOptions['textField'];

            var hasChildren = initOptions['hasChildren'];

            // 手动设置根结点
            virtualRoot = that.options[VIRTUAL_ROOT] || IPLATUI.Config.EFTreeList.ROOT_ID;

            // virtualRoot 是String
            that.virtualRoot = virtualRoot;

            that._buildColumns();
            that._buildDataSource();

        },

        _buildColumns: function () {
            var that = this,
                options = that.options,
                valueField = options[VALUE_FIELD],
                parentIdField = options[PARENT_ID],
                kendoColumns;

            var tagId = options.tagId;
            var modelFields = {};

            // 注意EFColumn Tag将数据存在EFGrid对象下
            var tagColumns = IPLAT.EFGrid[tagId].columns;

            // 处理kendo的配置，优先级最高。高级用法，用于自定义列
            if (isArray(options.columns)) {
                _extendColumns(options.columns, tagColumns);
                delete options.columns;
            }

            // TODO EFTreeList支持autoDraw
            // 已经是kendo接受的格式，转换在EFColumn Tag中进行
            kendoColumns = tagColumns;


            // 构造schema的model信息
            //
            // schema: {
            //     model: {
            //         id: "EmployeeID", // options[VALUE_FIELD]
            //         fields: {
            //             parentId: { field: "ReportsTo",  nullable: true }, // options[PARENT_ID]
            //             EmployeeID: { field: "EmployeeId", type: "number" }, // options[VALUE_FIELD]
            //             Extension: { field: "Extension", type: "number" }
            //         },
            //         expanded: true
            //     }
            // }

            each(kendoColumns, function (i, column) {
                column.width = column.width || 150; // JS中的列
                modelFields[column.field] = {
                    editable: column.enable,
                    defaultValue: column.defaultValue || ""
                };

                // 父结点列信息设置
                if (column.field === parentIdField) {
                    modelFields[parentIdField]["field"] = parentIdField;
                    modelFields[column.field]["nullable"] = true;
                }

                // Id列配置成可展开的
                if (column.field === options[VALUE_FIELD]) {
                    // TODO expanded属性的验证
                    column.expandable = true;
                }
            });

            modelFields["parentId"] = {field: parentIdField, nullable: true};

            that.modelFields = modelFields;

            // if (options.editable) {
            //     kendoColumns.push({
            //         command: [{name: "edit", text: "编辑"},
            //             {name: "destroy", text: "删除"}], width: 150
            //     });
            // }

            extend(options, {
                columns: kendoColumns
            });

        },

        _buildDataSource: function () {
            var that = this,
                options = that.options;

            that.CREATE = options["insertMethod"] || "insert";
            that.READ = options["queryMethod"] || "query";
            that.UPDATE = options["updateMethod"] || "update";
            that.DESTROY = options["deleteMethod"] || "delete";

            // 绑定成功和失败事件
            that.bind(ON_FAIL + NS, options[ON_FAIL]);
            that.bind(ON_SUCCESS + NS, options[ON_SUCCESS]);

            // 在JS中配置了dataSource
            var originalDataSource = options.dataSource;

            if (!originalDataSource) {
                // 分层按需加载树结点
                that._loadOnDemand();

            } else {
                // build normal
            }
        },

        _loadOnDemand: function () {
            var that = this,
                options = that.options,
                expandLevel = options.expandLevel,
                valueField = options['valueField'],
                virtualRoot = that.virtualRoot;

            var rootId = virtualRoot;


            var postEiInfo = new EiInfo(),
                serviceName = options.serviceName,
                queryMethod = that.READ;

            postEiInfo.set(PID, rootId);
            postEiInfo.set(EXPAND_LEVEL, options.expandLevel);

            if (IPLAT.isNumber(expandLevel) && expandLevel > 0) {
                // 混合加载，先加载前几层的节点，查询出的节点，不会全部渲染，效率较高
                EiCommunicator.send(serviceName, queryMethod, postEiInfo, {
                    onSuccess: function (ajaxEi) {
                        try {
                            var allNodes = ajaxEi.getBlock(rootId).getMappedRows();
                            that._loadMixed(allNodes);
                        }
                        catch (e) {
                            that.trigger(ON_FAIL + NS, {errorMsg: "缺少数据块[" + rootId + "]", xhr: null});
                        }
                    }, onFail: function (error) {
                        that.trigger(ON_FAIL + NS, {errorMsg: error, xhr: null});
                    }
                });

            } else {
                // 根据rootId直接进行查询加载
                that._loadMixed();
            }
        },

        _loadMixed: function () {
            var that = this,
                options = that.options,
                ajaxEi,
                parentId,
                valueField = options['valueField'],
                virtualRoot = that.virtualRoot,
                resultBlock,
                kendoTreeListInstance,
                topNodes = arguments[0] || [];

            var rootId = virtualRoot;

            var parentIdField = options.pid;

            var dataSource = new TreeListDataSource({
                transport: {
                    read: function (params) {
                        var pid = params.data[valueField];

                        var data = getChildren(topNodes, pid, parentIdField);

                        if (isArray(data) && data.length > 0) {
                            params.success(data);
                        } else {
                            var postData = this.parameterMap(params, "read");
                            $.ajax({
                                url: options.url + "/service/" + options.serviceName + "/" + that.READ,
                                dataType: "json",
                                contentType: "application/json",
                                type: 'POST',
                                data: postData,
                                success: function (result) {
                                    params.success(result);
                                },
                                error: function (result) {
                                    params.error(result);
                                }
                            });
                        }
                    },
                    parameterMap: function (params, operation) {
                        var postEiInfo = new EiInfo();

                        // virtualRoot["id"] 查询条件 父结点的Id
                        parentId = params["data"]["id"] || virtualRoot;

                        if (operation === "read") {
                            that.parentId = parentId;
                            postEiInfo.set(PID, parentId);

                            // 查询前的回调函数，可以自定义传入除了Id以外的条件
                            if (isFunction(options["query"])) {
                                var model = that.options.dataSource.get(parentId);
                                options["query"].call(that, postEiInfo, model);
                            }
                        }

                        return postEiInfo.toJSONString();
                    }
                },

                schema: {
                    model: {
                        id: valueField,
                        // parentId: parentIdField,
                        fields: that.modelFields
                        // hasChildren: options.hasChildren
                    },

                    // response的数据处理顺序: requestEnd--> parse--> errors--> total--> data
                    data: function (response) {
                        var hasChildren = options["hasChildren"];
                        var treeNodes = [];
                        parentId = that.parentId;

                        if (isArray(response)) {
                            return fixTreeListData(response, rootId, parentIdField, hasChildren);

                        } else {

                            try {
                                ajaxEi = EiInfo.parseJSONObject(response);

                                // 返回的数据必须包含 blockId = 父结点的Id 的EiBlock
                                treeNodes = ajaxEi.getBlock(parentId).getMappedRows();

                                treeNodes = fixTreeListData(treeNodes, rootId, parentIdField, hasChildren);
                            } catch (e) {
                                that.trigger(ON_FAIL + NS, {errorMsg: "缺少数据块[" + parentId + "]", xhr: null});
                            }

                            return treeNodes;
                        }
                    }
                },

                error: function (e) {
                    // 两种错误: 1.数据请求异常（ajax e.xhr）
                    //          2.业务异常(e.errors)
                    var errors;

                    if (!e.errors) {
                        // 格式化平台的异常信息 获得msgObj
                        errors = IPLAT.Util.formatErrorMessage((e.xhr && e.xhr.responseText) || "");
                        e.errors = errors;
                    }

                    if (!that.trigger(ON_FAIL + NS, {errorMsg: e.errors, xhr: e.xhr})) {
                        NotificationUtil(errors, Notification.ERROR);
                    }
                },

                requestEnd: function (e) {
                    // e => sender(DataSource) response(JSON) type("read", "create" ...)

                    var blockId = that.parentId,
                        response = e.response;

                    // response的格式有两种：
                    // 1. 按需加载，每次请求返回的EiInfo JSON；
                    // 2. 一次加载多层数据，通过dataSource.success，加载已有的 Array；

                    ajaxEi = null;

                    // 解析EiInfo JSON
                    if (!isArray(response)) {
                        try {
                            ajaxEi = EiInfo.parseJSONObject(response);
                            resultBlock = ajaxEi.getBlock(blockId);
                            var status = ajaxEi.getStatus();


                            if (status === 0) {
                                if (!that.trigger(ON_SUCCESS + NS, {eiInfo: ajaxEi})) {
                                    // NotificationUtil(msgHtml, Notification.SUCCESS);
                                }
                            } else if (status > 0) {
                                // 修改，删除的场景返回的status > 0
                                if (!that.trigger(ON_SUCCESS + NS, {eiInfo: ajaxEi})) {
                                    // NotificationUtil(msgHtml, Notification.WARNING);
                                }
                            } else {
                                // 注意：trigger error 将导致操作复原
                                that.trigger("error", e);
                            }
                        } catch (error) {
                            // 数据提交失败，会自动触发error事件
                        }
                    } // endif
                }
            });


            extend(options, {autoBind: true, dataSource: dataSource});


            kendoTreeListInstance = that.element.kendoTreeList(options).data("kendoTreeList");

            if (isFunction(options[LOAD_COMPLETE])) {
                options[LOAD_COMPLETE].call(kendoTreeListInstance, options);
            }

        },

        _build: function () {

        }
    });


    IPLAT.TreeList = function (options) {
        var treeListInstance, $tree = $("#ef_treelist_" + options.treeListId);
        treeListInstance = new EFTreeList($tree, options);

        // 处理grid hover事件
        treeListInstance.element.on("mouseover", "tr", function (e) {
            var _uid = $(this).data("uid");
            $("tr[data-uid='" + _uid + "']").addClass("k-td-hover");
        });

        treeListInstance.element.on("mouseout", "tr", function (e) {
            var _uid = $(this).data("uid");
            $("tr[data-uid='" + _uid + "']").removeClass("k-td-hover");
        });
       var _tooltip = _.throttle(function (td, msg, type) {
            var $this = $(td),
                parent = $this.closest("tr"),
                width = $this.width(),
                text = kendo.htmlEncode($this.text().trim()),
                errorMsg = (_.isString(msg) && kendo.htmlEncode(msg)) || text,

                // errorMessageText = "<span class='k-icon k-i-warning'></span>&nbsp;&nbsp;" + htmlDecode(errorMsg),
                errorMessageText = "<span class='k-icon k-i-warning'></span>&nbsp;&nbsp;" + errorMsg,
                fontSize = $this.css('font-size'),
                $otherTooltips = $("[data-role='tooltip']"),
                fontWidth = IPLAT.getCurrentStrWidth(text, fontSize),
                toolTipOptions = {
                    showAfter: 0,
                    animation: false,
                    hide: function () {
                        // 清除tooltip
                        $this.removeAttr('data-role');
                        this.destroy();
                    }
                };

            // 处理页面上可能存在的tooltip, 让其消失
            each($otherTooltips, function (i, tooltip) {
                var kendoToolTip = $(tooltip).data('kendoTooltip');

                // 校验出错的tooltip的hide 不在此处理，参考iplat.ui.kendo.validator.js 中 showValidateMsg函数
                var inValid = $(tooltip).is("input.k-invalid");

                if (kendoToolTip instanceof kendo.ui.Tooltip && !inValid) {
                    kendoToolTip.hide();
                }
            });


            if (type === 'error' && parent.hasClass('i-state-selected')) { // 校验出错时的tooltip

                extend(toolTipOptions, {width: DEFAULT_ERROR_TOOLTIP_WIDTH, content: errorMessageText});

                var toolTip = $this.kendoTooltip(toolTipOptions).data("kendoTooltip");
                toolTip.show();

                var $toolTip = toolTip.popup.element;
                // 临时使用 css 重置样式，后续样式调整
                $toolTip.css('background', INVALID_COLOR);
                $toolTip.find('.k-callout-n').css('border-bottom-color', INVALID_COLOR);

            } else {
                // 单元格文字过长的tooltip
                // tr,td结点没有被选中,出现tooltip
                // 选中内容，就不出现tooltip
                // 主从表中，主表包含子表的td也不展示
                if (!($this.hasClass('k-state-selected') || parent.hasClass('i-state-selected') || $this.hasClass('k-detail-cell'))) {
                    if (fontWidth >= width) {
                        if (fontWidth > DEFAULT_TOOLTIP_WIDTH) {
                            $.extend(toolTipOptions, {width: DEFAULT_TOOLTIP_WIDTH});
                        }
                        $.extend(toolTipOptions, {content: text});

                        // 每次tooltip都是重新渲染
                        var longTextTooltip = $this.kendoTooltip(toolTipOptions).data("kendoTooltip");
                        longTextTooltip.show();
                    }
                }
            }
        }, 400);

        // tooltip处理Grid中td展示信息过长
        treeListInstance.element.on("mouseover", "td", function (e) {
            var $this = $(this);
            var errorMsg = $.trim($this.data(TD_ERROR_MSG)) || '';
            if (errorMsg) {
                console.log("false");
                _tooltip(this, errorMsg, 'error');
            } else {
                console.log("true");
                _tooltip(this);
            }
        });


        return treeListInstance;
    };

})(jQuery);

// (function ($) {
//     var IPLAT = window.IPLAT || {},
//         tree_defaults,
//         transport_defaults,
//         TreeListDataSource = kendo.data.TreeListDataSource,
//         isArray = $.isArray,
//         isPlainObject = $.isPlainObject,
//         each = $.each,
//         extend = $.extend;
//
//
//     transport_defaults = {
//         read: {
//             type: 'POST',
//             dataType: "json",
//             contentType: "application/json"
//         },
//         create: {
//             type: 'POST',
//             dataType: "json",
//             contentType: "application/json"
//         },
//         update: {
//             type: 'POST',
//             dataType: "json",
//             contentType: "application/json"
//         },
//         destroy: {
//             type: 'POST',
//             dataType: "json",
//             contentType: "application/json"
//         }
//     };
//
//     // TreeList的中文culture和message存在问题
//     tree_defaults = {
//         culture: "zh-CN",
//         toolbar: ["create"],
//         editable: true,
//         resizable: true,
//         selectable: "multiple, row"
//     };
//
//     // 覆盖column的配置信息
//     function _extendColumns(preColumns, baseColumns) {
//         // preColumns是优先级高的数组，会覆盖baseColumns中的同名（field）元素
//         // preColumns中其他的（不存在于baseColumns中的）元素，追加到baseColumns末尾
//
//         if (isArray(preColumns) && preColumns.length > 0) {
//             each(baseColumns, function (i, baseColumn) {
//                 each(preColumns, function (j, preColumn) {
//                     if (baseColumn.field == preColumn.field) {
//                         extend(baseColumns[i], preColumn); // 列名相同时，原生配置覆盖后台配置
//                         preColumns[j] = {}; // 标记清除原生配置
//                     }
//                 });
//             });
//
//             // 处理原生配置中不存在于EiBlock中的列，默认在列的最后。例如，自定义的按钮列。
//             each(preColumns, function (i, column) {
//                 if (column.field) {
//                     baseColumns.push(column);
//                 }
//             });
//         }
//     }
//
//
//     function _beforeInit(options) {
//
//         var blockId = options.blockId;
//         var eiInfo = options.eiInfo;
//         var eiBlock = eiInfo.getBlock(blockId);
//
//         // 构造默认的datasource
//         var _init_datasource = function (options) {
//
//             return {
//                 batch: true, // 一次请求提交多条数据
//                 serverFiltering: true, // 服务端过滤
//                 serverPaging: true, // 服务端分页
//                 serverSorting: true, // 服务端排序
//
//                 transport: transport_defaults,
//                 schema: {
//                     data: function (response) {
//                         ajaxEi = EiInfo.parseJSONObject(response);
//                         var data = ajaxEi.getBlock(blockId).getMappedRows();
//                         $.map(data, function (e, i) {
//                             if (e[options.parentId] == "$$root$$") {
//                                 e[options.parentId] = null;
//                             }
//
//                             e.hasChildren = e[options.hasChildren] == "0";
//                             return e;
//                         });
//                         return data;
//                         // return ajaxEi.getBlock(blockId).getMappedRows();
//                     },
//                     total: function (response) {
//                         ajaxEi = EiInfo.parseJSONObject(response);
//                         return ajaxEi.getBlock(blockId).get(EiConstant.COUNT) || 1000;
//                     }
//                 }
//                 // requestEnd: function (e) {
//                 //     var response = e.response;
//                 //     var ajaxEi = EiInfo.parseJSONObject(response);
//                 //     if (ajaxEi && ajaxEi.extAttr) {
//                 //         var msgHtml = kendo.template($("#msg-template").html())({
//                 //             formEname: ajaxEi.extAttr[EiConstant.EF_CUR_FORM_ENAME] || "",
//                 //             msg: ajaxEi.msg.replace(/\n/g,"<br/>"),
//                 //             detailMsg:"1"
//                 //         });
//                 //
//                 //         if (ajaxEi.status >= 0) {
//                 //             NotificationUtil(msgHtml);
//                 //         } else {
//                 //             NotificationUtil(msgHtml, "error");
//                 //         }
//                 //     }
//                 // }
//             };
//         };
//
//         var datasource_defaults = _init_datasource(options);
//
//
//         var kendoColumns;
//         var modelFields = {};
//         var tagColumns = IPLAT.EFTreeList[blockId].columns;
//             }
//         }
//
//         // 优先级最高的配置, 支持kendo的所有原生配置
//         var preOptions = extend({}, IPLATUI.EFTreeList[blockId]);
//
//         // 处理kendo的配置，优先级最高。高级用法，用于自定义列
//         if (isArray(preOptions.columns)) {
//             _extendColumns(preOptions.columns, kendoColumns);
//             delete preOptions.columns;
//         }
//
//         // handle modelFields
//         each(kendoColumns, function (i, column) {
//             column.width = column.width || 150; // JS中的列
//             modelFields[column.field] = {
//                 editable: column.enable,
//                 defaultValue: column.defaultValue || ""
//                 // validation: { // TODO: parse validate rules
//                 //     // required: !column.nullable,
//                 //     // minLength: 4,
//                 //     // 'data-rules': "email",
//                 //     // 'data-regex': "/^([5-9]|100|[1-9]\\d)$/",
//                 //     // 'data-errorPrompt': "请输入5-qunilaom"
//                 // }
//                 // type: "number"
//             };
//
//             if (column.field == options.parentId) {
//                 modelFields[column.field]["field"] = options.parentId;
//                 modelFields[column.field]["nullable"] = true;
//             }
//
//             if (column.field == options.id) {
//                 column.expandable = true;
//             }
//         });
//
//         //
//         //     kendoColumns = checkColumn.concat(kendoColumns);
//         // } else {
//         //     // 所有的列都无法编辑， 工具栏的按钮应该失效
//         // }
//
//         kendoColumns.push({command: [{name: "edit", text: "编辑"}, {name: "destroy", text: "删除"}], width: 150});
//
//         extend(options, {
//             columns: kendoColumns
//         });
//
//
//         var dataSource;
//         var serviceName = options[EiConstant.SERVICE_NAME] || eiInfo.get(EiConstant.SERVICE_NAME);
//         var CREATE = "insert",
//             READ = "query",
//             UPDATE = "update",
//             DESTROY = "delete";
//
//         var methodName = READ;
//
//         READ = options["queryMethod"] || READ;
//         CREATE = options["insertMethod"] || CREATE;
//         UPDATE = options["updateMethod"] || UPDATE;
//         DESTROY = options["deleteMethod"] || DESTROY;
//
//         var efSecurityToken = $("#efSecurityToken").val();
//
//         // dataSource的处理
//         if (options.strict) {
//             // 严格模式，完全遵循kendo的格式配置dataSource
//             dataSource = options.dataSource;
//
//         } else {
//             if (options.url) {
//                 dataSource = extend(true, {}, datasource_defaults, {
//                     transport: {
//                         read: {url: options.url+"/service/" + serviceName + "/" + READ},
//                         create: {url: options.url+"/service/" + serviceName + "/" + CREATE},
//                         update: {url: options.url+"/service/" + serviceName + "/" + UPDATE},
//                         destroy: {url: options.url+"/service/" + serviceName + "/" + DESTROY},
//                         parameterMap: function (options, operation) {
//                             var info = new EiInfo();
//                             info.setByNodeObject(document.body);
//
//                             var block = info.getBlock(options.blockId);
//                             if (!isAvailable(block)) {
//                                 block = new EiBlock(eiBlock.getBlockMeta());
//                                 info.addBlock(block);
//                             }
//
//                             block.setAttr(eiBlock.getAttr());
//
//                             if (operation == "read") {
//                                 methodName = READ;
//                                 if (options.pageSize >= 0 && options.skip >= 0) {
//                                     block.set(EiConstant.LIMIT, options.pageSize);
//                                     block.set(EiConstant.OFFSET, options.skip);
//                                     block.set(EiConstant.SHOW_COUNT, true);
//                                 }
//
//                             } else {
//
//                             return info.toJSONString();// 完整的EFColumn元数据信息
//                         }
//                     },
//
//                     schema: {
//                         model: {
//                             id: options.id,
//                             parentId: options.parentId,
//                             fields: modelFields
//                         }
//                     }
//                 }, options.dataSource);
//
//             } else {
//                 dataSource = extend(true, {}, datasource_defaults, options.dataSource);
//             }
//         }
//
//         // 处理grid的列 校验和数据类型type
//
//
//
//         delete options.dataSource;
//
//         return extend({}, {dataSource: dataSource}, tree_defaults,
//             //     {
//             //     toolbar: kendo.template("<div id='ef_treelist_toolbar_" + blockId + "' class='grid_toolbar '></div>")
//             // },
//             options, preOptions);
//
//     }
//
//     IPLAT.TreeList = function (options) {
//         options = _beforeInit(options);
//         var treeInstance, $tree = $("#ef_treelist_" + options.blockId);
//         treeInstance = $tree.kendoTreeList(options).data("kendoTreeList");
//
//         return treeInstance;
//     };
//
// })(jQuery);
;(function ($) {
    var each = $.each,
        extend = $.extend,
        Upload = kendo.ui.Upload,
        EFUpload,
        Widget = kendo.ui.Widget,
        contextPath = IPLATUI.CONTEXT_PATH,
        config = IPLATUI.Config.EFUpload,

        initUrl = contextPath + config.initUrl,    // 查询单个附件，或者附件组的信息 JSON格式
        saveUrl = contextPath + config.saveUrl,    // 附件上传的Servlet
        downloadUrl = contextPath + config.downloadUrl, // 附件下载的Servlet
        removeUrl = contextPath + config.removeUrl,  // 附件删除的Servlet
        onUpload,
        NS = ".IPLAT",
        LOAD_COMPLETE = "loadComplete",

        MAX_SIZE = 10;


    EFUpload = Widget.extend({
        init: function (element, options) {
            var that = this,
                preOptions = {},
                path = options.path,
                docTag = options.docTag,
                fileLocation = options.fileLocation,
                asyncDefaults = {
                    async: {
                        saveUrl: saveUrl,
                        batch: false // 上传一个附件一个请求
                    }
                };
            that._events = {};

            that.element = element;
            that.uploader = null;

            preOptions = IPLATUI.EFUpload[options.ename];

            // if (!options.readonly) {
            asyncDefaults.async.removeUrl = removeUrl;
            // }

            that.options = extend(true, {}, options, asyncDefaults, preOptions);

            if (options.__keep__) { // changeSetting  防止preOptions的覆盖
                that.options.path = path || that.options.path;
                that.options.docTag = docTag || that.options.docTag;
                that.options.fileLocation = fileLocation || that.options.fileLocation;
                options.__keep__ = false;
            }

            that.bind(LOAD_COMPLETE + NS, that.options[LOAD_COMPLETE]);

            that.initFileList();
            // options.showFileList = false; // 临时文件上传时 不显示文件信息

        },

        initFileList: function () {
            var that = this,
                docTag = that.options.docTag;
                fileLocation = that.options.fileLocation;

            if (docTag !== "__temp__") {
                that.uploaderPromise = $.ajax({
                    type: "GET",
                    url: initUrl + "?docTag=" + docTag  + "&fileLocation=" + fileLocation,
                    dataType: "json"
                });
            } else {
                that.uploaderPromise = $.Deferred().resolve([]);
            }
        },

        _bindEvents: function () {
            var that = this,
                path = that.options.path,
                docTag = that.options.docTag,
                ename = that.options.ename;
                fileLocation = that.options.fileLocation;

            onUpload = function (e) {
                e.sender.options.async.saveUrl = saveUrl + "?" +
                    $.param({path: path, docTag: docTag, ename: ename, fileLocation: fileLocation});
            };

            that.uploader.bind("upload", onUpload);

            that.uploader.bind("remove", function (e) {
                var params = $.param({docId: e.files[0].docId,docTag: docTag, fileLocation: fileLocation});

                if (e.files[0].docTag === "__temp__") {
                    params = $.param({docId: e.files[0].docId, docTag: "__temp__"});
                }

                e.sender.options.async.removeUrl = removeUrl + "?" + params;
            });

            that.uploader.bind("success", function (e) {
                e.files[0].docId = e.response.docId;
                e.files[0].docTag = e.response.docTag;
            });
        },

        changeSettings: function (docTag, path) {
            var that = this,
                settings = {
                    docTag: docTag,
                    path: path
                };

            that.resetOptions(settings);
        },

        resetOptions: function (settings) {
            var that = this,
                initDocTag = that.options.docTag,
                ename = that.options.ename;

            extend(that.options, settings);

            that.options.ename = ename; // ename不允许改变


            var options = that.options;

            var path = that.options.path,
                docTag = that.options.docTag;
                fileLocation = that.options.fileLocation;

            if (that.uploader && docTag !== initDocTag) {
                that.uploader.destroy();
                that.destroy();

                options.__keep__ = true;
                // 重新查询
                IPLAT.Uploader(options);

            }

            that.uploader.unbind("upload", onUpload);

            that.uploader.bind("upload", function (e) {
                e.sender.options.async.saveUrl = saveUrl + "?" +
                    $.param({path: path, docTag: docTag, ename: ename, fileLocation: fileLocation});
            });
        },

        destroy: function () {
            var ename = this.options.ename,
                $input;

            Widget.fn.destroy.call(this);

            $input = $("#" + ename).detach();
            $(".upload-" + ename).empty().append($input);

        }

    });

    IPLAT.Uploader = function (options) {
        var efUpload = new EFUpload($("#" + options.ename), options);

        efUpload.uploaderPromise.then(function (docs) {
            var that = efUpload;
            // 已上传的附件
            that.options.files = _.map(docs, function (doc) {
                var extension = doc.docName.match(/\.[^.]+$/g);
                if (extension) {
                    extension = extension[0];
                } else {
                    extension = "";
                }

                doc.name = doc.docName;
                doc.size = doc.docSize;
                doc.extension = extension;
                return doc;
            });


            that.uploader =
                that.element.kendoUpload(that.options).data("kendoUpload");

            if (that.options.readonly) { // 上传控件只读
                that.uploader.disable();
            }

            // exports
            window[that.options.ename + "Upload"] = that;

            that._bindEvents();

            that.trigger(LOAD_COMPLETE + NS);


        }, function (xmlR, status, e) {
            // 初始化附件失败
        });

        return efUpload;
    };


    IPLAT.FileUploader = function (options) {

        var element = $("#" + options.id);

        var saveUrl = contextPath + "/EU/DM/EUDM20.jsp?ename=" + options.ename + "&serviceName="
            + options.serviceName + "&methodName=" + options.methodName;

        $.extend(options, {
            async: {
                saveUrl: saveUrl
            }
        });


        return element.kendoUpload(options).data("kendoUpload");
    };

})(jQuery);



;(function ($) {
    var extend = $.extend,
        // 复用 kendo.ui.Validator 中 _checkValidity 和 _extractMessage
        // _checkValidity 判断校检是否通过
        // _extractMessage 获取错误信息
        _extractMessage = kendo.ui.Validator.fn._extractMessage,
        _checkValidity = kendo.ui.Validator.fn._checkValidity;

    function validateFunctionWrapper(validateFunction) {
        return function () {
            var input = arguments[0],
                groupName = arguments[1];

            // Grid中的单元格校验不受分组影响
            var gridCell = input.closest("td.k-edit-cell").length > 0;

            if (input.attr("validate") === "false") // 不参与校验
                return true;

            if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
                return validateFunction.apply(null, arguments);
            }
            return true;
        }
    }

    /**
     * 替换掉必填项上，label的红色*字符
     * @param message
     * @private
     */
    function _trimMessage(message) {
        return message.trim().replace(/^\*\s?/, "");
    }

    function _validateGroup(input, groupName) {
        if (groupName === "__all__") { // 校验所有的分组
            return true;
        }

        if (groupName === undefined) { // 没有分组
            groupName = "__none__";
        }

        var value = input.attr("validategroupname") || "__none__";
        var inputGroups = value.split(","); // input元素上的多个分组用","分隔
        var groups = groupName.split(","); // 想要进行校验的多个分组用","分隔
        return _.intersection(inputGroups, groups).length > 0;
    }

    function _initValidator(groupName) {
        // 内置的规则，正则表达式的维护
        // 校验时，会顺序检测定义的所有rules。所有要根据input元素上的属性，判断是否需要验证其他的rule

        /* TODO: 分组校验特殊场景
         * 1. 校验区域内存在分组，和非分组的情况，默认只校验指明的group（没有分组, groupName就是undefined)
         * 缺点是没法对整个区域进行校验，规定如果要全区域校验，就不要在区域内设置校验分组
         *
         * 2. 多个校验分组，同时校验的提示信息 （分组1校验失败，分组2校验成功）
         *
         * 3. validate的API，可指明校验多个分组
         */


        return {
            rules: {
                required: function (input) { // 更换成平台的rules使用正则表达式

                    if (!input.prop("required") || input.attr("validate") === "false") // 不参与校验
                        return true;

                    // Grid中的单元格校验不受分组影响
                    var gridCell = input.closest("td.k-edit-cell").length > 0;

                    if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
                        return input.val() && !!input.val().length
                    }
                    return true;
                },
                minLength: function (input) {
                    if (!input.attr("minlength") || input.attr("validate") === "false") // 不参与校验
                        return true;
                    // Grid中的单元格校验不受分组影响
                    var gridCell = input.closest("td.k-edit-cell").length > 0;

                    if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
                        var inputValue = input.val(); // 考虑下拉框和其他输入场景

                        // minLength, maxLength, nullable等价于required属性
                        // HTML5 min max range step是针对type=number处理的

                        var minLength = input.attr("minlength"); // HTML中的属性名都是小写的

                        if (minLength && !isNaN(parseInt(minLength))) {
                            return inputValue.length >= minLength;
                        }
                        return true;
                    }
                    return true;

                },
                maxLength: function (input) {
                    if (!input.attr("maxlength") || input.attr("validate") === "false") // 不参与校验
                        return true;

                    // Grid中的单元格校验不受分组影响
                    var gridCell = input.closest("td.k-edit-cell").length > 0;

                    if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
                        var inputValue = input.val();
                        var maxLength = input.attr("maxlength");

                        if (maxLength && !isNaN(parseInt(maxLength))) {
                            return inputValue.length <= maxLength;
                        }
                        return true;
                    }
                    return true;
                },

                email: function (input) {
                    return validateFunctionWrapper(validatePlatRules)(input, groupName, "email", /^([_a-z0-9]|[.]|[\-])+@(([_a-z0-9]|[\-])+\.)+[a-z0-9]+$/i);
                },
                mobile_phone: function (input) {
                    return validatePlatRules(input, groupName, "mobile_phone", /^1[3456789](\d{9})$/);
                },
                postcode: function (input) {
                    return validatePlatRules(input, groupName, "postcode", /^(\d{6})$/);
                },
                phone_with_area_code: function (input) {
                    return validatePlatRules(input, groupName, "phone_with_area_code", /^\d{3,4}-\d{3,11}(-\d*)?$/);
                },
                phone_without_area_code: function (input) {
                    return validatePlatRules(input, groupName, "phone_without_area_code", /^[1-9]\d{2,10}$/);
                },

                integer: function (input) {
                    return validatePlatRules(input, groupName, "phone_without_area_code", /^-?[1-9]+\d*$|^0$/);
                },
                positive_integer: function (input) {
                    return validatePlatRules(input, groupName, "positive_integer", /^[1-9]+\d*$/);
                },
                non_negative_integer: function (input) {
                    return validatePlatRules(input, groupName, "non_negative_integer", /^[1-9]+\d*$|^0$/);
                },
                negative_integer: function (input) {
                    return validatePlatRules(input, groupName, "negative_integer", /^-[1-9]+\d*$/);
                },
                http_url: function (input) {
                    return validatePlatRules(input, groupName, "http_url", /^https?:\/\/(([a-zA-Z0-9_-])+(\.)?)*(:\d+)?(\/((\.)?(\?)?=?&?[a-zA-Z0-9_-](\?)?)*)*$/i);
                },
                number: function (input) {
                    return validatePlatRules(input, groupName, "number", /^-?[1-9]\d*$|^-?[1-9]\d*\.\d+$|^-?0?\.\d+$|^0$/);
                },
                non_negative_number: function (input) {
                    return validatePlatRules(input, groupName, "non_negative_number", /^[1-9]\d*$|^[1-9]\d*\.\d+$|^0?\.\d+$|^0$/);
                },
                positive_number: function (input) {
                    return validatePlatRules(input, groupName, "positive_number", /^[1-9]\d*$|^[1-9]\d*}\.\d+$|^0?\.\d+$/);
                },
                decimal: function (input) {
                    return validatePlatRules(input, groupName, "decimal", /^-?0?\.\d+$/);
                },
                label: function (input) {
                    return validatePlatRules(input, groupName, "label", /^[a-z][a-z0-9_]+$/i);
                },
                string: function (input) {
                    return validatePlatRules(input, groupName, "string", /^[a-z0-9_]+$/i);
                },
                chinese_string: function (input) {
                    return validatePlatRules(input, groupName, "chinese_string", /^([a-z0-9_]|[\u4E00-\u9FA5])+$/i);
                },
                not_chinese_string: function (input) {
                    return validatePlatRules(input, groupName, "not_chinese_string", /^[^\u4E00-\u9FA5]*$/i);
                },
                ip_address: function (input) {
                    return validatePlatRules(input, groupName, "ip_address", /^([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|25[0-5])){3}$/);
                },
                text: function (input) {
                    return validatePlatRules(input, groupName, "text", /^([\w]|[\W])*$/i);
                },
                mac: function (input) {
                    return validatePlatRules(input, groupName, "mac", /^[0-9a-f]{2}([:][0-9a-f]{2}){5}$|^[0-9a-f]{2}([\-][0-9a-f]{2}){5}$/i);
                },
                // 多重正则校验
                regex: function (input) {
                    return validateRegExp(input, groupName);
                },
                // 自定义方法校验
                func: function(input) {
                    return validateFunc(input, groupName);
                }
            },
            messages: {
                required: function (input) {
                    var id = input.attr('id');
                    // 变更label中for属性为data-for，防止kendo的bug => label中for属性名称与input的id相同，点击label会触发input的click事件
                    return _trimMessage(
                        kendo.format("{0}为必填项", $("label[data-for=" + id + "]").text()));
                },

                minLength: function (input) {
                    var id = input.attr('id');
                    return _trimMessage(
                        kendo.format("{0}长度不应该小于{1}", $("label[data-for=" + id + "]").text(), input.attr("minlength")));
                },

                maxLength: function (input) {
                    var id = input.attr('id');
                    return _trimMessage(
                        kendo.format("{0}长度不应该大于{1}", $("label[data-for=" + id + "]").text(), input.attr("maxlength")));
                },
                email: "不是有效的电子邮件地址",
                mobile_phone: "不是有效的手机号码",
                postcode: "不是有效的邮政编码",
                phone_with_area_code: "带区号和分机号的电话号码，格式应如：021-50801155-1004",
                phone_without_area_code: "电话号码应为3-11位的数字，需以非零开头",
                integer: "必须输入整数",
                positive_integer: "必须输入正整数",
                non_negative_integer: "必须输入非负整数",
                negative_integer: "必须输入负整数",
                http_url: "需要以http://或https://开头",
                number: "必须输入数字",
                non_negative_number: "必须输入非负数字",
                positive_number: "必须输入正数字",
                decimal: "必须输入小数",
                label: "仅包含字母数字和下划线，需要以字母开头",
                string: "英文字符串必须仅由字母、数字和下划线组成",
                chinese_string: "中文字符串仅包含中文，英文字母数字和下划线",
                not_chinese_string: "包含非法的中文字符串",
                ip_address: "非法的IP地址",
                text: "非法的字符串",
                mac: "非法的MAC地址",

                regex: function (input) {
                    return input.attr("__error_msg__");
                },
                func: function (input) {
                    return input.attr("__error_msg__");
                }
            }
        };
    }


    function validateHTML5Rules(input, groupName, platRule, pattern) {

    }

    // 内置校验规则处理 data-rules
    function validatePlatRules(input, groupName, platRule, pattern) {
        if (!(input.attr("validate") === "true")) {
            if (IPLAT.isBlankString(input.val())) {
                // 不参与校验
                return true;
            }
        }


        var gridCell = input.closest("td.k-edit-cell").length > 0;

        if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
            var rules = input.data("rules") || "";
            rules = rules.split(",");

            var index = _.findIndex(rules, function (rule) {
                return rule.trim() === platRule;
            }); // 查找input配置的校验规则

            if (index < 0) {
                return true;
            }
            return (pattern.test(input.val()));
        }

        return true;
    }

    // 多重正则校验 data-rules
    function validateRegExp(input, groupName) {
        if (!(input.attr("validate") === "true")) {
            if (IPLAT.isBlankString(input.val())) {
                // 不参与校验
                return true;
            }
        }

        var gridCell = input.closest("td.k-edit-cell").length > 0;

        if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
            var dataAttributes = input.data() || {}; // errorPrompt

            var regExps = [];

            // 所有的正则校验规则
            for (var regex in dataAttributes) {
                if (dataAttributes.hasOwnProperty(regex) && regex.match(/regex\d*/)) {
                    regExps.push(regex);
                }
            }

            regExps = _.sortBy(regExps, function (value) {
                var index = -1;
                if (value.length > 5) // "regex".length == 5
                    index = value.substring(5) * 1;
                return index;
            });

            var success = true;

            for (var i = 0; i < regExps.length; i++) {
                var pattern = eval(dataAttributes[regExps[i]]);
                success = pattern.test(input.val());
                if (!success) {
                    // setErrorPrompt
                    input.attr("__error_msg__", input.data("errorprompt" + regExps[i].substring(5)));
                    break;
                }
            }
            return success;
        }
        return true;
    }

    // 自定义方法校验 data-func
    function validateFunc(input, groupName) {
        if (!(input.attr("validate") === "true")) {
            if (IPLAT.isBlankString(input.val())) {
                // 不参与校验
                return true;
            }
        }

        var gridCell = input.closest("td.k-edit-cell").length > 0;

        if (gridCell || _validateGroup(input, groupName)) { // 判断校验分组
            var dataAttributes = input.data() || {}; // errorPrompt

            var regExps = [];

            // 所有的方法校验规则
            for (var regex in dataAttributes) {
                if (dataAttributes.hasOwnProperty(regex) && regex.match(/func\d*/)) {
                    regExps.push(regex);
                }
            }

            regExps = _.sortBy(regExps, function (value) {
                var index = -1;
                if (value.length > 4) // "func".length == 4
                    index = value.substring(4) * 1;
                return index;
            });

            var success = true;

            for (var i = 0; i < regExps.length; i++) {
                var funcName = dataAttributes[regExps[i]];
                var inVal = input.val();

                if (IPLAT.isAvailable(IPLAT.validateFunc[funcName])) {
                    success = IPLAT.validateFunc[funcName](inVal);
                    if (!success) {
                        // 设置 ErrorPrompt
                        input.attr("__error_msg__", input.data("errorprompt" + regExps[i].substring(4)));
                        break;
                    }
                } else { // js中自定义的 IPLAT.validateFunc 没有 data-func 属性中的方法
                    success = false;
                    input.attr("__error_msg__", "IPLAT.validateFunc 没有 data-func 属性中的方法");
                    break;
                }
            }
            return success;
        }
        return true;
    }

    // kendo.ui.validator 默认没有校验规则，但是grid的单元格的校验，检测kendo.ui.validator中的校验规则
    extend(true, kendo.ui.validator, _initValidator());

    IPLAT.Validator = function (options) {
        var defaults = _initValidator(options.groupName); // 每个validator定制化的校验规则

        options = $.extend(defaults, options, {iplat_validator: true});

        return $("#" + options.id).kendoValidator(options).data("kendoValidator");
    };

    // 对象进行校检
    $.fn.kendoInputValidate = function () {
        var options = kendo.ui.validator || {},
            messageText;
        var result = _checkValidity.call({options: options}, $(this)) || {};
        if (!result.valid) {
            messageText = _extractMessage.call({options: options}, $(this), result.key);
            return extend(result, {errorMsg: messageText});
        }
        return result;
    };

    // 可以进行分组校验
    kendo.ui.Validator.fn.validate = (function (validate) {

        return function (groupName) {
            // if (this.options.groupName !== groupName) {
            this.setOptions(_initValidator(groupName)); // 改变了validator的行为
            // }

            // var result = validate.call(this);
            //
            // // 恢复原validator配置
            //
            // return result;

            var inputs;
            var idx;
            var result = false;
            var length;
            var isValid = this.value();

            // INPUTSELECTOR去除[readonly],使只读输入框正常参与校验,
            // 避免加"i-input-readonly" 样式的处理方式引起的焦点问题
            var INPUTSELECTOR = ":input:not(:button,[type=submit],[type=reset],[disabled])";
            var validateAttributeSelector = "[data-validate!=false]";
            var _inputSelector = INPUTSELECTOR + validateAttributeSelector;

            this._errors = {};
            if (!this.element.is(INPUTSELECTOR)) {
                var invalid = false;
                inputs = this.element.find(_inputSelector);
                for (idx = 0, length = inputs.length; idx < length; idx++) {
                    if (!this.validateInput(inputs.eq(idx))) {
                        invalid = true;
                    }
                }
                result = !invalid;
            } else {
                result = this.validateInput(this.element);
            }
            this.trigger('validate', { valid: result });
            if (isValid !== result) {
                this.trigger('change');
            }
            return result;
        };

    })(kendo.ui.Validator.fn.validate);

    kendo.ui.Validator.fn.validateInput = (function (validateInput) {
        return function (input) {
            var that = this, options = that.options, $input = $(input);

            // grid中的校验
            var inGrid = $input.closest("td").length > 0;

            if ((options && options['iplat_validator'] === true) || inGrid) {
                that._isValidated = true;

                var INVALIDINPUT = 'k-invalid',
                    VALIDINPUT = 'k-valid',
                    VALIDATE_INPUT = 'validateInput',
                    result = that._checkValidity(input),
                    valid = result.valid,
                    wasValid = !$input.attr('aria-invalid');

                $input.removeAttr('aria-invalid');

                showValidateMsg($input, that);

                if (wasValid !== valid) {
                    this.trigger(VALIDATE_INPUT, {
                        valid: valid,
                        input: $input
                    });
                }

                $input.toggleClass(INVALIDINPUT, !valid);
                $input.toggleClass(VALIDINPUT, valid);

                return valid;
            } else {
                return validateInput.call(this, input);
            }
        }
    })(kendo.ui.Validator.fn.validateInput);

    // 展示校验的错误信息 使用绝对定位的tooltip，防止grid的行被撑开
    function showValidateMsg(input, that) {
        var _input = getBorderInput(input),
            result = that._checkValidity(input),
            valid = result.valid,
            fieldName = input.attr('name') || '',
            inValidColor = IPLAT.ColorBox.INVALID_COLOR;

        // grid中的校验
        var $td = _input.closest("td");
        var inGrid = $td.length > 0;

        if (!valid) {
            var messageText = that._extractMessage(input, result.key);
            that._errors[fieldName] = messageText;
            var errorMessageText = "<span class='k-icon k-i-warning'></span>&nbsp;&nbsp;" + decode(messageText);

            var toolTipOptions = {
                showAfter: 0,
                width: IPLAT.getCurrentStrWidth(errorMessageText, $(input).css('font-size')),
                animation: false,
                content: errorMessageText,
                hide: function () {
                    input.removeAttr('data-role');
                    this.destroy();
                }
            };

            // 边框颜色调整
            _input.css("border-color", inValidColor);
            _input.css("color", inValidColor);

            var hoverInHandler = kendo.throttle(function () {
                // 处理页面上可能存在的tooltip, 让其消失
                var $otherTooltips = $("[data-role='tooltip']");

                if ($otherTooltips.length > 0 && !inGrid) {
                    $.each($otherTooltips, function (i, tooltip) {
                        $(tooltip).data('kendoTooltip').hide();
                    });
                }

                if (inGrid) {
                    var inputId = $td.data("inputId");
                    if (!isAvailable(inputId)) {
                        // grid单元格进入编辑没有id 只有name
                        var timestamp = +new Date();

                        input.attr("id", "tdInput" + timestamp);

                        $td.data("inputId", "tdInput" + timestamp); // 在td暂时存放id
                    } else {
                        input.attr("id", inputId);
                    }
                }


                if (!input.data("kendoTooltip")) {
                    input.kendoTooltip(toolTipOptions); // 初始化tooltip
                }

                var toolTip = input.data("kendoTooltip");
                toolTip.show();

                // ToolTip背景色调整
                var $toolTip = $("#" + input[0]['id'] + "_tt_active");

                $toolTip.css("background", inValidColor);
                $toolTip.find("div.k-callout").css("border-bottom-color", inValidColor);

                // Tooltip绝对定位
                var toolTipContainer = $toolTip.closest("div.k-animation-container"),
                    _inputOffset = _input.offset();

                toolTipContainer.css("top", _inputOffset.top + _input.parent().height() + 6 + "px");
                toolTipContainer.css("left", _inputOffset.left - (toolTip.options.width - _input.width())/2 + "px");
            }, 200);

            var hoverOutHandler = kendo.throttle(function () {
                var toolTip = input.data("kendoTooltip");
                if (toolTip) {
                    toolTip.hide();
                }
            }, 200);


            // _input.hover(hoverInHandler, hoverOutHandler);
            _input.off("mouseenter");
            _input.off("mouseleave");

            _input.on("mouseenter", hoverInHandler);
            _input.on("mouseleave", hoverOutHandler);

            input.attr('aria-invalid', true);
        } else {
            delete that._errors[fieldName];
            _input.css("border-color", "");
            _input.css("color", "");
            _input.unbind("mouseenter").unbind("mouseleave");
        }
    }

    // 获取边框可渲染的input
    function getBorderInput($input) {

        // nodeName属性会导致jQuery的bug https://github.com/jquery/jquery/issues/1721
        // TAG选择器的失效 

        if ($input.attr("name") === "nodeName" && !$input.parent().hasClass("i-validate-helper")) {
            $input.attr("name", "__nodeName__").css("width", "100%");
            $input.wrap("<div class='i-validate-helper' />");
            return $input.parent();
        }

        if ($input.prev("span") && $input.prev("span").hasClass("k-dropdown-wrap")) {
            return $input.prev("span");
        }

        if (($input.closest("span") && $input.closest("span").hasClass("k-picker-wrap")) ||
            $input.hasClass("popupColumn") || $input.hasClass("textareaColumn")) {
            return $input.closest("span");
        }

        if ($input.closest("div") && $input.closest("div").hasClass("k-multiselect")) {
            return $input.closest("div");
        }

        if ($input.hasClass("popupInput") || $input.hasClass("treeInput")) {
            return $input.closest("span");
        }

        return $input;
    }

    function decode(value) {
        return value.replace(/&amp/g, '&amp;').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
    }

})(jQuery);
/**
 * IPLATUI提供的工具类，依赖ui组件，需要在最后打包压缩
 */
(function ($) {
    // 优化 i-input-readonly 逻辑
    $(document).on('keydown mousedown', '.i-input-readonly', function (event) {

        var fixedReadOnly = function ($element) {
            $element.unbind('keyup input');
            $element.attr('style', "ime-mode:disabled");
            var _val = $element.val();

            $element.on('keyup', function () {
                $element.val(_val);
            });
            $element.on('input', function () {
                $element.val(_val);
            });
        };

        // 处理input 和 textarea 不可编辑
        var $input = this.nodeName === 'INPUT' ? $(this) : $(this).find('input');
        if ($input.length) {
            fixedReadOnly($input);
        }

        var $textarea = this.nodeName === 'TEXTAREA' ? $(this) : $(this).find('textarea');
        if ($textarea.length) {
            fixedReadOnly($textarea);
        }

        IPLAT.Util.stopPropagation(event);

    });


    IPLAT.Util.exportGrid = function (postData) {
        // $.ajax({
        //     type: 'POST',
        //     dataType: "json",
        //     url: IPLATUI.CONTEXT_PATH + "/export",
        //     contentType: IPLAT.AJAX.ContentType.FORM,
        //     data: postData
        // });

        var exportForm = document.forms["_eiExportForm"];

        // 页面中放置一个隐藏的iframe 处理Form提交结果
        // https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript
        var exportIframe = document.getElementById("_eiExportIframe");

        if (isAvailable(exportForm)) {
            document.body.removeChild(exportForm); // 清除已有的form表单
        }

        if (isAvailable(exportIframe)) {
            document.body.removeChild(exportIframe); // 移除iframe
        }

        exportIframe = document.createElement("iframe");
        exportIframe.setAttribute("id", "_eiExportIframe");
        exportIframe.setAttribute("name", "_eiExportIframe");
        exportIframe.style.display = 'none';
        document.body.appendChild(exportIframe);

        var parentWindow = window;
        exportIframe.addEventListener("load", function () {
            // Error contentType text/html
            var errorMsg = $("#_eiExportIframe").contents().find("#__eiExportError__").html();
            if (isAvailable(errorMsg)) {
                parentWindow.NotificationUtil("" + errorMsg, "error");
            } else {
                parentWindow.NotificationUtil("导出数据失败", "error");
            }
        });


        exportForm = document.createElement("form");
        exportForm.setAttribute("id", "_eiExportForm");
        exportForm.setAttribute("method", "POST");
        // exportForm.setAttribute("target", "_blank");
        exportForm.setAttribute("target", "_eiExportIframe");
        exportForm.setAttribute("action", IPLATUI.CONTEXT_PATH + "/export");

        var inputField = document.createElement("input");
        inputField.setAttribute("type", "hidden");
        inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_FLAG);
        inputField.setAttribute("value", "true");
        exportForm.appendChild(inputField);

        inputField = document.createElement("input");
        inputField.setAttribute("type", "hidden");
        inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_FILE_NAME);
        inputField.setAttribute("value", postData.exportFileName);
        exportForm.appendChild(inputField);

        inputField = document.createElement("input");
        inputField.setAttribute("type", "hidden");
        inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_FILE_TYPE);
        inputField.setAttribute("value", postData.exportFileType);
        exportForm.appendChild(inputField);

        inputField = document.createElement("input");
        inputField.setAttribute("type", "hidden");
        inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_BLOCK_ID);
        inputField.setAttribute("value", postData.exportBlockId); // TODO: 多个BlockId，导出成多个sheet
        exportForm.appendChild(inputField);

        if (isAvailable(postData.exportServiceName) && isAvailable(postData.exportMethodName)) { // 后端导出

            inputField = document.createElement("input");
            inputField.setAttribute("type", "hidden");
            inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_SERVICE_NAME);
            inputField.setAttribute("value", postData.exportServiceName);
            exportForm.appendChild(inputField);

            inputField = document.createElement("input");
            inputField.setAttribute("type", "hidden");
            inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_METHOD_NAME);
            inputField.setAttribute("value", postData.exportMethodName);
            exportForm.appendChild(inputField);

            inputField = document.createElement("input"); // 前台的查询条件
            inputField.setAttribute("type", "hidden");
            inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_QUERY_EIINFO);
            inputField.setAttribute("value", postData.queryInfo);
            exportForm.appendChild(inputField);

        } else if (isAvailable(postData.exportEiInfo)) { // 前端导出
            inputField = document.createElement("input");
            inputField.setAttribute("type", "hidden");
            inputField.setAttribute("name", IPLAT.CONSTANTS.EXPORT_EIINFO);
            inputField.setAttribute("value", postData.exportEiInfo);
            exportForm.appendChild(inputField);
        }

        document.body.appendChild(exportForm);
        // exportIframe.appendChild(exportForm);

        exportForm.submit();
    };

    /**
     * 把前端的eiBlock导出成Excel
     * @param eiBlock EiBlock对象
     * @param filename 文件名称
     * @param options kendo.ooxml.Workbook中sheets参数
     */
    IPLAT.Util.exportEiBlock2Excel = function(eiBlock, filename, options) {
        var meta, key, rows = [], cells =[], data, obj;
        if (!IPLAT.isEiBlock(eiBlock)) {
            return;
        }

        meta = eiBlock.getBlockMeta().metas;
        data = eiBlock.getMappedRows();

        // 标题信息
        for(key in meta) {
            if (meta.hasOwnProperty(key) ) {
                obj = {};
                obj['value'] =  meta[key]['descName'] == undefined ? '' : meta[key]['descName'];
                cells.push(obj);
            }
        }

        rows.push({cells: cells});

        // 数据信息
        for (var i = 0; i < data.length; i++) {
            cells = [];
            for(key in meta) {
                if (meta.hasOwnProperty(key) ) {
                    obj = {};
                    obj['value'] = data[i][key];
                    cells.push(obj);
                }
            }
            rows.push({cells: cells});
        }

        // kendo.ooxml.Workbook中sheets参数处理
        if (options) {
            if (!options.rows) {
                options['rows'] = rows;
            }
        } else {
            options = {};
            options['rows'] = rows;
        }

        var workbook = new kendo.ooxml.Workbook({
            sheets: [
                options
            ]
        });

        // 导出excel
        kendo.saveAs({
            dataURI: workbook.toDataURL(),
            fileName: filename
        });
    };

    /**
     * 使EiInfo可视化
     * @param eiInfo EiInfo对象
     * @param element dom元素
     */
    IPLAT.Util.visualizeEiInfo = function (eiInfo, element) {
        var nameToDescription = {
            EiInfo: 'EiInfo',
            blocks: 'EiBlock数据区',
            extAttr: '扩展属性区',
            meta: '元数据区',
            status: '状态',
            traceId: "调用链路唯一Id",
            __version__: '版本'
        };
        var eiInfoData = [];
        var auto_increment = 0;
        var DEFAULT_ID = 1;

        if (!eiInfo) {
            return;
        }


        var createModel = function (id, name, value, parentId) {
            var description = nameToDescription[name] ? nameToDescription[name] : '';
            // var value = formatJsonStr(value)
            // return {id: id, name: name, value: formatJsonStr(JSON.stringify(value)), parentId: parentId, description: description};
            return {id: id, name: name, value: JSON.stringify(value), parentId: parentId, description: description};
        };

        var eiObjectToRow = function (object, data, parentId, isEiInfo) {
            var name, value;
            // 初始化EiInfo, 开始递归
            if (isEiInfo === true) {
                data.push(createModel(DEFAULT_ID, 'EiInfo', object, parentId));
                auto_increment = parentId = DEFAULT_ID;
            }

            if (auto_increment) {
                for (name in object) {
                    if (object.hasOwnProperty(name)) {
                        value = object[name];
                        auto_increment++;
                        data.push(createModel(auto_increment, name, value, parentId));
                        if (_.isObject(value)) {
                            eiObjectToRow(value, data, auto_increment);
                        }
                    }
                }
            }
        };

        // {} == EiInfo
        eiObjectToRow(eiInfo, eiInfoData, null, true);

        var dataSource = new kendo.data.TreeListDataSource({
            data: eiInfoData,
            schema: {
                model: {
                    id: "id",
                    expanded: false
                }
            }
        });

        $(element).kendoTreeList({
            dataSource: dataSource,
            columns: [
                {field: "name", title: "属性名", width: '250px'},
                {field: "description", title: "说明", width: '200px'},
                {
                    field: "value", title: "属性值",
                    template: "<span class='i-click'>#=value#</span>"
                }
            ]
        });
    };


    /*************************************************
     * uiLayout 高度自适应的布局 resize splitter
     *************************************************/

    /**
     * 获取页面滚动条到顶部的距离
     *
     * 参考 https://segmentfault.com/a/1190000005063489
     * @return {*}
     */
    IPLAT.Util.getBodyScrollTop = function () {
        var scrollTop;
        if (typeof window.pageYOffset !== 'undefined') { // pageYOffset指的是滚动条顶部到网页顶部的距离
            scrollTop = window.pageYOffset;
        } else if (typeof document.compatMode !== 'undefined' && document.compatMode !== 'BackCompat') {
            scrollTop = document.documentElement.scrollTop;
        } else if (typeof document.body !== 'undefined') {
            scrollTop = document.body.scrollTop;
        }
        return scrollTop;
    };

    /**
     * 获取滚动条的宽度
     *
     * 参考 https://codepen.io/chrissp26/pen/ybaHk
     * @return {*}
     */
    IPLAT.Util.getScrollBarWidth = function () {
        var $inner = $('<div style="width: 100%; height:200px;">test</div>'),
            $outer = $('<div style="width:200px;height:150px; position: absolute; top: 0; left: 0; visibility: hidden; ' +
                'overflow:hidden;"></div>').append($inner),
            inner = $inner[0],
            outer = $outer[0];

        $('body').append(outer);
        var width1 = inner.offsetWidth;
        $outer.css('overflow', 'scroll');
        var width2 = outer.clientWidth;
        $outer.remove();

        return (width1 - width2);
    };

    /**
     * FIXME Grid高度自适应
     * 获取Grid铺满屏幕高度
     * @param options
     * @return Number
     */
    IPLAT.Util.getGridFullScreenHeight = function (options) {
        var _default = {
            selector: null,
            isScrollX: false,
            isPagerPositionTop: true,
            toolbar: true,
            adjustHeight: 66 //通过实际情况获取
        };

        // 获取屏幕高度
        var screenHeight = $(window).height(),
            scrollTop = $(document).scrollTop(),
            _options = $.extend({}, _default, options),
            minHeight,
            toolbarHeight,
            gridHeight,
            pagerHeight;

        // 获取最小的高度10行 + 1行title + 下面滚动条 + toolbar + pager

        // 存在滚动条时后Grid的高度
        gridHeight = _options.isScrollX === true ? 284 : 275;
        pagerHeight = 32;
        toolbarHeight = _options.toolbar === true ? 32 : 0;

        // 获取最小高度
        minHeight = gridHeight + pagerHeight + toolbarHeight;

        var $region = $(_options.selector);
        if (!$region.length) {
            return gridHeight;
        }

        // 获取region高度
        var offset = $region.offset(),
            top = Math.max(offset.top - scrollTop, 0),
            regionHeight = screenHeight - top,
            adjustHeight = _options.adjustHeight;

        // 返回较大值
        return Math.max(regionHeight - adjustHeight, minHeight);

    };

    /**
     * 阻止事件冒泡
     * @param e DOM事件
     */
    IPLAT.Util.stopPropagation = function (e) {
        var event = e || window.event;
        if (event && event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    };

    /**
     * 阻止浏览器默认行为
     * @param e DOM事件
     */
    IPLAT.Util.preventDefault = function (e) {
        var event = e || window.event;
        if (event.preventDefault)
            event.preventDefault();
        event.returnValue = false;
    };


    /**
     * 获取元素相对于屏幕的位置
     * @param element dom 元素
     */
    IPLAT.Util.getElementScreenPosition = function (element) {
        var $element = $(element),
            scrollLeft = $(document).scrollLeft(),
            scrollTop = $(document).scrollTop();

        return {
            top: $element.offset().top - scrollTop,
            left: $element.offset().left - scrollLeft,
            height: $element.outerHeight(),
            width: $element.outerWidth()
        }
    };


    /**
     * 防止弹出框的造成的屏幕窗口抖动
     */
    IPLAT.Util.preventWindowShake = function () {
        var maxHeight = 0;
        var _resetContainer = _.debounce(function () {
            $(document.body).css('height', maxHeight + 'px');
        }, 100);
        $("#page-container").css('height', '');
        $(document).on('scroll.iplat.popup', function (e) {
            var height = document.body.scrollHeight;
            if (height > maxHeight) {
                maxHeight = height;
                _resetContainer();
            }
        });
    };

    /**
     * 弹出框消失后，还原屏幕窗口
     */
    IPLAT.Util.restoreWindow = function () {
        var $document = $(document);
        $document.off('scroll.iplat.popup');
        if ($document.scrollTop() > 0) {
            setInterval(function () {
                var pageHeight = $('#page-container').height();
                var bodyHeight = $(document.body).height();

                if (bodyHeight > pageHeight) {
                    $(document.body).css('height', (bodyHeight - 5) + 'px');
                } else {
                    $(document.body).css('height', '');
                }
            }, 20)
        }

    };

    /**
     * 禁止Grid滚动
     * @param kendoGrid kendo中Grid的实例
     */
    IPLAT.Util.forbidKendoGridScroll = function (kendoGrid) {
        var $content, $lockedContent;
        // 只处理kendoGrid的实例
        if (kendoGrid instanceof kendo.ui.Grid) {
            $content = $(kendoGrid.content);
            $lockedContent = $(kendoGrid.lockedContent);

            if ($content.length) {
                $content.on('mousewheel', function (e) {
                    IPLAT.Util.preventDefault(e);
                }, false);
            }

            if ($lockedContent.length) {
                $lockedContent.on('mousewheel', function (e) {
                    IPLAT.Util.preventDefault(e);
                }, false);
            }
        }
    };

    /**
     * 重启Grid滚动
     * @param kendoGrid kendo中Grid的实例
     */
    IPLAT.Util.restartKendoGridScroll = function (kendoGrid) {
        var $content, $lockedContent;
        if (kendoGrid instanceof kendo.ui.Grid) {
            $content = $(kendoGrid.content);
            $lockedContent = $(kendoGrid.lockedContent);

            // 分为固定列和非固定列处理
            if ($content.length) {
                $content.off('mousewheel');
            }
            if ($lockedContent.length) {
                $lockedContent.off('mousewheel');
            }
        }
    };

    /**
     * UI Layout
     */

    $(window).load(function () {
        // block-content 需要自适应高度
        var fitHeightSelector = "." + IPLATUI.Config.EFPage.fitHeightClass;
        var $regionContent = $(fitHeightSelector);

        if ($regionContent.length > 0) {
            _platFitHeight();
            $(window).on("resize", kendo.throttle(_platFitHeight, 200));
        }
    });

    function _platFitHeight() {
        var fitHeightSelector = "." + IPLATUI.Config.EFPage.fitHeightClass;
        var $regionContent = $(fitHeightSelector);

        if ($regionContent.length > 0) {
            var $form = $("form.i-form");

            var formPaddingBottom = IPLATUI.Config.EFPage.paddingBottom ||
                    $form.css("padding-bottom").replace("px", "") * 1; // 8px


            var offsetH = 0;

            // 计算每个元素的offset
            $regionContent.each(function () {
                var $content = $(this),
                    // div上的计算border padding margin的修正量 data-offset-h
                    offsetH = $content.data("offsetH") || 0;

                offsetH = offsetH + formPaddingBottom;

                var fitContentH = autoFitHeight($content, offsetH);
                $content.outerHeight(fitContentH);
            });
        }
    }


    // 页面纵向滚动条

    // 元素需要resize

    // 元素的初始高度要适应


    /**
     *  根据元素的当前定位，获取充满window的高度，当前页面不能存在滚动条
     *
     * @param element DOM元素结点，第二个参数为可选参数，考虑父元素border margin后的偏移量
     * @return {number} 元素的outerHeight
     */
    function autoFitHeight(element) {
        var $window = $(window),
            windowH = $window.height(),
            offsetH = arguments[1] || 0; // 考虑父元素border margin后的偏移量

        var $element = $(element),
            contentOffset = $element.offset();

        return windowH - contentOffset.top - offsetH;
    }


})(window.jQuery);

(function ($) {
    var resize;
    var positionList = ['relative', 'absolute', 'fixed'];
    var pfx = (function() {
        var style = document.createElement( "dummy" ).style,
            prefixes = "Webkit Moz O ms Khtml".split( " " ),
            memory = {};

        return function(prop) {
            if (typeof memory[prop] === "undefined") {

                var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1),
                    props = (prop + " " + prefixes.join(ucProp + " ") + ucProp).split(" ");

                memory[prop] = null;
                for (var i in props) {
                    if (style[props[i]] !== undefined) {
                        memory[prop] = props[i];
                        break;
                    }
                }
            }
            return memory[prop];
        };
    })();

    /**
     *  获取样式
     *  @param el DOM元素结点
     *  @param prop 样式参数
     */
    function getStyle(el, prop) {
        var props = window.getComputedStyle ? window.getComputedStyle(el, null): el.currentStyle;
        var pfxProp = pfx(prop);
        if (pfxProp !== null) {
            return props[pfxProp]
        }
        return props[prop];
    }

    /**
     *  让按钮失效
     *  @param el DOM元素结点
     */
    var disabled = function (el) {
        var $el = $(el), el = $el[0], $parent = $el.parent(), z_index, modal;
        var modalTemplate = '<div style="position: absolute; left:{0}; top:{1}; height:{2}; width:{3}"></div>';
        if ($el.length && $parent.length) {
            var position = getStyle($parent[0], 'position');
            if (positionList.indexOf(position) < 0) {
                $parent.css('position', 'relative');
            }
            // 层级信息
            z_index = getStyle(el, 'z-index');
            $el.css('opacity', '0.1');
            modal = $(kendo.format(modalTemplate, el.offsetLeft + 'px', el.offsetTop + 'px',
                el.offsetHeight + 'px', el.offsetWidth + 'px'));
            if(+z_index) {
                modal.css('z-index', +z_index + 1);
            }
            $parent.append(modal);
            resize = _.throttle(function () {
                modal.css({left: el.offsetLeft + 'px', top: el.offsetTop + 'px'})
            }, 200);
            $el.data('modal', modal);
            $el.data('resize', resize);
            $(window).on('resize', resize);
        }
    };

    /**
     *  恢复按钮功能
     *  @param el DOM元素结点
     */
    var enabled = function (el) {
        var $el = $(el), modal, resize;
        $el.css('opacity', '');
        modal = $el.data('modal');
        resize = $el.data('resize');
        if (resize) {
            $(window).off('resize', resize);
        }
        if (modal) {
            modal.remove();
        }
    };

    IPLAT.disabled = disabled;
    IPLAT.enabled = enabled;
})(window.jQuery);
